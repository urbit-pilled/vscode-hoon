{
    "barbuc": "## `|$` \"barbuc\"\n\nDeclares a mold builder wet gate with one or more molds as its sample.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;$  sample<p>  body<p>  </pre> |\n| Wide | <pre>  &verbar;$(sample body)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%brbc sample=(lest term) body=spec]\n```\n\n#### Expands to\n\n```hoon\n|$  [a b]\nbody\n```\n\nbecomes\n\n```hoon\n|*  [a=$~(* $-(* *)) b=$~(* $-(* *))]\n^:\nbody\n```\n\n#### Semantics\n\n`|$` is used to declare a wet gate mold builder that is polymorphic in its input\nmolds. `a` is a `lest` of `term` used as identifiers for the input molds. `b` is\na structure built from elements of `a`. The output of `|$` is a mold builder\nobtained by substituting the input molds parameterized by `a` into `b`.\n\n#### Discussion\n\nA mold builder is a wet gate from one or more molds to a mold. A mold is a\nfunction from nouns to nouns with types that may be partial, is always\nidempotent, and usually the identity function on the noun itself.\n\n`|$` is a restricted form of `|*`. The use of `|$` over `|*` is one of style, as\neither could be used to make wet gates that are mold builders. The buc in `|$`\nis a hint that `|$` is closely related to buc runes, and thus `|$` should be\nused to make mold builders, while `|*` should be used for any other sort of wet\ngate. Unlike `|*`, the body of `|$` is parsed in pattern mode to a `$spec`.\nThus, the second argument of `|$` is frequently a buc rune. For further\ndiscussion of wet gates, see the entry for [`|*`](#-bartar).\n\nLike other single-arm cores, the arm for `|$` is named `$` and this can be used to\ndefine recursive structures. Note however that Hoon is evaluated eagerly, and so\ninfinite structures are not permitted.\n\nProper style for `|$` is to enclose the first argument with brackets, even if it\nis only a single term. The interpeter will accept a single term without brackets\njust fine, but this style is for consistency with the fact that the first\nargument is a `lest`.\n\n#### Examples\n\n```\n> =foo |$([a b] [b a])\n\n> =bar (foo [@ @tas])\n\n> (bar %cat 3)\n[%cat 3]\n```\n\n---\n",
    "barcab": "## `|_` \"barcab\"\n\nProduce a **door** (a core with a sample).\n\n#### Syntax\n\nOne fixed argument, then a variable number of `+`-family expressions.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;_  a=spec<p>  ++  b=term  c=hoon<p>  ++  d=term  e=hoon<p>       ...<p>  ++  f=term  g=hoon<p>  --<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |\n\n\nNote: The `++` rune may be replaced with any other rune in the `+` family.\n\n#### AST\n\n```hoon\n[%brcb p=spec q=alas r=(map term tome)]\n```\n\n#### Expands to\n\n```hoon\n=|  a=spec\n|%\n++  b=term  c=hoon\n++  d=term  e=hoon\n       ...\n++  f=term  g=hoon\n--\n```\n\n#### Semantics\n\nThe product of a `|_` expression is a **door**, a core with one or more arms\nwhose payload includes a sample. That is, a door is a cell of `[battery [sample context]]`, where the `battery` contains one or more arms.\n\n`a` defines the door sample type and usually includes a name assignment (e.g.,\n`n=@`). `a` is followed by a series of arm definitions, each of which begins\nwith a rune in the `+` family (most of `++`). There must be at least one arm,\nbut there may be arbitrarily many. Each arm must include a name (`b`, `d`, and\n`f` above), which is followed by the expression (`c`, `e`, and `g` above) that\ndefines the arm product.\n\nThe context of the door is the subject of the `|_` expression.\n\n#### Discussion\n\nA door is the general case of a gate (function). A gate is a door with only one\narm, which has the name `$`.\n\nCalling a door is like calling a gate except the caller also needs to specify\nthe arm to be computed. So, for example, if you have some door `door` which\ncontains some arm `arm`, and you want to pass some argument (i.e., input value\n`arg`), you would call it with `~(arm door arg)`.\n\nBecause gates are also doors, you can call them the same way. To call the gate\n`foo` as a door, instead of `(foo baz)` we would write `~($ foo baz)`. This is\nan irregular form for `%~($ foo baz)`,\n[%~](/reference/hoon/rune/cen#-censig).\n\n#### Examples\n\nA trivial door:\n\n```\n> =mol |_  a=@ud\n       ++  succ  +(a)\n       ++  prev  (dec a)\n       --\n\n> ~(succ mol 1)\n2\n\n> ~(succ mol ~(succ mol ~(prev mol 5)))\n6\n```\n\nA more interesting door, from the kernel library:\n\n```hoon\n++  ne\n  |_  tig=@\n  ++  d  (add tig '0')\n  ++  x  ?:((gte tig 10) (add tig 87) d)\n  ++  v  ?:((gte tig 10) (add tig 87) d)\n  ++  w  ?:(=(tig 63) '~' ?:(=(tig 62) '-' ?:((gte tig 36) (add tig 29) x)))\n  --\n```\n\nThe `ne` door prints a digit in base 10, 16, 32 or 64:\n\n```\n~zod:dojo> `@t`~(x ne 12)\n'c'\n```\n\n---\n",
    "barcol": "## `|:` \"barcol\"\n\nProduce a gate with a custom sample.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;:  a<p>  b<p>  </pre> |\n| Wide | <pre>  &verbar;:(a b)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%brcl p=hoon q=hoon]\n```\n\n#### Semantics\n\n`a` is a Hoon expression whose product type defines which values the gate accepts, and it usually includes a name (e.g., `n=1`). The product of `a` also serves as the default value of the sample. `b` is a Hoon expression that determines the product value of the gate.\n\n#### Expands to\n\n```hoon\n=+  a\n|.  b\n```\n\n#### Discussion\n\nPick your own default value for the sample. Note that `a` is an ordinary\nexpression, not a type; `|:` doesn't bunt a sample as [`|=`](#-bartis) does.\n\nThis is useful if you want a gate to have a sample of a particular type, but you don't want the default value of the gate to be the default value of that type.\n\n#### Examples\n\n```\n> =add-ten |:(n=`@`2 (add n 10))\n\n> (add-ten 10)\n20\n\n> (add-ten)\n12\n```\n\n---\n",
    "barcen": "## `|%` \"barcen\"\n\nProduce a core, `[battery payload]`.\n\n#### Syntax\n\nArgument: a variable number of `+`-family expressions.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;%<p>  ++  a=term  b=hoon<p>  ++  c=term  d=hoon<p>       ...<p>  ++  e=term  f=hoon<p>  --<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |\n\n\nNote: The `++` rune may be replaced with any other rune in the `+` family.\n\n#### AST\n\n```hoon\n[%brcn p=(unit term) q=(map term tome)]\n```\n\n#### Semantics\n\nThe product of a `|%` expression is a dry core with one or more arms in the\nbattery.\n\nThe `|%` rune is followed by a series of arm definitions, each of which begins\nwith a rune in the `+` family (most of `++`). There must be at least one arm,\nbut there may be arbitrarily many. Each arm must include a name (`a`, `c`, and\n`e` above), which is followed by the expression (`b`, `d`, and `f` above) that\ndefines the arm product.\n\nThe core payload is the subject of the `|%` expression.\n\n#### Discussion\n\nA core is a cell of `[battery payload]`, where the `battery` is code and the\n`payload` is data. The `battery` is one or more arms. An arm is a computation\nthat takes the core itself as its subject.\n\nThe `|%` rune is used to construct a core from a series of arm definitions. Each\narm definition in the expression begins with an arm rune (`++`, `+$`, or `+*`).\nThese arms make up the `battery`. The subject of the `|%` expression is used to\nmake the core's `payload`.\n\nA core is like an \"object\" in a conventional language, but its attributes\n(_arms_) are functions on the core, not the core and an argument. A \"method\" on\na core is an arm that produces a gate.\n\n#### Examples\n\nA trivial core:\n\n```\n> =foo =+  x=58\n       |%\n       ++  n  (add 42 x)\n       ++  g  |=  b=@\n              (add b n)\n       --\n\n> n.foo\n100\n\n> (g.foo 1)\n101\n```\n\n---\n",
    "bardot": "## `|.` \"bardot\"\n\nProduce a trap (a core with one arm `$`).\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;.  a<p>  </pre> |\n| Wide | <pre>  &verbar;.(a)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%brdt p=hoon]\n```\n\n#### Expands to\n\n```hoon\n|%  ++  $  a=hoon\n--\n```\n\n#### Semantics\n\nA `|.` expression produces a core with a single arm, `$`. The core isn't\nexplicitly given a sample. `a` is a Hoon expression that defines the computation\nof the `$` arm.\n\nThe payload of the core is the subject of the `|.` expression.\n\n#### Discussion\n\nA trap is generally used to defer a computation.\n\n#### Examples\n\nA trivial trap:\n\n```\n> =foo |.(42)\n\n> $:foo\n42\n\n> (foo)\n42\n```\n\nA more interesting trap:\n\n```\n> =foo =/  reps  10\n       =/  step  0\n       =/  outp  0\n       |.\n       ?:  =(step reps)\n         outp\n       $(outp (add outp 2), step +(step))\n\n> (foo)\n20\n```\n\nNote that we can use `$()` to recurse back into the\ntrap, since it's a core with an `$` arm.\n\n> `$(...)` expands to `%=($ ...)` ([\"centis\"](/reference/hoon/rune/cen#-centis)).\n\n---\n",
    "barket": "## `|^` \"barket\"\n\nProduce a core whose battery includes a `$` arm and compute the latter.\n\n#### Syntax\n\nOne fixed argument, then a variable number of `+`-family expressions.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;^  a=hoon<p>  ++  b=term  c=hoon<p>  ++  d=term  e=hoon<p>       ...<p>  ++  f=term  g=hoon<p>  --<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%brkt p=hoon q=(map term tome)]\n```\n\n#### Expands to\n\n```hoon\n=>  |%\n    ++  $  a=hoon\n    ++  b=term  c=hoon\n    ++  d=term  e=hoon\n           ...\n    ++  f=term  g=hoon\n    --\n$\n```\n\n#### Semantics\n\nA `|^` expression produces a multi-arm core whose battery includes a `$` arm,\nwhich is evaluated immediately. `a` is a Hoon expression that defines the\nproduct of the `$` arm. `a` is followed by a series of arm definitions for the\nrest of the core battery arms. There must be at least one arm other than the `$`\narm.\n\n#### Discussion\n\nThe `|^` rune is useful when you define a multi-arm core in your code and a\nparticular arm in it is to be evaluated immediately.\n\n#### Examples\n\nA trivial example:\n\n```\n> |^\n  (add n g)\n  ++  n  42\n  ++  g  58\n  --\n100\n```\n\n---\n",
    "barhep": "## `|-` \"barhep\"\n\nProduce a trap (a core with one arm `$`) and evaluate it.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;-  a<p>  </pre> |\n| Wide | <pre>  &verbar;-(a)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%brhp p=hoon]\n```\n\n#### Expands to\n\n```hoon\n=<($ |.(a=hoon))\n```\n\n#### Semantics\n\nA `|-` expression produces a core with one arm named `$` and immediately\nevaluates `$`. `a` is a Hoon expression that determines what `$` evaluates to.\n\n#### Discussion\n\nThe `|-` rune can be thought of as a 'recursion point' or a 'loop starting\npoint'. Since `|-` makes a `|.` ([\"bardot\"](#-bardot), a core with one arm named\n`$`, we can recurse back into it with `$()`.\n\n> `$(...)` expands to `%=($ ...)` ([\"centis\"](/reference/hoon/rune/cen#-centis)).\n\n#### Examples\n\nA trivial computation doesn't recurse:\n\n```\n> |-(42)\n42\n```\n\nThe classic loop is a decrement:\n\n```\n> =foo =/  a  42\n       =/  b  0\n       |-\n       ?:  =(a +(b))\n         b\n       $(b +(b))\n\n> foo\n41\n```\n\n---\n",
    "barsig": "## `|~` \"barsig\"\n\nProduce an iron gate.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;~  a<p>  b<p>  </pre> |\n| Wide | <pre>  &verbar;~(a b)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%brsg p=spec q=hoon]\n```\n\n#### Expands to\n\n```hoon\n^|  |=(a b)\n```\n\n#### Semantics\n\nA `|~` expression produces an iron gate. `a` defines the sample, and `b` defines\nthe output value of the gate.\n\n#### Discussion\n\nSee [this discussion of core variance models](/reference/hoon/advanced)\n\n#### Examples\n\n```\n> =>  ~  ^+(|~(a=@ *@) |=(a=* *@))\n<1|usl {a/@ $~}>\n```\n\n---\n",
    "bartar": "## `|*` \"bartar\"\n\nProduce a wet gate (one-armed core with sample).\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;*  a  b<p>  </pre> |\n| Wide | <pre>  &verbar;*(a b)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%brtr p=spec q=hoon]\n```\n\n#### Expands to\n\n```hoon\n=|  a\n|@\n++  $\n  b\n--\n```\n\n#### Semantics\n\nA `|*` expression produces a wet gate. `a` defines the gate's sample, and `b` is\na Hoon expression that determines the output value of the gate.\n\n#### Discussion\n\nIn a normal (dry) gate, your argument is converted into the\nsample type. In a generic (wet) gate, your argument type\npasses through the function, rather as if it were a macro (there\nis still only one copy of the code, however).\n\nGenericity is a powerful and dangerous tool. Use wet gates only if\nyou know what you're doing.\n\nJust as with a [gate](#-bartis), we can recurse back into a wet gate\nwith `$()`.\n\n> `$(...)` expands to `%=($ ...)` ([\"centis\"](/reference/hoon/rune/cen#-centis)).\n\n`|*` can be used to make wet gates that produce structures, but this usage is\ndiscouraged in favor of `|$`.\n\n#### Examples\n\nWet and dry gates in a nutshell:\n\n```\n> =foo |=([a=* b=*] [b a])\n\n> =bar |*([a=* b=*] [b a])\n\n> (foo %cat %dog)\n[6.778.724 7.627.107]\n\n> (bar %cat %dog)\n[%dog %cat]\n```\n\nThe dry gate does not preserve the type of `a` and `b`; the wet\ngate does.\n\n---\n",
    "bartis": "## `|=` \"bartis\"\n\nProduce a gate (a one-armed core with a sample).\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;=  a<p>  b<p>  </pre> |\n| Wide | <pre>  &verbar;=(a b)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%brts p=spec q=hoon]\n```\n\n#### Expands to\n\n```hoon\n=+  ^~(*a=spec)\n|%  ++  $  b=hoon\n--\n```\n\n#### Definition\n\nThe product of a `|=` expression is a dry **gate**, i.e., a Hoon function.\n\n`p` defines the gate sample type -- i.e., the input value type -- and usually\nincludes a sample name assignment (e.g., `a=@`). `q` is an expression that\ndetermines the output value of the gate.\n\n#### Discussion\n\nDry gates are used for the vast majority of ordinary functions in Hoon.\n\nA gate is a core with one arm named `$`, so we can recurse back into it with `$()`.\n\n> `$(...)` expands to `%=($ ...)` ([\"centis\"](/reference/hoon/rune/cen#-centis)).\n\n#### Examples\n\nA trivial gate:\n\n```\n> =foo |=(a=@ +(a))\n\n> (foo 20)\n21\n```\n\nA slightly less trivial gate:\n\n```\n> =foo |=  [a=@ b=@]\n       (add a b)\n\n> (foo 30 400)\n430\n```\n\n---\n",
    "barpat": "## `|@` \"barpat\"\n\nProduce a 'wet' core `[battery payload]`.\n\n#### Syntax\n\nArguments: a variable number of `+`-family expressions.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;@<p>  ++  a=term  b=hoon<p>  ++  c=term  d=hoon<p>       ...<p>  ++  e=term  f=hoon<p>  --<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |\n\n\nNote: The `++` rune may be replaced with any other rune in the `+` family.\n\n#### AST\n\n```hoon\n[%brpt p=(unit term) q=(map term tome)]\n```\n\n#### Semantics\n\nA `|@` expression produces a 'wet' core whose payload is the expression's\nsubject. The various arms in the battery are each named (`a`, `c`, and `e`\nabove) and defined explicitly with a Hoon expression (with `b`, `d`, and `f`\nabove).\n\n#### Discussion\n\nThe `|@` rune is just like the `|%` rune except that instead of producing a\n'dry' core, it produces a 'wet' one. This allows for type polymorphism of its\narms, using 'genericity'. See [Advanced types](/reference/hoon/advanced).\n\n---\n",
    "barwut": "## `|?` \"barwut\"\n\nProduce a lead trap.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;?  a<p>  </pre> |\n| Wide | <pre>  &verbar;?(a)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%brwt p=hoon]\n```\n\n#### Expands to\n\n```hoon\n^?  |.  a\n```\n\n#### Semantics\n\nA `|?` expression produces a lead trap (i.e., a lead core with one arm named\n`$`). `a` is a Hoon expression that defines what the `$` arm does.\n\n#### Discussion\n\nSee this [discussion of the core variance model](/reference/hoon/advanced).\n\n#### Examples\n\n```\n> =>  ~  ^+  |?(%a)  |.(%a)\n<1?pqz $~>\n\n> =>  ~  ^+  |?(%a)  |.(%b)\nnest-fail\n```\n",
    "bucbar": "## `$|` \"bucbar\"\n\nStructure that satisfies a validator.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $&verbar;  p<p>  q<p>  </pre> |\n| Wide | <pre>  $&verbar;(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%bcbr p=spec q=hoon]\n```\n\n#### Discussion\n\n`$|` is used for validation of values at a finer level than that of types.\nRecall that a given value of `type` can be equivalently defined by more than one\n`spec`. For performance reasons, it may be beneficial to restrict oneself to\nvalues of a given type that adhere to an abstract syntax tree specified by some\nsubset of those `spec`s that may be used to define a given type.\n\n`$|` takes two arguments: a structure `a` and a gate `b` that produces a `flag`\nthat is used to validate values produced by the mold generated by `a` at\nruntime. `$|(a b)` is a gate that takes in a noun `x` and first pins the product\nof clamming `a` with `x`, call this `foo`. Then it calls `b` on `foo`. It\nasserts that the product of `(b foo)` is `&`, and then produces `foo`. This is\nequivalent to the following (which is not how `$|` is actually defined but has\nthe same behavior):\n\n```hoon\n|=  x=*\n=/  foo  ;;(a x)\n?>  (b foo)\nfoo\n```\n\nFor example, the elements of a `set` are treated as being unordered, but the\nvalues will necessarily possess an order by where they are in the memory. Thus\nif every `set` is stored using the same order scheme then faster algorithms\ninvolving `set`s may be written. Furthermore, if you just place elements in the\n`set` randomly, it may be mistreated by algorithms already in place that are\nexpecting a certain order. This is not the same thing as casting - it is forcing\na type to have a more specific set of values than its mold would suggest. This\nrune should rarely be used, but it is extremely important when it is.\n\n#### Examples\n\n```\n> =foo $|  (list @)\n       |=(a=(list) (lth (lent a) 4))\n```\n\nThis creates a structure `foo` whose values are `list`s with length less than 4.\n\n```\n> (foo ~[1 2 3])\n~[1 2 3]\n\n> (foo ~[1 2 3 4])\nford: %ride failed to execute:\n```\n\nThe definition of `+set` in `hoon.hoon` is the following:\n\n```hoon\n++  set\n  |$  [item]\n  $|  (tree item)\n  |=(a=(tree) ?:(=(~ a) & ~(apt in a)))\n```\n\nHere [`|$`](/reference/hoon/rune/bar#-barbuc) is used to define a mold\nbuilder that takes in a mold (given the face `item`) and creates a structure\nconsisting of a `tree` of `item`s with `$|` that is validated with the gate\n`|=(a=(tree) ?:(=(~ a) & ~(apt in a)))`. `in` is a door in `hoon.hoon` with\nfunctions for handling `set`s, and `apt` is an arm in that door that checks that\nthe values in the `tree` are arranged in the particular way that `set`s are\narranged in Hoon, namely 'ascending `+mug` hash order'.\n\n---\n",
    "buccab": "## `$_` \"buccab\"\n\nStructure that normalizes to an example.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $_  p<p>  </pre> |\n| Wide | <pre>  $_(p)<p>  </pre> |\n| Irregular | <pre><p>    _p<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%bccb p=hoon]\n```\n\n#### Expands to\n\n```hoon\n|=(* p)\n```\n\n#### Discussion\n\n`$_` discards the sample it's supposedly normalizing and produces its\n**example** instead.\n\n#### Examples\n\n```\n> =foo $_([%foobaz %moobaz])\n\n> (foo %foo %baz)\n[%foobaz %moobaz]\n\n> `foo`[%foobaz %moobaz]\n[%foobaz %moobaz]\n\n> $:foo\n[%foobaz %moobaz]\n```\n\n---\n",
    "buccen": "## `$%` \"buccen\"\n\nStructure which recognizes a union tagged by head atom.\n\n#### Syntax\n\nA variable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $%  [%p1 ...]<p>      [%p2 ...]<p>      [%p3 ...]<p>      [%pn ...]<p>  ==<p>  </pre> |\n| Wide | <pre>  $%([%p1 ...] [%p2 ...] [%p3 ...] [%pn ...])<p>  </pre> |\n| Irregular | None. |\n\n\nEach item may be an atom or (more commonly) a cell. The atom or head of the cell\n_must_ be a constant (`%foo`, `%1`, `%.y`, etc).\n\n#### AST\n\n```hoon\n[%bccn p=(list spec)]\n```\n\n#### Defaults to\n\nThe default of the last item `i` in `p`. Crashes if `p` is empty.\n\n#### Discussion\n\nA `$%` is a tagged union, a common data model.\n\nMake sure the last item in your `$%` terminates, or the default will\nbe an infinite loop! Alteratively, you can use `$~` to define a custom\ntype default value.\n\n#### Examples\n\n```\n> =foo $%([%foo p=@ud q=@ud] [%baz p=@ud])\n\n> (foo [%foo 4 2])\n[%foo p=4 q=2]\n\n> (foo [%baz 37])\n[%baz p=37]\n\n> $:foo\n[%baz p=0]\n```\n\n---\n",
    "buccol": "## `$:` \"buccol\"\n\nForm a cell type.\n\n#### Syntax\n\nA variable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $:  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  $:(p1 p2 p3 pn)<p>  </pre> |\n| Irregular (noun mode) | <pre>  ,[p1 p2 p3 pn]<p>  </pre> |\n| Irregular (structure mode) | <pre>    [p1 p2 p3 pn]<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%bccl p=(list spec)]\n```\n\n#### Normalizes to\n\nThe tuple the length of `p`, normalizing each item.\n\n#### Defaults to\n\nThe tuple the length of `p`.\n\n#### Examples\n\n```\n> =foo $:(p=@ud q=@tas)\n\n> (foo 33 %foo)\n[p=33 q=%foo]\n\n> `foo`[33 %foo]\n[p=33 q=%foo]\n\n> $:foo\n[p=0 q=%$]\n```\n\n---\n",
    "bucgal": "## `$<` \"bucgal\"\n\nFilters a pre-existing mold to obtain a mold that excludes a particular\nstructure.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $<  p<p>  q<p>  </pre> |\n| Wide | <pre>  $<(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%bcgl p=spec q=spec]\n```\n\n#### Discussion\n\nThis can be used to obtain type(s) from a list of types `q` that do not satisfy a\nrequirement given by `p`.\n\n#### Examples\n\n```\n> =foo $%([%bar p=@ud q=@ud] [%baz p=@ud])\n\n> =m $<(%bar foo)\n\n> (m [%bar 2 4])\nford: %ride failed to execute:\n\n> (m [%baz 2])\n[%baz p=2]\n\n> ;;($<(%foo [@tas *]) [%foo 1])\nford: %ride failed to execute:\n\n> ;;($<(%foo [@tas *]) [%bar 1])\n[%bar 1]\n```\n\n---\n",
    "bucgar": "## `$>` \"bucgar\"\n\nFilters a mold to obtain a new mold matching a particular structure.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $>  p<p>  q<p>  </pre> |\n| Wide | <pre>  $>(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%bcgr p=spec q=spec]\n```\n\n#### Discussion\n\nThis can be used to obtain type(s) from a list of types `q` that satisfy a\nrequirement given by `p`.\n\n#### Examples\n\nExamples with `$%`:\n\n```\n> =foo $%([%bar p=@ud q=@ud] [%baz p=@ud])\n\n> =m $>(%bar foo)\n\n> (m [%bar 2 4])\n[%bar p=2 q=4]\n\n> (m [%baz 2])\nford: %ride failed to execute:\n```\n\nExamples with `;;`:\n\n```\n> ;;([@tas *] [%foo 1])\n[%foo 1]\n\n> ;;([@tas *] [%bar 1])\n[%bar 1]\n\n> ;;($>(%foo [@tas *]) [%foo 1])\n[%foo 1]\n\n> ;;($>(%foo [@tas *]) [%bar 1])\nford: %ride failed to execute:\n```\n\n---\n",
    "buchep": "## `$-` \"buchep\"\n\nStructure that normalizes to an example gate.\n\n#### AST\n\n```hoon\n[%bchp p=spec q=spec]\n```\n\n#### Expands to\n\n```hoon\n$_  ^|\n|=(p $:q)\n```\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $-  p<p>  q<p>  </pre> |\n| Wide | <pre>  $-(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n`p` is the type the gate takes and `q` is the type the gate produces.\n\n#### Discussion\n\nSince a `$-` reduces to a [`$_`](#_-buccab), it is not useful for normalizing, just for typechecking. In particular, the existence of `$-`s does **not** let us send gates or other cores over the network!\n\n#### Examples\n\n```\n> =foo $-(%foo %baz)\n\n> ($:foo %foo)\n%baz\n```\n\n---\n",
    "bucket": "## `$^` \"bucket\"\n\nStructure which normalizes a union tagged by head depth (cell).\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $^  p<p>  q<p>  </pre> |\n| Wide | <pre>  $^(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%bckt p=spec q=spec]\n```\n\n#### Normalizes to\n\nDefault, if the sample is an atom; `p`, if the head of the sample\nis an atom; `q` otherwise.\n\n#### Defaults to\n\nThe default of `p`.\n\n#### Examples\n\n```\n> =a $%([%foo p=@ud q=@ud] [%baz p=@ud])\n\n> =b $^([a a] a)\n\n> (b [[%baz 33] [%foo 19 22]])\n[[%baz p=33] [%foo p=19 q=22]]\n\n> (b [%foo 19 22])\n[%foo p=19 q=22]\n\n> $:b\n[%baz p=0]\n```\n\n---\n",
    "buclus": "## `$+` \"buclus\"\n\nSpecify a shorthand type name for use in prettyprinting.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $+  p<p>  q<p>  </pre> |\n| Wide | <pre>  $+(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%bcls p=stud q=spec]\n```\n\n<!--\n#### Normalizes to\n\nDefault, if the sample is an atom; `p`, if the head of the sample\nis an atom; `q` otherwise.\n\n#### Defaults to\n\nThe default of `p`.\n-->\n\n#### Examples\n\n```\n> =/  my-type  $+(my-alias [@ @])\n\n> -:!>(*my-type)\n#t/#my-alias\n```\n\n---\n",
    "bucpam": "## `$&` \"bucpam\"\n\nRepair a value of a tagged union type.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $&  p<p>  q<p>  </pre> |\n| Wide | <pre>  $&(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n```hoon\n$&(combined-mold=spec normalizing-gate=hoon)\n```\n\nHere `combined-mold` is a tagged union type (typically made with `$%`) and\n`normalizing-gate` is a gate which accepts values of `combined-mold` and\nnormalizes them to be of one particular type in `combined-mold`.\n\n#### AST\n\n```hoon\n[%bcpm p=spec q=hoon]\n```\n\n#### Normalizes to\n\nThe product of the normalizing gate and sample.\n\n#### Defaults to\n\nThe default of the last type listed in `p`, normalized with the normalizing gate.\n\n#### Discussion\n\nThis rune is used to \"upgrade\" or \"repair\" values of a structure, typically from\nan old version to a new version. For example, this may happen when migrating\nstate after updating an app.\n\n#### Examples\n\n```hoon\n+$  old  [%0 @]\n+$  new  [%1 ^]\n+$  combined  $%(old new)\n+$  adapting  $&(combined |=(?-(-.a %0 [%1 1 +.a], %1 a)))\n```\n\nHere `adapting` is a structure that bunts to `[%1 ^]` but also normalizes from\n`[%0 @]` if called on such a noun.\n\n---\n",
    "bucsig": "## `$~` \"bucsig\"\n\nDefine a custom type default value.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $~  p<p>  q<p>  </pre> |\n| Wide | <pre>  $~(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n`p` defines the default value, and `q` defines everything else about the\nstructure.\n\n#### AST\n\n```hoon\n[%bcsg p=hoon q=spec]\n```\n\n#### Product\n\nCreates a structure (custom type) just like `q`, except its default value is `p`.\n\n#### Defaults to\n\nThe product of `p`.\n\n#### Discussion\n\nYou should make sure that the product type of `p` nests under `q`. You can check\nthe default value of some structure (custom type) `r` with `*r`. (See the [`^*`\nrune](/reference/hoon/rune/ket#-kettar).)\n\nDo not confuse the `$~` rune with the constant type for null, `$~`. (The latter\nuses older Hoon syntax that is still accepted. Preferably it would be `%~`.)\n\n#### Examples\n\nFirst, let's define a type without using `$~`:\n\n```\n> =b $@(@tas $%([%two *] [%three *]))\n\n> `b`%hello\n%hello\n\n> `b`[%two %hello]\n[%two 478.560.413.032]\n\n> *b\n\n%$\n\n> *@tas\n%$\n```\n\nUsing `$~`:\n\n```\n> =c $~(%default-value $@(@tas $%([%two *] [%three *])))\n\n> `c`%hello\n%hello\n\n> `c`[%two %hello]\n[%two 478.560.413.032]\n\n> *c\n%default-value\n```\n\n---\n",
    "bucpat": "## `$@` \"bucpat\"\n\nStructure which normalizes a union tagged by head depth (atom).\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $@  p<p>  q<p>  </pre> |\n| Wide | <pre>  $@(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%bcpt p=spec q=spec]\n```\n\n#### Normalizes to\n\n`p`, if the sample is an atom; `q`, if the sample is a cell.\n\n#### Defaults to\n\nThe default of `p`.\n\n#### Produces\n\nA structure which applies `p` if its sample is an atom, `q` if its sample is a\ncell.\n\n#### Examples\n\n```\n> =a $@(%foo $:(p=%baz q=@ud))\n\n> (a %foo)\n%foo\n\n> `a`[%baz 99]\n[p=%baz q=99]\n\n> $:a\n%foo\n```\n\n---\n",
    "buctis": "## `$=` \"buctis\"\n\nStructure which wraps a face around another structure.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $=  p<p>  q<p>  </pre> |\n| Wide | <pre>  $=(p q)<p>  </pre> |\n| Irregular | <pre><p>    p=q<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%bcts p=skin q=spec]\n```\n\n#### Expands to\n\n```hoon\n|=  *\n^=(p %-(q +6))\n```\n\n#### Discussion\n\nNote that the Hoon compiler is at least slightly clever about\ncompiling structures, and almost never has to actually put in a gate\nlayer (as seen in the expansion above) to apply a `$=`.\n\n#### Examples\n\n```\n> =a $=(p %foo)\n\n> (a %foo)\np=%foo\n\n> (a %baz)\nford: %ride failed to execute:\n```\n\n---\n",
    "bucwut": "## `$?` \"bucwut\"\n\nForm a type from a union of other types.\n\n#### Syntax\n\nVariable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $?  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  $?(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | <pre>    ?(p1 p2 p3 pn)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%bcwt p=(list spec)]\n```\n\n#### Normalizes to\n\nThe last item in `p` which normalizes the sample to itself.\n\nVoid, if `p` is empty.\n\n#### Defaults to\n\nThe last item in `p`.\n\n#### Discussion\n\nFor a union of atoms, a `$?` is fine. For more complex nouns, always try to use\na [`$%`](#-buccen), [`$@`](#-bucpat) or [`$^`](#-bucket), at least if you expect\nyour structure to be used as a normalizer.\n\n#### Examples\n\n```\n> =a ?(%foo %baz %baz)\n\n> (a %baz)\n%baz\n\n> (a [37 45])\nford: %ride failed to execute:\n\n> $:a\n%baz\n```\n",
    "cencab": "## `%_` \"cencab\"\n\nResolve a wing with changes, preserving type.\n\n#### Syntax\n\nOne fixed argument, then a variable number of pairs.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall style #1 | <pre>  %_  a=wing<p>    b=wing  c=hoon<p>    d=wing  e=hoon<p>    f=wing  g=hoon<p>  ==<p>  </pre> |\n| Tall style #2 | <pre>  %_    a=wing<p>      b=wing<p>    c=hoon<p>  ::<p>      d=wing<p>    e=hoon<p>  ::<p>      f=wing<p>    g=hoon<p>  ==<p>  </pre> |\n| Wide | <pre>  %_(a=wing b=wing c=hoon, d=wing e=hoon, ...)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%cncb p=wing q=(list (pair wing hoon))]\n```\n\n#### Expands to\n\n```hoon\n^+(a %=(a b c, d e, ...))\n```\n\n#### Semantics\n\nA `%_` expression resolves to the value of the subject at wing `a`, but modified\naccording to a series of changes: `b` is replaced with the product of `c`, `d`\nwith the product of `e`, and so on. At compile time a type check is performed to\nensure that the resulting value is of the same type as `a`.\n\n#### Discussion\n\n`%_` is different from `%=` because `%=` can change the type of a wing with\nmutations. `%_` preserves the wing type.\n\nSee [how wings are resolved](/reference/hoon/limbs/).\n\n#### Examples\n\n```\n> =foo [p=42 q=6]\n\n> foo(p %baz)\n[p=%baz q=6]\n\n> foo(p [55 99])\n[p=[55 99] q=6]\n\n> %_(foo p %baz)\n[p=7.496.034 99]\n\n> %_(foo p [55 99])\n! nest-fail\n```\n\n---\n",
    "cencol": "## `%:` \"cencol\"\n\nCall a gate with many arguments.\n\n#### Syntax\n\nOne fixed argument, then a variable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %:  a=hoon<p>    b=hoon<p>    c=hoon<p>     ...<p>    d=hoon<p>  ==<p>  </pre> |\n| Wide | <pre>  %:(a b c d)<p>  </pre> |\n| Irregular | <pre>    (a b c d)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%cncl p=hoon q=(list hoon)]\n```\n\n#### Semantics\n\nA `%:` expression calls a gate with many arguments. `a` is the gate to be\ncalled, and `b` through `d` are the arguments. If there is only one\nsubexpression after `a`, its product is the sample. Otherwise, a single argument\nis constructed by evaluating all of `b` through `d` -- however many\nsubexpressions there are -- and putting the result in a cell: `[b c ... d]`.\n\n#### Discussion\n\nWhen `%:` is used in tall-form syntax, the series of expressions after `p` must be terminated with `==`.\n\n#### Examples\n\n```\n> %:  add  22  33  ==\n55\n\n> =adder |=  a=*\n         =+  c=0\n         |-\n         ?@  a  (add a c)\n         ?^  -.a  !!\n         $(c (add -.a c), a +.a)\n\n> %:  adder  22  33  44  ==\n99\n\n> %:  adder  22  33  44  55  ==\n154\n\n> %:(adder 22 33 44)\n99\n\n> (adder 22 33 44)\n99\n```\n\n---\n",
    "cendot": "## `%.` \"cendot\"\n\nCall a gate (function), inverted.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %.  a  b<p>  </pre> |\n| Wide | <pre>  %.(a b)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%cndt p=hoon q=hoon]\n```\n\n#### Semantics\n\nThe `%.` rune is for evaluating the `$` arm of a gate, i.e., calling a function.\n`a` is for the desired sample value (i.e., input value), and `b` is the gate.\n\n#### Expands to\n\n```hoon\n%-(b=hoon a=hoon)\n```\n\n#### Discussion\n\n`%.` is just like `%-`, but with its subexpressions reversed; the argument comes\nfirst, and then the gate.\n\n#### Examples\n\n```\n> =add-triple |=([a=@ b=@ c=@] :(add a b c))\n\n> %.([1 2 3] add-triple)\n6\n```\n\n---\n",
    "cenhep": "## `%-` \"cenhep\" {% #-cenhep %}\n\nCall a gate (function).\n\n#### Syntax\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %-  a<p>  b<p>  </pre> |\n| Wide | <pre>  %-(a b)<p>  </pre> |\n| Irregular | <pre>    (a b)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%cnhp p=hoon q=hoon]\n```\n\n#### Semantics\n\nThis rune is for evaluating the `$` arm of a gate, i.e., calling a gate as a\nfunction. `a` is the gate, and `b` is the desired sample value (i.e., input\nvalue) for the gate.\n\n#### Expands to\n\n```hoon\n%~($ a b)\n```\n\n#### Discussion\n\n`%-` is used to call a function; `a` is the function\n([`gate`](/reference/hoon/rune/bar#-bartis), `q` the argument. `%-` is a\nspecial case of [`%~` (\"censig\")](#-censig), and a gate is a special case of a\n[door](/reference/hoon/rune/bar#_-barcab).\n\n#### Examples\n\n```\n> =add-triple |=([a=@ b=@ c=@] :(add a b c))\n\n> (add-triple 1 2 3)\n6\n\n> %-(add-triple [1 2 3])\n6\n```\n\n---\n",
    "cenket": "## `%^` \"cenket\"\n\nCall gate with triple sample.\n\n#### Syntax\n\nFour arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %^    a<p>      b<p>    c<p>  d<p>  </pre> |\n| Wide | <pre>  %^(a b c d)<p>  </pre> |\n| Irregular | <pre>    (a b c d)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%cnkt p=hoon q=hoon r=hoon s=hoon]\n```\n\n#### Expands to\n\n```hoon\n%-(a=hoon [b=hoon c=hoon d=hoon])\n```\n\n#### Examples\n\n```\n> =add-triple |=([a=@ b=@ c=@] :(add a b c))\n\n> %^(add-triple 1 2 3)\n6\n```\n\n---\n",
    "cenlus": "## `%+` \"cenlus\"\n\nCall gate with a cell sample.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %+  a<p>    b<p>  c<p>  </pre> |\n| Wide | <pre>  %+(a b c)<p>  </pre> |\n| Irregular | <pre>    (a b c)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%cnls p=hoon q=hoon r=hoon]\n```\n\n#### Semantics\n\nA `%+` expression is for calling a gate with a cell sample. `a` is the gate to\nbe called, `b` is for the head of the sample, and `c` is for the sample tail.\n\n#### Expands to\n\n```hoon\n%-(a=hoon [b=hoon c=hoon])\n```\n\n#### Examples\n\n```\n> =add-triple |=([a=@ b=@ c=@] :(add a b c))\n\n> %+(add-triple 1 [2 3])\n6\n```\n\n---\n",
    "censig": "## `%~` \"censig\"\n\nEvaluate an arm in a door.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %~  p=wing  q=hoon<p>  r=hoon<p>  </pre> |\n| Wide | <pre>  %~(p q r)<p>  </pre> |\n| Irregular | <pre><p>    ~(p q r1 r2 rn)<p>  </pre> |\n\n\nIn the irregular form, `r` may be split into multiple parts. Multiple parts of\n`r` will be formed into a cell.\n\n#### Semantics\n\nA `%~` expression evaluates the arm of a door (i.e., a core with a sample). `p`\nis a wing that resolves to the arm from within the door in question. `q` is the\ndoor itself. `r` is the sample of the door.\n\n#### Discussion\n\n`%~` is the general case of a function call, `%-`. In both, we replace the sample (`+6`) of a core. In `%-` the core is a gate and the `$` arm is evaluated. In `%~` the core is a door and any arm may be evaluated. You must identify the arm to be run: `%~(arm door arg)`.\n\nNote also that `p` is a wing and can therefore be `.`, as in `~(. door\nsample)`. This little idiom lets you load your sample into the door once\ninstead of over and over.\n\nSee also [`|_`](/reference/hoon/rune/bar#_-barcab).\n\n#### Examples\n\n```\n> =mycore |_  a=@\n          ++  plus-two  (add 2 a)\n          ++  double  (mul 2 a)\n          ++  mul-by\n            |=  b=@\n            (mul a b)\n          --\n\n> ~(plus-two mycore 10)\n12\n\n> ~(double mycore 10)\n20\n\n>  =tencore ~(. mycore 10)\n>  (mul-by:tencore 5)\n50\n```\n\n---\n",
    "centar": "## `%*` \"centar\"\n\nEvaluate an expression, then resolve a wing with changes.\n\n#### Syntax\n\nTwo fixed arguments, then a variable number of pairs.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall style #1 | <pre>  %*  a=wing  b=hoon<p>    c=wing  d=hoon<p>    e=wing  f=hoon<p>         ...<p>    g=wing  h=hoon<p>  ==<p>  </pre> |\n| Tall style #2 | <pre>  %*    a=wing  b=hoon<p>      c=wing<p>    d=hoon<p>  ::<p>      e=wing<p>    f=hoon<p>  ::<p>      g=wing<p>    h=hoon<p>  ==<p>  </pre> |\n| Wide | <pre>  %*(a b c d, e f, g h)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%cntr p=wing q=hoon r=(list (pair wing hoon))]\n```\n\n#### Semantics\n\nA `%*` expression evaluates some arbitrary Hoon expression, `b`, and then\nresolves a wing of that result, with changes. `a` is the wing to be resolved,\nand one or more changes is defined by the subexpressions after `b`.\n\n#### Expands to\n\n```hoon\n=+  b=hoon\n%=  a=wing\n  c=wing  d=hoon\n  e=wing  f=hoon\n       ...\n  g=wing  h=hoon\n==\n```\n\n#### Examples\n\n```\n> %*($ add a 2, b 3)\n5\n\n> %*(b [a=[12 14] b=[c=12 d=44]] c 11)\n[c=11 d=44]\n\n> %*(b [a=[12 14] b=[c=12 d=44]] c 11, d 33)\n[c=11 d=33]\n\n> =foo [a=1 b=2 c=3 d=4]\n\n> %*(+ foo c %hello, d %world)\n[b=2 c=%hello d=%world]\n\n> =+(foo=[a=1 b=2 c=3] foo(b 7, c 10))\n[a=1 b=7 c=10]\n\n> %*(foo [foo=[a=1 b=2 c=3]] b 7, c 10)\n[a=1 b=7 c=10]\n```\n\n---\n",
    "centis": "## `%=` \"centis\"\n\nResolve a wing with changes.\n\n#### Syntax\n\nOne fixed argument, then a variable number of pairs.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall style #1 | <pre>  %=  a=wing<p>    b=wing  c=hoon<p>    d=wing  e=hoon<p>         ...<p>    f=wing  g=hoon<p>  ==<p>  </pre> |\n| Tall style #2 | <pre>  %=    a=wing<p>      b=wing<p>    c=hoon<p>  ::<p>      d=wing<p>    e=hoon<p>  ::<p>      f=wing<p>    g=hoon<p>  ==<p>  </pre> |\n| Wide | <pre>  %=(a b c, d e, f g)<p>  </pre> |\n| Irregular | <pre><p>    a(b c, d e, f g)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%cnts p=wing q=(list (pair wing hoon))]\n```\n\n#### Semantics\n\nA `%=` expression resolves a wing of the subject, but with changes made.\n\nIf `a` resolves to a leg, a series of changes are made to wings of that leg\n(`b`, `d`, and `f` above are replaced with the respective products of `c`, `e`,\nand `g` above). The modified leg is returned.\n\nIf `a` resolves to an arm, a series of changes are made to wings of the parent\ncore of that arm. (Again, `b`, `d`, and `f` are replaced with the respective\nproducts of `c`, `e`, and `g`.) The arm is computed with the modified core as\nthe subject, and the product is returned.\n\n#### Discussion\n\nNote that `a` is a wing, not just any expression. Knowing that a function call\n`(foo baz)` involves evaluating `foo`, replacing its sample at slot `+6` with\n`baz`, and then resolving to the `$` limb, you might think `(foo baz)` would\nmean `%=(foo +6 baz)`.\n\nBut it's actually `=+(foo =>(%=(+2 +6 baz:+3) $))`. Even if `foo` is a wing, we\nwould just be mutating `+6` within the core that defines the `foo` arm. Instead\nwe want to modify the **product** of `foo`\u2014the gate\u2014so we have to pin it\ninto the subject.\n\nHere's that again in tall form:\n\n```hoon\n=+  foo\n=>  %=  +2\n      +6  baz:+3\n    ==\n  $\n```\n\n#### Examples\n\n```\n> =foo [p=5 q=6]\n\n> foo(p 42)\n[p=42 q=6]\n\n> foo(+3 99)\n[p=5 99]\n```\n",
    "colhep": "## `:-` \"colhep\"\n\nConstruct a cell (2-tuple).\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :-  p<p>  q<p>  </pre> |\n| Wide | <pre>  :-(p q)<p>  </pre> |\n| Irregular #1 | <pre>  [p q]<p>  </pre> |\n| Irregular #2 | <pre><p>    p^q<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%clhp p=hoon q=hoon]\n```\n\n#### Produces\n\nThe cell of `p` and `q`.\n\n#### Discussion\n\nHoon expressions actually use the same \"autocons\" pattern as Nock\nformulas. If you're assembling expressions (which usually only the\ncompiler does), `[a b]` is the same as `:-(a b)`.\n\n#### Examples\n\n```\n> :-(1 2)\n[1 2]\n\n~zod:dojo> 1^2\n[1 2]\n```\n\n---\n",
    "colcab": "## `:_` \"colcab\"\n\nConstruct a cell, inverted.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :_  p<p>  q<p>  </pre> |\n| Wide | <pre>  :_(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%clcb p=hoon q=hoon]\n```\n\n#### Expands to\n\n```hoon\n:-(q p)\n```\n\n#### Examples\n\n```\n> :_(1 2)\n[2 1]\n```\n\n---\n",
    "collus": "## `:+` \"collus\"\n\nConstruct a triple (3-tuple).\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :+  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  :+(p q r)<p>  </pre> |\n| Irregular | <pre>    [p q r]<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%clls p=hoon q=hoon r=hoon]\n```\n\n#### Expands to:\n\n```hoon\n:-(p :-(q r))\n```\n\n#### Examples\n\n```\n> :+  1\n    2\n  3\n[1 2 3]\n\n> :+(%a ~ 'b')\n[%a ~ 'b']\n```\n\n---\n",
    "colket": "## `:^` \"colket\"\n\nConstruct a quadruple (4-tuple).\n\n#### Syntax\n\nFour arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :^    p<p>      q<p>    r<p>  s<p>  </pre> |\n| Wide | <pre>  :^(p q r s)<p>  </pre> |\n| Irregular | <pre>    [p q r s]<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%clkt p=hoon q=hoon r=hoon s=hoon]\n```\n\n#### Expands to\n\n```hoon\n:-(p :-(q :-(r s)))\n```\n\n#### Examples\n\n```\n> :^(1 2 3 4)\n[1 2 3 4]\n\n> :^    5\n      6\n    7\n  8\n[5 6 7 8]\n```\n\n---\n",
    "coltar": "## `:*` \"coltar\"\n\nConstruct an n-tuple.\n\n#### Syntax\n\nVariable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :*  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  :*(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | <pre><p>    [p1 p2 p3 pn]<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%cltr p=(list hoon)]\n```\n\n#### Expands to\n\n**Pseudocode**: `a`, `b`, `c`, ... as elements of `p`:\n\n```hoon\n:-(a :-(b :-(c :-(... z)))))\n```\n\n#### Desugaring\n\n```hoon\n|-\n?~  p\n  !!\n?~  t.p\n  i.p\n:-  i.p\n$(p t.p)\n```\n\n#### Examples\n\n```\n> :*(5 3 4 1 4 9 0 ~ 'a')\n[5 3 4 1 4 9 0 ~ 'a']\n\n> [5 3 4 1 4 9 0 ~ 'a']\n[5 3 4 1 4 9 0 ~ 'a']\n\n> :*  5\n      3\n      4\n      1\n      4\n      9\n      0\n      ~\n      'a'\n  ==\n[5 3 4 1 4 9 0 ~ 'a']\n```\n\n---\n",
    "colsig": "## `:~` \"colsig\"\n\nConstruct a null-terminated list.\n\n#### Syntax\n\nVariable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :~  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  :~(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | <pre><p>    ~[p1 p2 p3 pn]<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%clsg p=(list hoon)]\n```\n\n#### Expands to\n\n**Pseudocode**: `a`, `b`, `c`, ... as elements of `p`:\n\n```hoon\n:-(a :-(b :-(c :-(... :-(z ~)))))\n```\n\n#### Desugaring\n\n```hoon\n|-\n?~  p\n  ~\n:-  i.p\n$(p t.p)\n```\n\n#### Discussion\n\nNote that this does not produce a `list` type, it just produces a\nnull-terminated n-tuple. To make it a proper `list` it must be cast or molded.\n\n#### Examples\n\n```\n> :~(5 3 4 2 1)\n[5 3 4 2 1 ~]\n\n> ~[5 3 4 2 1]\n[5 3 4 2 1 ~]\n\n> :~  5\n      3\n      4\n      2\n      1\n  ==\n[5 3 4 2 1 ~]\n```\n\n---\n",
    "colcol": "## `::` \"colcol\"\n\nCode comment.\n\n#### Syntax\n\n```hoon\n::  any text you like!\n```\n\n#### Examples\n\n```hoon\n::\n::  this is commented code\n::\n|=  a=@         ::  a gate\n(add 2 a)       ::  that adds 2\n                ::  to the input\n```\n",
    "dotket": "## `.^` \"dotket\"\n\nLoad from the Arvo namespace (scry) with a fake Nock instruction: Nock 12.\n\n#### Syntax\n\nTwo arguments, with the second optionally split into an arbitrary number of\nelements.\n\nWhile this rune technically takes a fixed number of arguments, `q` is usually\nsplit into at least two parts, and the tall form of this rune must be terminated\nwith a `==`. Note also that the `==` does not make the arguments into a list as\nyou might expect, so `q` must be explicitly null-terminated if its elements are\nspecified separately.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  .^  p<p>    q1<p>    q2<p>    q3<p>    qn<p>  ==<p>  </pre> |\n| Wide | <pre>  .^(p q1 q2)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%dtkt p=spec q=hoon]\n```\n\n#### Produces\n\nThe noun `q`, cast to the type `p`.\n\n#### Discussion\n\nNock has no `12` instruction! But the virtual Nock\nused to run userspace code does. Nock `12` loads from a\ntyped immutable namespace defined by its virtual context.\n\nOrdinarily a Hoon expression has access to no information but whatever can be found in the subject. The one exception is with the `.^` rune. It essentially allows you to request information from one of the Arvo vanes (modules).\n\n`.^` checks that the type of the value retrieved from Arvo nests under `p`. `q` is a `path` which includes information about which vane is being queried, and what sort of information is requested.\n\nIn principle `.^` takes two subexpressions, but in practice `q` is often given in two parts: the first part includes the vane to be queried (e.g., `%a` for Ames, `%b` for Behn, `%c` for Clay, etc.) and the kind of request. The second part is a path that corresponds to the kind of request.\n\n#### Examples\n\nIn the dojo we can ask Clay -- the Arvo filesystem -- for a listing of the files at our current path, `%`:\n\n```\n> .^(arch %cy %)\n[ fil=~\n    dir\n  { [p=~.app q=~]\n    [p=~.sur q=~]\n    [p=~.gen q=~]\n    [p=~.lib q=~]\n    [p=~.mar q=~]\n    [p=~.ted q=~]\n    [p=~.desk q=~]\n    [p=~.sys q=~]\n  }\n]\n```\n\nThe `%c` is for Clay, and the `y` is for the request type. `arch` is the type of the listing. See `gen/cat.hoon` to see how this information is printed more prettily.\n\nThe `%` is for the current path in the dojo:\n\n```\n> `path`%\n/~zod/base/~2018.9.20..23.05.35..0231\n```\n\nYou can modify the time of the file listing quite simply and ask for a listing from 5 hours ago. (Remember that Clay is a revision-controlled file system.)\n\n```\n> .^(arch %cy /(scot %p our)/base/(scot %da (sub now ~h5)))\n[ fil=~\n    dir\n  { [p=~.app q=~]\n    [p=~.sur q=~]\n    [p=~.gen q=~]\n    [p=~.lib q=~]\n    [p=~.mar q=~]\n    [p=~.ted q=~]\n    [p=~.desk q=~]\n    [p=~.sys q=~]\n  }\n]\n```\n\n`our` is the value for your ship's name.\n\n---\n",
    "dotlus": "## `.+` \"dotlus\"\n\nIncrement an atom with Nock `4`.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  .+  p<p>  </pre> |\n| Wide | <pre>  .+(p)<p>  </pre> |\n| Irregular | <pre>    +(p)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%dtls p=hoon]\n```\n\n#### Produces\n\n`p` plus `1` if `p` is an atom; otherwise, crashes. The product atom has no aura.\n\n#### Examples\n\n```\n> .+(6)\n7\n\n> +(6)\n7\n\n> +(%foo)\n7.303.015\n\n> +([1 2])\nnest-fail\n```\n\n---\n",
    "dottar": "## `.*` \"dottar\"\n\nEvaluate with Nock `2`.\n\n#### Produces\n\nNock of formula `q` and subject `p`, with type `%noun`.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  .*  p<p>  q<p>  </pre> |\n| Wide | <pre>  .*(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%dttr p=hoon q=hoon]\n```\n\n#### Discussion\n\n`.*(p q)` is used to run Nock formula `q` on the subject `p` from within Hoon.\n\nKeep in mind that `p` and `q` can be arbitrary Hoon expressions, as long as they evaluate to the appropriate nouns for Nock evaluation.\n\nNote also that `.*` (\"dottar\") can be used to bypass the type system. It's\ntherefore possible to use Hoon as a typeless language.\n\n#### Examples\n\n```\n> .*([20 30] [0 2])\n20\n\n> .*(33 [4 0 1])\n34\n\n> .*(|.(50) [9 2 0 1])\n50\n\n> .*(12 [7 [`1 [4 `1]] [`2 `3 `2]])\n[12 13 12]\n\n> .*(~ [5 1^4 [4 1^3]])\n0\n\n> .*(~ [5 1^5 [4 1^3]])\n1\n```\n\n---\n",
    "dottis": "## `.=` \"dottis\"\n\nTest for equality with Nock `5`.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  .=  p<p>  q<p>  </pre> |\n| Wide | <pre>  .=(p q)<p>  </pre> |\n| Irregular | <pre>    =(p q)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%dtts p=hoon q=hoon]\n```\n\n#### Produces\n\n`%.y` if `p` equals `q`; otherwise `%.n`.\n\n#### Discussion\n\nLike Nock equality, `.=` (\"dottis\") tests whether two nouns are the same,\nignoring invisible pointer structure. Because in a conventional noun\nimplementation each noun has a lazy short hash, comparisons are fast unless the\nhash needs to be computed, or we are comparing separate copies of identical\nnouns. (Comparing large duplicates is a common cause of performance bugs.)\n\n#### Examples\n\n```\n> .=(0 0)\n%.y\n\n> =(0 0)\n%.y\n\n> .=(1 2)\n%.n\n\n> =(1 2)\n%.n\n\n> =(12 [12 14])\n%.n\n```\n\n---\n",
    "dotwut": "## `.?` \"dotwut\"\n\nTest for cell or atom with Nock `3`.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  .?  p<p>  </pre> |\n| Wide | <pre>  .?(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%dtwt p=hoon]\n```\n\n#### Produces\n\n`%.y` if `p` is a cell; otherwise `%.n`.\n\n#### Examples\n\n```\n> .?(42)\n%.n\n\n> .?([42 43])\n%.y\n```\n",
    "fashep": "## `/-` \"fashep\"\n\nImport structure libraries from `/sur`.\n\n#### Syntax\n\n```hoon\n/-  foo, bar, baz\n```\n\nNote there is only a single space between each item.\n\n#### Semantics\n\nNames correspond to files in the `/sur` directory of the same desk as this file, e.g.\n`/sur/foo.hoon` for `foo`. Names containing hyphens, e.g. `foo-abc`, will first\nresolve to `/sur/foo-abc.hoon`, and if that doesn't exist, it will try\n`/sur/foo/abc.hoon`.\n\nImports may be given a different face by doing `xyz=foo`. Imports may have their\nface stripped (so you can directly reference their wings) with `*foo`.\n\n---\n",
    "faslus": "## `/+` \"faslus\"\n\nImport libraries from `/lib`.\n\n#### Syntax\n\n```hoon\n/+  foo, bar, baz\n```\n\nNote there is only a single space between each item.\n\n#### Semantics\n\nNames correspond to files in the `/lib` directory of the same desk as this file,\ne.g. `/lib/foo.hoon` for `foo`. Names containing hyphens, e.g. `foo-abc`, will\nfirst resolve to `/lib/foo-abc.hoon`, and if that doesn't exist, it will try\n`/lib/foo/abc.hoon`.\n\nImports may be given a different face by doing `xyz=foo`. Imports may have their\nface stripped (so you can directly reference their wings) with `*foo`.\n\n---\n",
    "fastis": "## `/=` \"fastis\"\n\nBuild and import a hoon file at the specified path.\n\n#### Syntax\n\nTwo arguments.\n\n```hoon\n/=  some-face  /path/to/file\n```\n\n#### Semantics\n\nThis lets you build and import a hoon file from anywhere in the desk.\n\nThe first argument is the face to pin it as. The second argument is the path to\nthe file in the same desk as this file. The file must be a `%hoon` file, and the\ntrailing mark (`hoon`) must be omitted from the path.\n\n#### Examples\n\nTo build and import `/foo/bar.hoon` you would do:\n\n```hoon\n/=  foobar  /foo/bar\n```\n\n---\n",
    "fastar": "## `/*` \"fastar\"\n\nImport the file at the specified path as the specified mark.\n\n#### Syntax\n\nThree arguments.\n\n```hoon\n/*  some-face  %as-mark  /path/to/file\n```\n\n#### Semantics\n\nThe first argument is the face to pin it as. The second argument is the mark it\nshould be converted to. The third argument is the path to the file in the same\ndesk as this file, with the trailing mark included.\n\nThe mark specified may be different to the mark of the file, as long as\nconversion is possible. Note that a `%hoon` file will not be built like with\n`/=`: the type of a `%hoon` file is a `@t` so that is what will be pinned.\n\n#### Examples\n\nTo import `/foo/bar.hoon` you would do:\n\n```hoon\n/*  foobar  %hoon  /foo/bar/hoon\n```\n\n`foobar` would then be an `@t` of the contents of that file.\n\n---\n",
    "fasbuc": "## `/$` \"fasbuc\"\n\nImport mark conversion gate.\n\n#### Syntax\n\nThree arguments.\n\n```hoon\n/$  some-face   %from-mark   %to-mark\n```\n\n#### Semantics\n\nThe first argument is the face to pin it as. The second argument is the mark to\nconvert _from_. The third argument is the mark to convert _to_.\n\nThe result will be a gate of `$-(type-1 type-2)`, pinned with the specified\nface. The types are the data types of the _from_ mark and _to_ mark,\nrespectively.\n\nThe mark conversion gate will be built from marks in `/mar` on the same desk as\nthis file.\n\n#### Examples\n\nTo build a mark conversion gate from `%txt` to `%mime`, you would do:\n\n```hoon\n/$  txt-to-mime  %txt  %mime\n```\n\n`txt-to-mime` would be a gate of `$-(wain mime)`. You could then call the gate\nlike:\n\n```\n> (txt-to-mime ~['first line' 'second line'])\n[p=/text/plain q=[p=22 q=37.949.953.370.267.411.298.483.129.707.945.775.026.849.432.323.909.990]]\n```\n\n---\n",
    "fassig": "## `/~` \"fassig\"\n\nImport, build, evaluate and pin the results of many hoon files in a directory.\n\n#### Syntax\n\nThree arguments.\n\n```hoon\n/~  some-face  some-type  /some/directory\n```\n\n#### Semantics\n\nThe first argument is the face to pin the results with. The second argument is\nthe type each hoon file produces when evaluated. The third argument is the path\nto a directory in the same desk as this file, containing `%hoon` files.\n\nEach hoon file in the specified directory will be built and evalutated. The\nresult of evaluating each file will be added to a\n[`++map`](/reference/hoon/stdlib/2o#map) and pinned with the specified face\n(`some-face`). The keys of the map will be the name of each file, and the values\nof the map will be the result of evaluating each file and casting its result to\nthe type specified (`some-type`).\n\nAll of the hoon files in the specified directory, when evaluated, must produce\ndata of a type that nests under the type specified (`some-type`). File with a\nmark other than `%hoon` will be ignored.\n\nThe type of the map will be `(map knot some-type)`.\n\n#### Examples\n\nIf the `/foo/bar` directory contains three files:\n\n- `x.hoon` containing `(silt ~[1 2 3 4 5])`\n- `y.hoon` containing `(silt ~[99 100])`\n- `z.hoon` containing `(silt ~[22 33 44])`\n\nThen the following `/~` expression:\n\n```hoon\n/~  foo  (set @ud)  /foo/bar\n```\n\n...will pin a `(map knot (set @ud))` with a face of `foo` which contains:\n\n```\n{[p=~.y q={100 99}] [p=~.z q={22 33 44}] [p=~.x q={5 1 2 3 4}]}\n```\n\n---\n",
    "fascen": "## `/%` \"fascen\"\n\nBuild and import a mark core.\n\n#### Syntax\n\nTwo arguments.\n\n```hoon\n/%  some-face  %some-mark\n```\n\n#### Semantics\n\nThe first argument is a face to pin the mark core with. The second argument is a\nmark.\n\nThe static mark core (a `nave:clay`) for the specified mark (which resides in\nthe same desk as the file) is built and pinned to the subject with the specified\nface.\n\n#### Examples\n\nTo build the mark core for the `%txt` mark:\n\n```hoon\n/%  foo  %txt\n```\n\nIts arms can then be accessed like:\n\n```\n> form:foo\n%txt-diff\n```\n",
    "ketbar": "## `^|` \"ketbar\"\n\nConvert a gold core to an iron core (contravariant).\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^&verbar;  p<p>  </pre> |\n| Wide | <pre>  ^&verbar;(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%ktbr p=hoon]\n```\n\n#### Produces\n\n`p` as an iron core; crash if not a gold core.\n\n#### Discussion\n\nAn iron core is an opaque function (gate or door).\n\nTheorem: if type `x` nests within type `a`, and type `y` nests\nwithin type `b`, a core accepting `b` and producing `x` nests\nwithin a iron core accepting `y` and producing `a`.\n\nInformally, a function fits an interface if the function has a\nmore specific result and/or a less specific argument than the\ninterface.\n\n#### Examples\n\nThe prettyprinter shows the core metal (`.` gold, `|` iron):\n\n```\n~zod:dojo> |=(@ 1)\n<1.gcq [@  @n <250.yur 41.wda 374.hzt 100.kzl 1.ypj %151>]>\n\n~zod:dojo> ^|(|=(@ 1))\n<1|gcq [@  @n <250.yur 41.wda 374.hzt 100.kzl 1.ypj %151>]>\n```\n\n---\n",
    "ketcol": "## `^:` \"ketcol\"\n\nSwitch parser into structure mode (mold definition) and produce a gate for type `p`.  (See [`,` com]() which toggles modes.)\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^:  p<p>  </pre> |\n| Wide | <pre>  ^:(p)<p>  </pre> |\n| Irregular | <pre>  ,p<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%ktcl p=spec]\n```\n\n#### Produces\n\nA gate that returns the sample value if it is of the correct type, but crashes\notherwise.\n\n#### Discussion\n\n`^:` is used to produce a mold that crashes if its sample is of the wrong type.\n\nIn structure mode, `[a=@ b=@]` is a mold for a cell, whereas in value mode it's\na pair of molds.  Sometimes you need a structure in value mode, in which you can\nuse `^:` or `,`.\n\nMolds used to produced their bunt value if they couldn't mold their sample. This\nis no longer the case: molds now crash if molding fails, so this rune is\nredundant in certain cases.\n\nOne may expect that `^:(path /foo)` would result in a syntax error since `^:`\nonly takes one child, but instead it will parse as `=< ^ %:(path /foo)`. Since\n`:` is the irregular syntax for `=<` this is is parsed as \"get `^` (i.e. the\nmold for cells) from a subject of `(path /foo)`\", with `:` being the irregular\nsyntax for `=<`.\n\n#### Examples\n\n```\n> ^:  @\n< 1.goa\n  { *\n    {our/@p now/@da eny/@uvJ}\n    <19.hqf 23.byz 5.mzd 36.apb 119.zmz 238.ipu 51.mcd 93.glm 74.dbd 1.qct $141>\n  }\n>\n\n> (^:(@) 22)\n22\n\n> (^:(@) [22 33])\nford: %ride failed to execute:\n\n> (,cord 55)\n'7'\n\n> (ream ',@t')\n[%ktcl p=[%base p=[%atom p=~.t]]]\n\n> (ream ',cord')\n[%ktcl p=[%like p=~[%cord] q=~]]\n```\n\n---\n",
    "ketdot": "## `^.` \"ketdot\"\n\nTypecast on value produced by passing `q` to `p`.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^.  p<p>  q<p>  </pre> |\n| Wide | <pre>  ^.(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%ktdt p=hoon q=hoon]\n```\n\n#### Expands to\n\n```hoon\n^+(%:(p q) q)\n```\n\n#### Discussion\n\n`p` produces a gate and q is any Hoon expression.\n\n`^.` is particularly useful when `p` is a gate that 'cleans up' the type information about some piece of data. For example, `limo` is used to turn a raw noun of the appropriate shape into a genuine list. Hence we can use `^.` to cast with `limo` and similar gates, ensuring that the product has the desired type.\n\n#### Examples\n\n```\n> =mylist [11 22 33 ~]\n\n> ?~(mylist ~ i.mylist)\nmint-vain\n\n> =mylist ^.(limo mylist)\n\n> ?~(mylist ~ i.mylist)\n11\n\n> ?~(mylist ~ t.mylist)\n~[22 33]\n```\n\n---\n",
    "kethep": "## `^-` \"kethep\"\n\nTypecast by explicit type label.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^-  p<p>  q<p>  </pre> |\n| Wide | <pre>  ^-(p q)<p>  </pre> |\n| Irregular | <pre><p>    `p`q<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%kthp p=spec q=hoon]\n```\n\n#### Expands to\n\n```hoon\n^+(^*(p) q)\n```\n\n#### Discussion\n\nIt's a good practice to put a `^-` (\"kethep\") at the top of every arm\n(including gates, loops, etc). This cast is strictly necessary\nonly in the presence of head recursion (otherwise you'll get a\n`rest-loop` error, or if you really screw up spectacularly an\ninfinite loop in the compiler).\n\n#### Examples\n\n```\n~zod:dojo> (add 90 7)\n97\n\n~zod:dojo> `@t`(add 90 7)\n'a'\n\n~zod:dojo> ^-(@t (add 90 7))\n'a'\n\n/~zod:dojo> =foo |=  a=@\n                 ^-  (unit @ta)\n                 `a\n\n/~zod:dojo> (foo 97)\n[~ ~.a]\n```\n",
    "ketlus": "## `^+` \"ketlus\"\n\nTypecast by inferred type.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^+  p<p>  q<p>  </pre> |\n| Wide | <pre>  ^+(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%ktls p=hoon q=hoon]\n```\n\n#### Produces\n\nThe value of `q` with the type of `p`, if the type of `q` nests within the type\nof `p`. Otherwise, `nest-fail`.\n\n#### Examples\n\n```\n~zod:dojo> ^+('text' %a)\n'a'\n```\n\n---\n",
    "ketpam": "## `^&` \"ketpam\"\n\nConvert a core to a zinc core (covariant).\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^&  p<p>  </pre> |\n| Wide | <pre>  ^&(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%ktpm p=hoon]\n```\n\n#### Produces\n\n`p` as a zinc core; crash if `p` isn't a gold or zinc core.\n\n#### Discussion\n\nA zinc core has a read-only sample and an opaque context. See [Advanced types](/reference/hoon/advanced).\n\n#### Examples\n\nThe prettyprinter shows the core metal in the arm labels `1.xoz` and `1&xoz`\nbelow (`.` is gold, `&` is zinc):\n\n```\n> |=(@ 1)\n< 1.xoz\n  { @\n    {our/@p now/@da eny/@uvJ}\n    <19.hqf 23.byz 5.mzd 36.apb 119.zmz 238.ipu 51.mcd 93.glm 74.dbd 1.qct $141>\n  }\n>\n\n> ^&(|=(@ 1))\n< 1&xoz\n  { @\n    {our/@p now/@da eny/@uvJ}\n    <19.hqf 23.byz 5.mzd 36.apb 119.zmz 238.ipu 51.mcd 93.glm 74.dbd 1.qct $141>\n  }\n>\n```\n\nYou can read from the sample of a zinc core, but not change it:\n\n```\n> =mycore ^&(|=(a=@ 1))\n\n> a.mycore\n0\n\n> mycore(a 22)\n-tack.a\n-find.a\nford: %slim failed:\nford: %ride failed to compute type:\n```\n\n---\n",
    "ketsig": "## `^~` \"ketsig\"\n\nFold constant at compile time.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^~  p<p>  </pre> |\n| Wide | <pre>  ^~(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%ktsg p=hoon]\n```\n\n#### Produces\n\n`p`, folded as a constant if possible.\n\n#### Examples\n\n```\n> (make '|-(42)')\n[%8 p=[%1 p=[1 42]] q=[%9 p=2 q=[%0 p=1]]]\n\n> (make '^~(|-(42))')\n[%1 p=42]\n```\n\n---\n",
    "kettar": "## `^*` \"kettar\"\n\nProduce example type value.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^*  p<p>  </pre> |\n| Wide | <pre>  ^*(p)<p>  </pre> |\n| Irregular | <pre>    *p<p>  </pre> |\n\n\n`p` is any structure expression.\n\n#### AST\n\n```hoon\n[%kttr p=spec]\n```\n\n#### Produces\n\nA default value (i.e., 'bunt value') of the type `p`.\n\n#### Examples\n\nRegular:\n\n```\n> ^*  @\n0\n\n> ^*  %baz\n%baz\n\n> ^*  ^\n[0 0]\n\n> ^*  ?\n%.y\n```\n\nIrregular:\n\n```\n> *@\n0\n\n> *^\n[0 0]\n\n> *tape\n\"\"\n```\n\n---\n",
    "kettis": "## `^=` \"kettis\"\n\nBind name to a value.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^=  p<p>  q<p>  </pre> |\n| Wide | <pre>  ^=(p q)<p>  </pre> |\n| Irregular | <pre><p>    p=q<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%ktts p=skin q=hoon]\n```\n\n#### Produces\n\nIf `p` is a term, the product `q` with type `[%face p q]`. `p` may also be a\ntuple of terms, or a term-skin pair; the type of `q` must divide evenly into\ncells to match it.\n\n#### Examples\n\n```\n> a=1\na=1\n\n> ^=  a\n  1\na=1\n\n> ^=(a 1)\na=1\n\n> [b c d]=[1 2 3 4]\n[b=1 c=2 d=[3 4]]\n\n> [b c d=[x y]]=[1 2 3 4]\n[b=1 c=2 d=[x=3 y=4]]\n```\n\n---\n",
    "ketwut": "## `^?` \"ketwut\"\n\nConvert any core to a lead core (bivariant).\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^?  p<p>  </pre> |\n| Wide | <pre>  ^?(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%ktwt p=hoon]\n```\n\n#### Produces\n\n`p` as a lead core; crash if not a core.\n\n#### Discussion\n\nA lead core is an opaque generator; the payload can't be read or\nwritten.\n\nTheorem: if type `x` nests within type `a`, a lead core producing\n`x` nests within a lead core producing `a`.\n\nInformally, a more specific generator can be used as a less\nspecific generator.\n\n#### Examples\n\nThe prettyprinter shows the core metal (`.` gold, `?` lead):\n\n```\n> |=(@ 1)\n<1.gcq [@  @n <250.yur 41.wda 374.hzt 100.kzl 1.ypj %151>]>\n\n> ^?(|=(@ 1))\n<1?gcq [@  @n <250.yur 41.wda 374.hzt 100.kzl 1.ypj %151>]>\n```\n",
    "lusbar": "## `+|` \"lusbar\"\n\nChapter label (not useful)\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  +&verbar;  %label<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |\n\n\n#### Discussion\n\nThe `+|` doesn't produce an arm. It instead provides a label for the arms that\nfollow it. The arms of a core can be divided into **chapters** for\n'organization'. Chapter labels aren't part of the underlying noun of the core;\nthey're stored as type system metadata only.\n\nSee [`tome`](/reference/hoon/stdlib/4o#tome) in the Hoon standard library.\n\n**Note:** The `+|` rune has little practical utility. Chapter labels cannot be\nreferenced short of manually processing the `$type` of a core.\n\n#### Examples\n\nLet's look at what the Hoon compiler's parser, `ream`, does with the `+|` rune:\n\n```\n> (ream '|%  +|  %numbers  ++  two  2  ++  three  3  --')\n[ %brcn\n  p=~\n    q\n  { [ p=%numbers\n      q=[p=~ q={[p=%three q=[%sand p=%ud q=3]] [p=%two q=[%sand p=%ud q=2]]}]\n    ]\n  }\n]\n```\n\nNotice that `p.q` has the label `%numbers`. Contrast with:\n\n```\n> (ream '|%  ++  two  2  ++  three  3  --')\n[ %brcn\n  p=~\n    q\n  { [ p=%$\n      q=[p=~ q={[p=%three q=[%sand p=%ud q=3]] [p=%two q=[%sand p=%ud q=2]]}]\n    ]\n  }\n]\n```\n\n---\n",
    "lusbuc": "## `+$` \"lusbuc\"\n\nProduce a structure arm (type definition).\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  +$  p=term  q=spec<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |\n\n\n`p` is an arm name, and `q` is any structure expression.\n\n#### Discussion\n\nArms produced by `+$` are essentially type definitions. They should be used when one wants to define custom types using core arms.\n\nThe Hoon subexpression, `q`, must be a structure expression. That is, it must be\neither a basic structure expression (`*`, `~`, `^`, `?`, and `@`), or a complex\nexpression made with the `$` family of runes (including irregular variants).\nNames of structures are also permitted (e.g., `tape`).\n\n#### Examples\n\n```\n> =c |%\n       +$  atom-pair  $:(@ @)\n       +$  flag-atom  $:(? @)\n     --\n\n> `atom-pair.c`[12 14]\n[12 14]\n\n> `atom-pair.c`[12 [22 33]]\nnest-fail\n\n> `flag-atom.c`[& 22]\n[%.y 22]\n```\n\n---\n",
    "luslus": "## `++` \"luslus\"\n\nProduce a normal arm.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ++  p=term  q=hoon<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |\n\n\n`p` is the arm name, and `q` is any Hoon expression.\n\n#### Discussion\n\nAll arms must have a name (e.g., `add`). An arm is computed by name resolution.\n(This resolution is implicit in the case of `$` arms. See `|=`, `|-`, and `|^`.)\nThe `++` rune is used for explicitly giving a name to an arm.\n\nAny Hoon expression, `q`, may be used to define the arm computation.\n\n#### Examples\n\n```\n> =c |%\n       ++  two  2\n       ++  increment  |=(a=@ +(a))\n     --\n\n> two.c\n2\n\n> (increment.c 11)\n12\n```\n\n---\n",
    "lustar": "## `+*` \"lustar\"\n\nDefines deferred expressions within doors.\n\n#### Syntax\n\nArguments: A variable number of pairs.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  +*  a=term  b=hoon<p>      c=term  d=hoon<p>      ...<p>      e=term  f=hoon<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |\n\n\n`a`, `c`, `e` are arm names and `b`, `d`, `f` are any Hoon expression. Note that\nunlike all other runes with a variable number of arguments, the list of\narguments of `+*` does not end with a terminator.\n\n`+*` arms must always come at the beginning of the battery, before any other\ntype of lus arm.\n\n#### Discussion\n\nThe primary use of `+*` is to create deferred expressions within doors (see\nExamples below). This is a name for an expressions that will be evaluated in\neach place the name is dereferenced. This is a similar concept to aliases or\nmacros, but there are some subtle but important differences. Deferred\nexpressions given by `+*` do not count towards the number of arms in the door\nand thus are also called \"virtual arms\", which can be important for things like\nGall agent cores that require a fixed number of arms.\n\nUnder the hood, `+*` gets compiled as\n[`=*`'s](/reference/hoon/rune/tis#-tistar) (see here for more discussion on\ndeferred expressions). `+* foo bar` rewrites each `++` arm beneath it in the\ncore to include `=* foo bar`. For example, the interpreter sees the Nock\ncompiled from this Hoon expression\n\n```hoon\n|_  z=@ud\n+*  n  1\n++  x  (add z n)\n++  y  (sub z n)\n--\n```\n\nas being identical the Nock compiled from this one:\n\n```hoon\n=|  z=@ud\n|%\n++  x\n  =*  n  1\n  (add z n)\n++  y\n  =*  n  1\n  (sub z n)\n--\n```\n\n#### Examples\n\nTo assign an alias to a door, we often write the following.\n\n```hoon\n|_  foo\n+*  this  .\n```\n\nThis is the idomatic way to assign the alias `this` to the door.\n\nSometimes cores, such as Gall app cores, have a fixed number of arms, but you'd\nlike to include more. This is where aliases employed as \"virtual arms\" may be of\nuse. We note that it is often better style to compose cores with `=>` or `=<` to add more arms to a\nGall app core. This usage of `+*` is controversial and should be minimized.\n\n```hoon\n|_  =bowl:gall\n+*  this  .\n    samp  +<\n    cont  +>\n```\n\nThis assigns the door the alias `this`, the sample of the door `samp`, and the\ncontext of the door `cont`.\n\nYou may also call functions with `+*` by making use of e.g. the `%~` rune.\n\n```hoon\n=<\n  |_  a=@\n  +*  do   ~(. +> a)\n  ++  stuff  foo:do\n::etc\n--\n|_  b=@\n++  foo  %bar\n::etc\n--\n```\n",
    "miccol": "## `;:` \"miccol\"\n\nCall a binary function as an n-ary function.\n\n#### Syntax\n\nOne fixed argument, then a variable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;:  p<p>    q1<p>    q2<p>    qn<p>  ==<p>  </pre> |\n| Wide | <pre>  ;:(p q1 q2 qn)<p>  </pre> |\n| Irregular | <pre><p>    :(p q1 q2 qn)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%mccl p=hoon q=(list hoon)]\n```\n\n#### Expands to\n\n**Pseudocode**: `a`, `b`, `c`, ... as elements of `q`:\n\nRegular form:\n\n```hoon\n%-(p a %-(p b %-(p c ...)))\n```\n\nIrregular form:\n\n```hoon\n(p a (p b (p c ...)))\n```\n\n#### Desugaring\n\n```hoon\n|-\n?~  q  !!\n?~  t.q  !!\n?~  t.t.q\n  (p i.q i.t.q)\n(p i.q $(q t.q))\n```\n\n#### Examples\n\n```\n> (add 3 (add 4 5))\n12\n\n> ;:(add 3 4 5)\n12\n\n> :(add 3 4 5)\n12\n\n> `@t`:((cury cat 3) 'a' 'b' 'c' 'd')\n'abcd'\n```\n\n---\n",
    "micgal": "## `;<` \"micgal\"\n\nMonadic do notation.\n\n#### Syntax\n\nFour arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;<  mold  bind  expr1  expr2<p>  </pre> |\n| Wide | <pre>  ;<(mold bind expr1 expr2)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%mcgl p=spec q=hoon r=hoon s=hoon]\n```\n\n#### Semantics\n\nA `;<` is for sequencing two computations, `expr1` and `expr2`, using a provided\nimplementation of monadic bind. This rune takes a gate `bind` which takes a mold\n`mold` and produces an implementation of monadic bind.\n\n#### Desugaring\n\n```hoon\n%+  (bind mold)\n  expr1\n|=  mold\nexpr2\n```\n\n#### Discussion\n\n`;<` is much like Haskell `do` notation. You have a sequence of events you'd\nlike to run such that each past the first depends on the output of the previous\none. The output of the previous one may not be of the correct type to use as an\ninput to the next one, and so an adapter such as `+biff` is needed.\n\n`;<` differs from [`;~`](#-micsig) in that it takes a gate which takes a mold\nthat produces an implementation of monadic bind, rather than taking an\nimplementation of monadic bind directly.\n\n`;<` can be used to glue a pipeline together to run an asynchronous function or\nevent. This can be helpful when deferring parts of a computation based on\nexternal data.\n\nWe remark that you can switch binds in the middle of a sequence of `;<`.\n\n#### Examples\n\n[`+biff`](/reference/hoon/stdlib/2a/#biff) is the unit monad's\nimplementation of monadic bind. That is to say, it takes a unit `a` and a gate\n`b` that accepts a noun that produces a unit, and extracts the value from `a` to\npass as a sample to `b`.\n\nWe illustrate the usage of `;<` with `+biff` with a `map` of atoms:\n\n```\n> =m (my ~[[1 3] [2 2] [3 1]])\n> (~(get by m) 1)\n[~ 3]\n```\n\nA single usage of `;<` only serves to apply the binding function to the output\nof `expr1`:\n\n```\n> ;<  a=@  _biff  (~(get by m) 1)\n  a\n3\n```\n\nHere we see the result of chaining them together:\n\n```\n> ;<  a=@  _biff  (~(get by m) 1)\n  ;<  b=@  _biff  (~(get by m) a)\n  b\n1\n```\n\n---\n",
    "miclus": "## `;+` \"miclus\"\n\nmake a single XML node (Sail)\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;+  p<p>  </pre> |\n| Wide | <pre>  ;+(p)<p>  </pre> |\n| Irregular | None. |\n\n\n`p` is a Hoon expression that produces a `manx`.\n\n#### Produces\n\nA [`marl`](/reference/hoon/stdlib/5e#marl), i.e., a list of\n[`manx`](/reference/hoon/stdlib/5e#manx). A `manx` is a noun that\nrepresents a single XML node.\n\n#### Discussion\n\ntl;dr -- `;+` converts a `manx` to a `marl`.\n\n`;+` is a Sail rune. Sail is a part of Hoon used for creating and operating on\nnouns that represent XML nodes. With the appropriate rendering pipeline, a Sail\ndocument can be used to generate a static website.\n\nIn Sail a single XML node is represented by a `manx`. A single\n<code><p&gt;</code> node `manx` can be produced in the following way:\n\n```\n> ;p: This will be rendered as an XML node.\n[[%p ~] [[%$ [%$ \"This will be rendered as an XML node.\"] ~] ~] ~]\n```\n\nSometimes what is needed is a `marl`, i.e., a list of `manx`. To convert a\nsingle `manx` to a `marl`, use the `;+` rune.\n\nOne interesting thing about Sail is that it allows you to use complex Hoon\nexpressions to choose from among several nodes to render. The `;+` rune can take\nsuch a complex expression.\n\n#### Examples\n\n```\n> ^-  marl\n  ;+  ?:  (gth 3 2)\n        ;p: This is the node for 'yes'.\n      ;p: This is the node for 'no'.\n~[\n  [ g=[n=%p a=~]\n    c=[i=[g=[n=%$ a=~[[n=%$ v=\"This is the node for 'yes'.\"]]] c=~] t=~]\n  ]\n]\n\n> ^-  marl\n  ;+  ?:  (gth 2 3)\n        ;p: This is the node for 'yes'.\n      ;p: This is the node for 'no'.\n~[\n  [ g=[n=%p a=~]\n    c=[i=[g=[n=%$ a=~[[n=%$ v=\"This is the node for 'no'.\"]]] c=~] t=~]\n  ]\n]\n```\n\n---\n",
    "micmic": "## `;;` \"micmic\"\n\nNormalize with a mold, asserting fixpoint.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;;  p<p>  q<p>  </pre> |\n| Wide | <pre>  ;;(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%mcmc p=spec q=hoon]\n```\n\n#### Expands to\n\n```hoon\n=+  a=(p q)\n?>  =(`*`a `*`q)\na\n```\n\n> Note: the expansion implementation is hygienic -- it doesn't actually add the `a` face to the subject.\n\n#### Examples\n\nFails because of auras:\n\n```\n> ^-(tape ~[97 98 99])\nmint-nice\n-need.?(%~ [i=@tD t=\"\"])\n-have.[@ud @ud @ud %~]\nnest-fail\ndojo: hoon expression failed\n```\n\nSucceeds because molds don't care about auras:\n\n```\n> ;;(tape ~[97 98 99])\n\"abc\"\n```\n\nFails because not a fixpoint:\n\n```\n> ;;(tape [50 51 52])\ndojo: hoon expression failed\n```\n\n---\n",
    "micfas": "## `;/` \"micfas\"\n\nTape as XML element.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;/  p<p>  </pre> |\n| Wide | <pre>  ;/(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%mcnt p=hoon]\n```\n\n#### Expands to\n\n```hoon\n~[%$ ~[%$ 'p']]\n```\n\n#### Examples\n\n```\n> ;/  \"foo\"\n[[%~. [%~. \"foo\"] ~] ~]\n```\n\n---\n",
    "micsig": "## `;~` \"micsig\"\n\nGlue a pipeline together with a product-sample adapter.\n\n#### Syntax\n\nOne fixed argument, then a variable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;~  p<p>    q1<p>    q2<p>    qn<p>  ==<p>  </pre> |\n| Wide | <pre>  ;~(p q1 q2 qn)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%mcsg p=hoon q=(list hoon)]\n```\n\n#### Produces\n\nThe gates in `q` are composed together using the gate `p` as an intermediate\nfunction, which transforms a `q` product and a `q` gate into a `q` sample.\n\n#### Expands to\n\n**Note: these are structurally correct, but elide some type-system complexity.**\n\n`;~(a b)` reduces to `b`.\n\n`;~(a b c)` expands to\n\n```hoon\n|=  arg=*\n(a (b arg) c(+6 arg))\n```\n\n`;~(a b c d)` expands to\n\n```hoon\n|=  arg=*\n%+  a (b arg)\n=+  arg=arg\n|.  (a (c arg) d(+6 arg))\n```\n\n#### Desugaring\n\n```hoon\n?~  q  !!\n|-\n?~  t.q  i.q\n=/  a  $(q t.q)\n=/  b  i.q\n=/  c  ,.+6.b\n|.  (p (b c) a(,.+6 c))\n```\n\n#### Discussion\n\nApparently `;~` is a \"Kleisli arrow.\" It's also a close cousin of the infamous\n\"monad.\" Don't let that bother you. Hoon doesn't know anything about category\ntheory, so you don't need to either.\n\n`;~` is often used in parsers, but is not only for parsers.\n\nThis can be thought of as user-defined function composition; instead of simply\nnesting the gates in `q`, each is passed individually to `p` with the product\nof the previous gate, allowing arbitrary filtering, transformation, or\nconditional application.\n\n#### Examples\n\nA simple \"parser.\" `trip` converts a `cord` (atomic string) to\na `tape` (linked string).\n\n```\n> =cmp |=([a=tape b=$-(char tape)] `tape`?~(a ~ (weld (b i.a) t.a)))\n> ;~(cmp trip)\n<1.zje {a/@ <409.yxa 110.lxv 1.ztu $151>}>\n```\n\nWith just one gate in the pipeline `q`, the glue `p` is unused:\n\n```\n> (;~(cmp trip) 'a')\n\"a\"\n```\n\nBut for multiple gates, we need it to connect the pipeline:\n\n```\n> (;~(cmp trip |=(a=@ ~[a a])) 'a')\n\"aa\"\n\n> (;~(cmp trip |=(a=@ ~[a a])) '')\n\"\"\n```\n\nA more complicated example:\n\n```\n> (;~(cmp trip ;~(cmp |=(a=@ ~[a a]) |=(a=@ <(dec a)>))) 'b')\n\"97b\"\n\n> (;~(cmp trip |=(a=@ ~[a a]) |=(a=@ <(dec a)>)) 'b')\n\"97b\"\n\n> (;~(cmp trip |=(a=@ ~[a a]) |=(a=@ <(dec a)>)) '')\n\"\"\n\n> (;~(cmp trip |=(a=@ ~[a a]) |=(a=@ <(dec a)>)) 'a')\n\"96a\"\n\n> (;~(cmp trip |=(a=@ ~[a a]) |=(a=@ <(dec a)>)) 'acd')\n\"96acd\"\n```\n\n---\n",
    "mictar": "## `;*` \"mictar\"\n\nmake a list of XML nodes from complex Hoon expression (Sail)\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;*  p<p>  </pre> |\n| Wide | <pre>  ;*(p)<p>  </pre> |\n| Irregular | None. |\n\n\n`p` is a Hoon expression that produces a `marl`.\n\n#### Produces\n\nA [`marl`](/reference/hoon/stdlib/5e#marl), i.e., a list of\n[`manx`](/reference/hoon/stdlib/5e#manx). A `manx` is a noun that\nrepresents a single XML node.\n\n#### Discussion\n\n`;*` is a Sail rune. Sail is a part of Hoon used for creating and operating on\nnouns that represent XML nodes. With the appropriate rendering pipeline, a Sail\ndocument can be used to generate a static website.\n\nIf you need a complex Hoon expression to produce a `marl`, use the `;*` rune.\nOften this rune is used with an expression, `p`, that includes one or more `;=`\nsubexpressions.\n\n(See also [`;=`](#-mictis).)\n\n#### Examples\n\n```\n> ;*  ?:  (gth 3 2)\n        ;=  ;p: This is node 1 of 'yes'.\n            ;p: This is node 2 of 'yes'.\n        ==\n      ;=  ;p: This is node 1 of 'no'.\n          ;p: This is node 2 of 'no'.\n      ==\n[ [[%p ~] [[%$ [%$ \"This is node 1 of 'yes'.\"] ~] ~] ~]\n  [[[%p ~] [[%$ [%$ \"This is node 2 of 'yes'.\"] ~] ~] ~] ~]\n]\n\n> ;*  ?:  (gth 2 3)\n          ;=  ;p: This is node 1 of 'yes'.\n              ;p: This is node 2 of 'yes'.\n          ==\n        ;=  ;p: This is node 1 of 'no'.\n            ;p: This is node 2 of 'no'.\n        ==\n[ [[%p ~] [[%$ [%$ \"This is node 1 of 'no'.\"] ~] ~] ~]\n  [[[%p ~] [[%$ [%$ \"This is node 2 of 'no'.\"] ~] ~] ~] ~]\n]\n```\n\n---\n",
    "mictis": "## `;=` \"mictis\"\n\nmake a list of XML nodes (Sail)\n\n#### Syntax\n\nA variable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;=  p1<p>      p2<p>      p3<p>     pn<p>  ==<p>  </pre> |\n| Wide | <pre>  ;=(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | None. |\n\n\n`p1`-`pn` are Hoon expressions, each of which poduces a `manx`.\n\n#### Produces\n\nA [`marl`](/reference/hoon/stdlib/5e#marl), i.e., a list of\n[`manx`](/reference/hoon/stdlib/5e#manx). A `manx` is a noun that\nrepresents a single XML node.\n\n#### Discussion\n\n`;=` is a [Sail](/guides/additional/sail) rune. Sail is a part of Hoon used for\ncreating and operating on nouns that represent XML nodes. With the appropriate\nrendering pipeline, a Sail document can be used to generate a static website.\n\nIn Sail a single XML node is represented by a `manx`. A single `<p>` node `manx`\ncan be produced in the following way:\n\n```\n> ;p: This will be rendered as an XML node.\n[[%p ~] [[%$ [%$ \"This will be rendered as an XML node.\"] ~] ~] ~]\n```\n\nSometimes what is needed is a `marl`, i.e., a list of `manx`. To convert a\nseries of `manx` nodes to a `marl`, use the `;=` rune.\n\n(See also [`;*`](#-mictar).)\n\n#### Examples\n\n```\n> ;=  ;p: This is the first node.\n      ;p: This is the second.\n      ;p: Here is the last one.\n  ==\n[ [[%p ~] [[%$ [%$ \"This is the first node.\"] ~] ~] ~]\n  [[%p ~] [[%$ [%$ \"This is the second.\"] ~] ~] ~]\n  [[%p ~] [[%$ [%$ \"Here is the last one.\"] ~] ~] ~]\n  ~\n]\n```\n",
    "siggar": "## `~>` \"siggar\"\n\nRaw hint, applied to computation.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~>  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~>(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sggr p=$@(term [p=term q=hoon]) q=hoon]\n```\n\n#### Expands to\n\n`q`.\n\n#### Semantics\n\n`p` may either be a single `%term` or a pair of `[term hoon]`, the latter of\nwhich may optionally be be written `%foo.some-hoon`. `p` will be passed to the\ninterpreter and `q` will be evaluated and its result produced like normal.\n\n#### Discussion\n\nHoon has no way of telling what hints are used and what aren't.\nHints are all conventions at the interpreter level.\n\n#### Examples\n\n```\n> ~>(%a 42)\n42\n```\n\nRunning the compiler:\n\n```\n> (make '~>(%a 42)')\n[%11 p=97 q=[%1 p=42]]\n\n> (make '~>(%a.+(2) 42)')\n[%11 p=[p=97 q=[%4 p=[%1 p=2]]] q=[%1 p=42]]\n```\n\n---\n",
    "sigbar": "## `~|` \"sigbar\"\n\nTracing printf.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~&verbar;  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~&verbar;(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sgbr p=hoon q=hoon]\n```\n\n#### Expands to\n\n`q`.\n\n#### Convention\n\nPrettyprints `p` in stack trace if `q` crashes.\n\n#### Examples\n\n```\n> ~|('sample error message' !!)\n'sample error message'\ndojo: hoon expression failed\n\n> ~|  'sample error message'\n  !!\n'sample error message'\ndojo: hoon expression failed\n```\n\n---\n",
    "sigbuc": "## `~$` \"sigbuc\"\n\nProfiling hit counter.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~&  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~&(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sgbc p=term q=hoon]\n```\n\n#### Expands to\n\n`q`.\n\n#### Discussion\n\nIf profiling is on, adds 1 to the hit counter `p`, which is a `term` like\n`%foo`. Profiling is enabled by passing the `-P` flag to the `urbit` binary.\nProfiling results are saved in `/path/to/pier/.urb/put/profile/~some.date.txt`.\n\n#### Examples\n\n```\n> ~$(%foo 3)\n3\n```\n\nAssuming we have the binary running with the `-P` flag, if we do this:\n\n```\n> =z |=  a=@\n     ?:  =(a 0)\n       a\n     ~$  %my-hit-counter\n     $(a (dec a))\n\n> (z 42)\n0\n```\n\n...then look in `/path/to/pier/.urb/put/profile/~some.date.txt`, we'll see this\nline near the top of the file:\n\n```\nmy-hit-counter: 42\n```\n\n---\n",
    "sigcab": "## `~_` \"sigcab\"\n\nUser-formatted tracing printf.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~_  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~_(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sgcb p=hoon q=hoon]\n```\n\n#### Expands to\n\n`q`.\n\n#### Convention\n\nShows `p` in stacktrace if `q` crashes.\n\n#### Discussion\n\n`p` must produce a `tank` (pretty-print source).\n\n#### Examples\n\n```\n> ~_([%leaf \"sample error message\"] !!)\nsample error message\ndojo: hoon expression failed\n\n> ~_  [%leaf \"sample error message\"]\n  !!\nsample error message\ndojo: hoon expression failed\n```\n\n---\n",
    "sigcen": "## `~%` \"sigcen\"\n\nJet registration.\n\n#### Syntax\n\nFour arguments. Two fixed arguments, then a third which may be `~` if empty or\nelse a variable number of pairs sandwiched between two `==`s, then a fourth\nfixed argument.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~%  p  q<p>    ==<p>      r1a  r1b<p>      r2a  r2b<p>      rna  rnb<p>    ==<p>  s<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sgcn p=chum q=hoon r=tyre s=hoon]\n```\n\n#### Expands to\n\n`s`.\n\n#### Convention\n\nRegister a core with name `p`, with parent at leg `q`, exporting\nthe named formulas `r`, constructed by `s`.\n\n#### Discussion\n\n`~%` is for registering cores. A registered core declares its\nformal identity to the interpreter, which may or may not be able\nto recognize and/or accelerate it.\n\nRegistered cores are organized in a containment hierarchy.\nThe parent core is at any leg within the child core. When we\nregister a core, we state the leg to its parent, in the form of\nwing `q`. We assume the parent is already registered -- as it\nmust be, if (a) we registered it on creation, (b) the child was\ncreated by an arm defined on the parent.\n\n(Cores are actually managed by their formula/battery. Any\nfunction call will create a new core with a new sample, but\nbatteries are constant. But it is not sufficient to match the\nbattery -- matching the semantics constrains the payload as well,\nsince the semantics of a battery may depend on any parent core\nand/or payload constant.)\n\nThe purpose of registration is always performance-related. It\nmay involve (a) a special-purpose optimizer or \"jet\", written\nfor a specific core and checked with a Merkle hash; (b) a\ngeneral-purpose hotspot optimizer or \"JIT\"; or (c) merely a\nhotspot declaration for profiling.\n\nAs always with hints, the programmer has no idea which of (a),\n(b), and (c) will be applied. Use `~%`\nindiscriminately on all hotspots, bottlenecks, etc, real or\nsuspected.\n\nThe list `r` is a way for the Hoon programmer to help jet\nimplementors with named Nock formulas that act on the core.\nIn complex systems, jet implementations are often partial and\nwant to call back into userspace.\n\nThe child core contains the parent, of course. When we register\na core, we state the leg to its parent, in the form of wing `q`.\nWe assume that the parent -- any core within the payload -- is\nalready registered.\n\n`p` is the name of this core within its parent; `q` is the leg\n\nRegisters a jet in core `s` so that it can be called when that code is run.\n\n#### Examples\n\nHere's the beginning of the AES core in `zuse.hoon`:\n\n```hoon\n++  aes    !.\n  ~%  %aes  ..part  ~\n  |%\n  ++  ahem\n    |=  [nnk=@ nnb=@ nnr=@]\n    =>\n      =+  =>  [gr=(ga 8 0x11b 3) few==>(fe .(a 5))]\n          [pro=pro.gr dif=dif.gr pow=pow.gr ror=ror.few]\n      =>  |%\n  ..........\n```\n\nHere we label the entire `++aes` core for optimization.\n\n---\n",
    "siggal": "## `~<` \"siggal\"\n\nRaw hint, applied to product.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~<  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~<(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n`p` may either be a a `term` or a pair of `[term hoon]`. If it's the latter, `p`\nmay optionally be written as `%foo.some-hoon`.\n\n#### AST\n\n```hoon\n[%sggl p=$@(term [p=term q=hoon]) q=hoon]\n```\n\n#### Expands to\n\n`q`.\n\n#### Discussion\n\n`~<` is only used for jet hints ([`~/`](#-sigfas) and [`~%`](#-sigcen)) at the\nmoment; we are not telling the interpreter something about the computation we're\nabout to perform, but rather about its product.\n\n#### Examples\n\n```\n> (make '~<(%a 42)')\n[%7 p=[%1 p=42] q=[%11 p=97 q=[%0 p=1]]]\n> (make '~<(%a.+(.) 42)')\n[%7 p=[%1 p=42] q=[%11 p=[p=97 q=[%4 p=[%0 p=1]]] q=[%0 p=1]]]\n```\n\n---\n",
    "siglus": "## `~+` \"siglus\"\n\nCache a computation.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~+  p<p>  </pre> |\n| Wide | <pre>  ~+(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sgls p=hoon]\n```\n\n#### Expands to\n\n`p`.\n\n#### Convention\n\nCaches the formula and subject of `p` in a local cache (generally\ntransient in the current event).\n\n#### Examples\n\nThis may pause for a second:\n\n```\n> %.(25 |=(a=@ ?:((lth a 2) 1 (add $(a (sub a 2)) $(a (dec a))))))\n121.393\n```\n\nThis may make you want to press `ctrl-c`:\n\n```\n> %.(30 |=(a=@ ?:((lth a 2) 1 (add $(a (sub a 2)) $(a (dec a))))))\n1.346.269\n```\n\nThis should work fine:\n\n```\n> %.(100 |=(a=@ ~+(?:((lth a 2) 1 (add $(a (sub a 2)) $(a (dec a)))))))\n573.147.844.013.817.084.101\n```\n\n---\n",
    "sigfas": "## `~/` \"sigfas\"\n\nJet registration for gate with registered context.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~/  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~/(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sgfs p=term q=hoon]\n```\n\n#### Expands to\n\n```hoon\n~%(p +7 ~ q)\n```\n\n#### Examples\n\nFrom the kernel:\n\n```hoon\n++  add\n  ~/  %add\n  |=  [a=@ b=@]\n  ^-  @\n  ?:  =(0 a)  b\n  $(a (dec a), b +(b))\n```\n\n---\n",
    "sigpam": "## `~&` \"sigpam\"\n\nDebugging printf.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~&  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~&(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sgpm p=hoon q=hoon]\n```\n\n#### Expands to\n\n`q`.\n\n#### Product\n\nPretty-prints `p` on the console before computing `q`.\n\n#### Discussion\n\nThis rune has no semantic effect beyond the Hoon expression `q`. It's used\nsolely to create a side-effect: printing the value of `p` to the console.\n\nIt's most useful for debugging programs.\n\n#### Examples\n\n```\n> ~&('halp' ~)\n'halp'\n~\n\n> ~&  'halp'\n  ~\n'halp'\n~\n```\n\n---\n",
    "sigtis": "## `~=` \"sigtis\"\n\nDetect duplicate.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~=  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~=(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sgts p=hoon q=hoon]\n```\n\n#### Expands to\n\n`q`.\n\n#### Convention\n\nIf `p` equals `q`, produce `p` instead of `q`.\n\n#### Discussion\n\nDuplicate nouns are especially bad news in Hoon, because comparing them\ntakes O(n) time. Use `~=` to avoid this inefficiency.\n\n#### Examples\n\nThis code traverses a tree and replaces all instances of `32` with\n`320`:\n\n```\n> =foo |=  a=(tree)\n       ?~(a ~ ~=(a [?:(=(n.a 32) 320 n.a) $(a l.a) $(a r.a)]))\n\n> (foo 32 ~ ~)\n[320 ~ ~]\n```\n\nWithout `~=`, it would build a copy of a completely unchanged tree. Sad!\n\n---\n",
    "sigwut": "## `~?` \"sigwut\"\n\nConditional debug printf.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~?  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ~?(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sgwt p=hoon q=hoon r=hoon]\n```\n\n#### Expands to\n\n`r`.\n\n#### Convention\n\nIf `p` is true, prettyprints `q` on the console before computing `r`.\n\n#### Examples\n\n```\n> ~?((gth 1 2) 'oops' ~)\n~\n\n> ~?((gth 1 0) 'oops' ~)\n'oops'\n~\n\n> ~?  (gth 1 2)\n    'oops'\n  ~\n~\n\n> ~?  (gth 1 0)\n    'oops'\n  ~\n'oops'\n~\n```\n\n---\n",
    "sigzap": "## `~!` \"sigzap\"\n\nPrint type on compilation fail.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~!  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~!(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%sgzp p=hoon q=hoon]\n```\n\n#### Expands to\n\n`q`.\n\n#### Convention\n\nIf compilation of `q` fails, prints the type of `p` in the trace.\n\n#### Examples\n\n```\n> a\n! -find.a\n\n> ~!('foo' a)\n! @t\n! find.a\n\n> ~!  'foo'\n  a\n! @t\n! find.a\n```\n",
    "tisgar": "## `=>` \"tisgar\"\n\nCompose two expressions.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =>  p<p>  q<p>  </pre> |\n| Wide | <pre>  =>(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tsgr p=hoon q=hoon]\n```\n\n#### Produces\n\nthe product of `q`, with the product of `p` taken as the subject.\n\n#### Examples\n\n```\n> =>([a=1 b=2 c=3] b)\n2\n\n> =>  9  .\n9\n\n> =>((add 2 4) [. .])\n[6 6]\n\n> =>\n  |%\n  ++  foo\n    |=  [a=@ b=@]\n    [b a]\n  --\n  (foo 42 27)\n[27 42]\n```\n\n---\n",
    "tisbar": "## `=|` \"tisbar\"\n\nCombine a named noun with the subject by \"bunting\" (producing the default value)\nof a given mold.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =&verbar;  p<p>  q<p>  </pre> |\n| Wide | <pre>  =&verbar;(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tsbr p=spec q=hoon]\n```\n\n#### Expands to\n\n```hoon\n=+(*p q)\n```\n\n#### Discussion\n\nThe default (or 'bunt') value of `p` is pinned to the head of the subject.\nUsually `p` includes a name for ease of reference.\n\nSpeaking more loosely, `=|` usually \"declares a variable\" which is\n\"uninitialized,\" presumably because you'll set it in a loop or similar.\n\n#### Examples\n\n```\n> =|  a=@ud  a\n0\n\n> =|  a=[@t @t @t]  a\n['' '' '']\n```\n\n---\n",
    "tiscol": "## `=:` \"tiscol\"\n\nChange multiple legs in the subject.\n\n#### Syntax\n\nTwo arguments: the first a variable number of pairs, the second is fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =:  p1a  p1b<p>      p2a  p2b<p>      p3a  p3b<p>    ==<p>  q<p>  </pre> |\n| Wide | <pre>  =:(p1a p1b, p2a p2b, p3a p3b q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tscl p=(list (pair wing hoon)) q=hoon]\n```\n\n#### Expands to\n\n```hoon\n=>(%_(. p) q)\n```\n\n#### Discussion\n\nThis rune is like `=.`, but for modifying the values of multiple legs of the subject.\n\n#### Examples\n\n```\n> =+  a=[b=1 c=2]\n  =:  c.a  4\n      b.a  3\n    ==\n  a\n[b=3 c=4]\n```\n\n---\n",
    "tiscom": "## `=,` \"tiscom\"\n\nExpose namespace.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =,  p<p>  q<p>  </pre> |\n| Wide | <pre>  =,(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tscm p=hoon q=hoon]\n```\n\n#### Produces\n\n`p` evaluates to a noun with some namespace. From within `q` you may access\n`p`'s names without a wing path (i.e., you can use face `b` rather than `b.p`).\n\n#### Discussion\n\nThis is especially useful for calling arms from an imported library core or for\ncalling arms from a stdlib core repeatedly. For example, JSON reparsers like\n`so:dejs:format` and `of:dejs:format` can be called as `so` and `of` after\ndoing:\n\n```hoon\n=,  dejs:format\n```\n\n#### Examples\n\nWith an imported core:\n\n```\n> (sum -7 --7)\n-find.sum\ndojo: hoon expression failed\n\n> (sum:si -7 --7)\n--0\n\n> =,  si  (sum -7 --7)\n--0\n```\n\nWith a dojo-defined face:\n\n```\n> =/  fan  [bab=2 baz=[3 qux=4]]\n  =,  fan\n  [bab qux.baz]\n[2 4]\n```\n\n---\n",
    "tisdot": "## `=.` \"tisdot\"\n\nChange one leg in the subject.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =.  p  q<p>  r<p>  </pre> |\n| Wide | <pre>  =.(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tsdt p=wing q=hoon r=hoon]\n```\n\n#### Expands to\n\n```hoon\n=>(%_(. p q) r)\n```\n\n#### Discussion\n\nTechnically the `=.` rune doesn't change the subject. It creates a new subject\njust like the old one except for a changed value at `p`. Note that the mutation\nuses [`%_` (\"cencab\")](/reference/hoon/rune/cen#_-cencab), so the type at `p`\ndoesn't change. Trying to change the value type results in a `nest-fail`.\n\n#### Examples\n\n```\n> =+  a=[b=1 c=2]\n  =.  b.a  3\n  a\n[b=3 c=2]\n\n> =+  a=[b=1 c=2]\n  =.(b.a 3 a)\n[b=3 c=2]\n\n> =+  a=[b=1 c=2]\n  =.(b.a \"hello\" a)\nnest-fail\n```\n\n---\n",
    "tishep": "## `=-` \"tishep\"\n\nCombine a new noun with the subject, inverted.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =-  p<p>  q<p>  </pre> |\n| Wide | <pre>  =-(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tshp p=hoon q=hoon]\n```\n\n#### Expands to\n\n```hoon\n=>([q .] p)\n```\n\n#### Discussion\n\n`=-` is just like `=+` but its subexpressions are reversed. `=-` looks better\nthan `=+` when the expression you're pinning to the subject is much larger than\nthe expression that uses it.\n\n#### Examples\n\n```\n> =foo |=  a=@\n       =-  (add a b)\n       :*  %a-bunch\n           %of-stuff\n           %here\n           b=2\n           %and-perhaps-more\n       ==\n> (foo 5)\n7\n```\n\n---\n",
    "tisket": "## `=^` \"tisket\"\n\nPin the head of a pair; change a leg with the tail.\n\n#### Syntax\n\nFour arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =^  p  q<p>    r<p>  s<p>  </pre> |\n| Wide | <pre>  =^(p q r s)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tskt p=skin q=wing r=hoon s=hoon]\n```\n\n#### Expands to\n\n```hoon\n=/(p -.r =.(q +.r s))\n```\n\n#### Discussion\n\n- `p` is a new name (optionally with type) to pin to the subject.\n- `q` is the name of an existing wing of the subject.\n- `r` is an expression that produces `[p-value new-q-value]`.\n- `s` is some more code to be evaluted against the modified subject.\n\nThis is a bit like doing `=/` and `=.` at the same time. It's useful for state\nmachines, where you want to produce both effects and a new state. For example,\nmany arms of a Gall agent produce `[effects new-state]` in the form of a `(quip card _this)`. In the `++on-poke` arm, you might have something like:\n\n```hoon\n=^  cards  state\n  (handle-poke !<(action vase))\n[cards this]\n```\n\nThis may also remind you of Haskell's State monad.\n\n#### Examples\n\nThe `og` core is a stateful pseudo-random number generator.\nWe have to change the core state every time we generate a\nrandom number, so we use `=^`:\n\n```\n~zod:dojo> =+  rng=~(. og 420)\n           =^  r1  rng  (rads:rng 100)\n           =^  r2  rng  (rads:rng 100)\n           [r1 r2]\n[99 46]\n```\n\n---\n",
    "tisgal": "## `=<` \"tisgal\"\n\nCompose two expressions, inverted.\n\n#### Syntax\n\nTwo arguments, fixed\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =<  p<p>  q<p>  </pre> |\n| Wide | <pre>  =<(p q)<p>  </pre> |\n| Irregular | <pre><p>    p:q<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%tsgl p=hoon q=hoon]\n```\n\n#### Expands to\n\n```hoon\n=>(q p)\n```\n\n#### Discussion\n\n`=<` is just `=>` backwards.\n\n#### Examples\n\n```\n> =<(b [a=1 b=2 c=3])\n2\n\n> =<  b\n  [a=1 b=2 c=3]\n2\n\n> b:[a=1 b=2 c=3]\n2\n\n> [. .]:(add 2 4)\n[6 6]\n```\n\n---\n",
    "tislus": "## `=+` \"tislus\"\n\nCombine a new noun with the subject.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =+  p<p>  q<p>  </pre> |\n| Wide | <pre>  =+(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tsls p=hoon q=hoon]\n```\n\n#### Expands to\n\n```hoon\n=>([p .] q)\n```\n\n#### Discussion\n\nThe subject of the `=+` expression, call it `a`, becomes the cell `[p a]` for\nthe evaluation of `q`. That is, `=+` 'pins a value', `p`, to the head of the\nsubject.\n\nLoosely speaking, `=+` is the simplest way of \"declaring a variable.\"\n\n#### Examples\n\n```\n> =+  42  -\n42\n\n> =+  x=42  x\n42\n\n> =+  [a='foo' b='bar']  a\n'foo'\n```\n\n---\n",
    "tismic": "## `=;` \"tismic\"\n\nCombine a named noun with the subject, possibly with type annotation; inverted\norder.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =;  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  =;(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tsmc p=skin q=hoon r=hoon]\n```\n\n#### Expands to\n\n```hoon\n=/(p r q)\n```\n\n#### Discussion\n\n`=;` is exactly like `=/` except that the order of its last two subexpressions\nis reversed.\n\n#### Examples\n\n```\n> =foo |=  a=@\n       =/   b  1\n       =;   c=@\n         :(add a b c)\n       2\n> (foo 5)\n8\n```\n\n---\n",
    "tisfas": "## `=/` \"tisfas\"\n\nCombine a named noun with the subject, possibly with type annotation.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =/  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  =/(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tsfs p=skin q=hoon r=hoon]\n```\n\n#### Expands to\n\nif `p` is a name, (e.g. `a`):\n\n```hoon\n=+(^=(p q) r)\n```\n\nif `p` is a name with a type (e.g., `a=@`):\n\n```hoon\n=+(^-(p q) r)\n```\n\n#### Desugaring\n\n```hoon\n?@  p\n  =+  p=q\n  r\n=+  ^-($=(p.p q.p) q)\nr\n```\n\n#### Discussion\n\n`p` can be either a name or a `name=type`. If it's just a name, `=/` (\"tisfas\")\n\"declares a type-inferred variable.\" If it has a type, `=/` \"declares a\ntype-checked variable.\"\n\n#### Examples\n\n```\n> =/  a=@t  'hello'  a\n'hello'\n\n> =/  x  [1 2 3]  x\n[1 2 3]\n\n> =foo |=  a=@\n       =/  b  1\n       =/  c=@  2\n       :(add a b c)\n> (foo 5)\n8\n```\n\n---\n",
    "tissig": "## `=~` \"tissig\"\n\nCompose many expressions.\n\n#### Syntax\n\nVariable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =~  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  =~(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tssg p=(list hoon)]\n```\n\n#### Produces\n\nThe product of the chain composition.\n\n#### Examples\n\n```\n> =~  10\n      [20 .]\n      [30 .]\n      [40 .]\n      .\n  ==\n[40 30 20 10]\n\n> =~  [sub (mul 3 20) (add 10 20)]\n      (sub +)\n      +(.)\n  ==\n31\n\n> =foo =|  n=@\n       =<  =~  increment\n               increment\n               increment\n               n\n           ==\n       |%\n       ++  increment\n         ..increment(n +(n))\n       --\n> foo\n3\n```\n\n---\n",
    "tistar": "## `=*` \"tistar\" {% #-tistar %}\n\nDefine a deferred expression.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =*  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  =*(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tstr p=term q=hoon r=hoon]\n```\n\n#### Produces\n\n`r`, compiled with a subject in which `p` is a deferred expression for `q`.\n\n#### Discussion\n\n`=*` assigns a name to an expression that will be evaluated in each place the\nname is dereferenced. This allows you to \"write\" through it to the original\nsubject `axis`. `q` is recorded in the type information of `p`, and `q` is\ncalculated every time you use `p`.\n\nThis rune has some similarities with macros, and some similarities with aliases,\nbut it is not really either.\n\nThis rune is commonly used to give a Gall agent's state the name `state` like:\n\n```hoon\n=*  state  -\n```\n\nThis lets you reference the whole `state` while also being able to reference its\nindividual elements like `foo` and `bar`, without having to do `foo.state`,\n`bar.state`, etc.\n\n#### Examples\n\n```\n> =+  a=1\n  =*  b  a\n  [a b]\n[1 1]\n\n> =+  a=1\n  =*  b  a\n  =.  a  2\n  [a b]\n[2 2]\n```\n\n---\n",
    "tiswut": "## `=?` \"tiswut\"\n\nConditionally change one leg in the subject.\n\n#### Syntax\n\nFour arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =?  p  q<p>    r<p>  s<p>  </pre> |\n| Wide | <pre>  =?(p q r s)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%tswt p=wing q=hoon r=hoon s=hoon]\n```\n\n#### Expands to\n\n```hoon\n=.  p  ?:(q r p)\ns\n```\n\n#### Discussion\n\nUse `=?` to replace the value of leg `p` with `r` on condition `q`. As\nusual, we are not actually mutating the subject, just creating\na new subject with a changed value. The change in value includes a\ntype check against the old subject; the type of `r` must nest under\nthe type of `p`.\n\n#### Examples\n\n```\n> =a 12\n\n> =?(a =(1 1) 22 a)\n22\n\n> =?(a =(1 2) 22 a)\n12\n```\n",
    "wutbar": "## `?|` \"wutbar\"\n\nLogical OR.\n\n#### Syntax\n\nVariable number of arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?&verbar;  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  ?&verbar;(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | <pre>    &verbar;(p1 p2 p3 pn)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%wtbr p=(list hoon)]\n```\n\n#### Expands to\n\n**Pseudocode**: `a`, `b`, `c`, ... as elements of `p`:\n\n```hoon\n?:(a & ?:(b & ?:(c & ?:(... ?:(z & |)))))\n```\n\n#### Desugaring\n\n```hoon\n|-\n?~  p\n  |\n?:  i.p\n  &\n$(p t.p)\n```\n\n#### Produces\n\nIf any argument evaluates to true (`%.y`), true. If all arguments evaluate to\nfalse (`%.n`), false.\n\n#### Examples\n\n```\n> |(=(6 42) =(42 42))\n%.y\n\n> |(=(6 42) =(42 43))\n%.n\n```\n\n---\n",
    "wuthep": "## `?-` \"wuthep\"\n\nSwitch against a union, with no default.\n\n#### Syntax\n\nOne fixed argument, then a variable number of pairs.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall style #1 | <pre>  ?-  p<p>    q1a  q1b<p>    q2a  q2b<p>    qna  qnb<p>  ==<p>  </pre> |\n| Tall style #2 | <pre>  ?-    p<p>      q1a<p>    q1b<p>  ::<p>      q2a<p>    q2b<p>  ::<p>      qna<p>    qnb<p>  ==<p>  </pre> |\n| Wide | <pre>  ?-(p q1a q1b, q2a q2b, qna qnb)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%wthp p=wing q=(list (pair spec value))]\n```\n\n#### Expands to\n\n**Pseudocode**: `a`, `b`, `c`, ... as elements of `q`:\n\n```hoon\n?:  ?=(p.a p)  q.a\n?:  ?=(p.b p)  q.b\n?:  ?=(p.c p)  q.c\n...\n~|(%mint-lost !!)\n```\n\n#### Desugaring\n\n```hoon\n|-\n?.  q\n  ~|(%mint-lost !!)\n?:  ?=(p.i.q p)\n  q.i.q\n$(q t.q)\n```\n\n#### Discussion\n\nThe `?-` rune is for a conditional expression in which the type of `p`\ndetermines which branch is taken. Usually the type of `p` is a union of other\ntypes. There is no default branch.\n\nThe compiler makes sure that your code neither misses a case of the union, nor\nincludes a double case that isn't there. This is not special handling for `?-`,\njust a consequence of the semantics of `?:`, which `?-` reduces to.\n\nA missing case will throw the `mint-lost` error. An extra case will throw\n`mint-vain`.\n\n#### Examples\n\n```\n> =cor |=  vat=?(%a %b)\n       ?-  vat\n         %a  20\n         %b  42\n       ==\n\n> (cor %a)\n20\n\n> (cor %b)\n42\n\n> (cor %c)\n! nest-fail\n```\n\n---\n",
    "wutcol": "## `?:` \"wutcol\" {% #-wutcol %}\n\nBranch on a boolean test.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?:  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ?:(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%wtcl p=hoon q=hoon r=hoon]\n```\n\n#### Produces\n\nIf `p` produces true (`%.y`), then `q`. If `p` produces false (`%.n`), then `r`.\nIf `p` is not a boolean, compiler yells at you.\n\n#### Discussion\n\nIf test analysis reveals that either branch is never taken, or if `p` is not a\nboolean, compilation fails. An untaken branch is indicated with `mint-lost`.\n\nNote also that all other branching expressions reduce to `?:`.\n\n#### Examples\n\n```\n> ?:((gth 1 0) 3 4)\n3\n\n> ?:  (gth 1 0)\n    3\n  4\n3\n\n> ?:((gth 1 2) 3 4)\n4\n\n> ?:  (gth 1 2)\n    3\n  4\n4\n```\n\n---\n",
    "wutdot": "## `?.` \"wutdot\"\n\nBranch on a boolean test, inverted.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?.  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ?.(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%wtdt p=hoon q=hoon r=hoon]\n```\n\n#### Expands to\n\n```hoon\n?:(p r q)\n```\n\n#### Discussion\n\n`?.` is just like `?:`, but with its last two subexpressions reversed.\n\nAs is usual with inverted forms, use `?.` when the true-case expression is much\ntaller and/or wider than the false-case expression.\n\n#### Examples\n\n```\n> ?.((gth 1 2) 3 4)\n3\n\n> ?.(?=(%a 'a') %not-a %yup)\n%yup\n\n> ?.  %.y\n    'this false case is less heavy than the true case'\n  ?:  =(2 3)\n    'two not equal to 3'\n  'but see how \\'r is much heavier than \\'q?'\n'but see how \\'r is much heavier than \\'q?'\n```\n\n---\n",
    "wutket": "## `?^` \"wutket\"\n\nBranch on whether a wing of the subject is a cell.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?^  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ?^(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%wtkt p=wing q=hoon r=hoon]\n```\n\n#### Expands to\n\n```hoon\n?:(?=(^ p) q r)\n```\n\n#### Discussion\n\nThe type of the wing, `p`, must not be known to be either an atom or a cell, or\nelse you'll get a `mint-vain` error at compile time. `mint-vain` means that one\nof the `?^` branches, `q` or `r`, is never taken.\n\n#### Examples\n\n```\n> ?^(0 1 2)\n! mint-vain\n! exit\n\n> ?^(`*`0 1 2)\n2\n\n> ?^(`*`[1 2] 3 4)\n3\n```\n\n---\n",
    "wutgal": "## `?<` \"wutgal\"\n\nNegative assertion.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?<  p<p>  q<p>  </pre> |\n| Wide | <pre>  ?<(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%wtgl p=hoon q=hoon]\n```\n\n#### Expands to\n\n```hoon\n?:(p !! q)\n```\n\n#### Discussion\n\n`?<` is used to force a crash when some condition `p` doesn't yield false\n(`%.n`). It can be used for type inference with the `?=` rune, much like the\n`?>` rune.\n\n#### Examples\n\n```\n> ?<(=(3 4) %foo)\n%foo\n\n> ?<(=(3 3) %foo)\ndojo: hoon expression failed\n\n> =a `*`[12 14]\n\n> `^`a\nnest-fail\n\n> ?<(?=(@ a) `^`a)\n[12 14]\n```\n\n---\n",
    "wutgar": "## `?>` \"wutgar\"\n\nPositive assertion.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?>  p<p>  q<p>  </pre> |\n| Wide | <pre>  ?>(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%wtgr p=hoon q=hoon]\n```\n\n#### Expands to\n\n```hoon\n?.(p !! q)\n```\n\n#### Discussion\n\n`?>` is used to force a crash when some condition `p` doesn't yield true\n(`%.y`). It can be used for type inference, with the `?=` rune, to specify the\ntype of a value.\n\n#### Examples\n\n```\n> ?>(=(3 3) %foo)\n%foo\n\n> ?>(=(3 4) %foo)\ndojo: hoon expression failed\n\n> =a `*`123\n\n> `@`a\nnest-fail\n\n> ?>(?=(@ a) `@`a)\n123\n```\n\n---\n",
    "wutlus": "## `?+` \"wutlus\"\n\nSwitch against a union, with a default.\n\n#### Syntax\n\nTwo fixed arguments, then a variable number of pairs.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall style #1 | <pre>  ?+  p  q<p>    r1a  r1b<p>    r2a  r2b<p>    rna  rnb<p>  ==<p>  </pre> |\n| Tall style #2 | <pre>  ?+    p  q<p>      r1a<p>    r1b<p>  ::<p>      r2a<p>    r2b<p>  ::<p>      rna<p>    rnb<p>  ==<p>  </pre> |\n| Wide | <pre>  ?+(p q r1a r1b, r2a r2b, rna rnb)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%wtls p=wing q=hoon r=(list (pair spec hoon))]\n```\n\n#### Expands to\n\n**Pseudocode**: `a`, `b`, `c`, ... as elements of `r`:\n\n```hoon\n?:  ?=(p.a p)  q.a\n?:  ?=(p.b p)  q.b\n?:  ?=(p.c p)  q.c\n...\nq\n```\n\n#### Desugaring\n\n```hoon\n|-\n?.  r\n  q\n?:  ?=(p.i.r p)\n  q.i.r\n$(r t.r)\n```\n\n#### Discussion\n\nThe `?+` rune is for a conditional expression in which the type of `p`\ndetermines which branch is taken. Usually the type of `p` is a union of other\ntypes. If `p`'s type doesn't match the case for any given branch, the default\nexpression, `q`, is evaluated.\n\nIf there is a case that is never taken you'll get a `mint-vain` error.\n\n#### Examples\n\n```\n> =cor |=  vat=@tas\n       ?+  vat  240\n         %a  20\n         %b  42\n       ==\n\n> (cor %a)\n20\n\n> (cor %b)\n42\n\n> (cor %c)\n240\n```\n\n---\n",
    "wutpam": "## `?&` \"wutpam\"\n\nLogical AND.\n\n#### Syntax\n\nVariable arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?&  p1<p>      p2<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  ?&(p1 p2 pn)<p>  </pre> |\n| Irregular | <pre><p>    &(p1 p2 pn)<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%wtpm p=(list hoon)]\n```\n\n#### Expands to\n\n**Pseudocode**: `a`, `b`, `c`, ... as elements of `p`:\n\n```hoon\n?.(a | ?.(b | ?.(c | ?.(... ?.(z | &)))))\n```\n\n#### Desugaring\n\n```hoon\n|-\n?~  p\n  &\n?.  i.p\n  |\n$(p t.p)\n```\n\n#### Produces\n\nIf ALL arguments evaluate to true (`%.y`), true (`%.y`). If one or more evalute\nto false (`%.n`), false (`%.n`).\n\n#### Examples\n\n```\n> &(=(6 6) =(42 42))\n%.y\n\n> &(=(6 7) =(42 42))\n%.n\n```\n\n---\n",
    "wutpat": "## `?@` \"wutpat\"\n\nBranch on whether a wing of the subject is an atom.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?@  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ?@(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%wtpt p=wing q=hoon r=hoon]\n```\n\n#### Expands to\n\n```hoon\n?:(?=(@ p) q r)\n```\n\n#### Produces\n\nIf `p` is an atom, `q`. If `p` is a cell, `r`.\n\n#### Discussion\n\nThe type of the wing, `p`, must not be known to be either an atom or a cell, or\nelse you'll get a `mint-vain` error at compile time. `mint-vain` means that one\nof the `?@` branches, `q` or `r`, is never taken.\n\n#### Examples\n\n```\n> ?@(0 1 2)\n! mint-vain\n! exit\n\n> ?@(`*`0 1 2)\n1\n\n> ?@(`*`[1 2] 3 4)\n4\n```\n\n---\n",
    "wutsig": "## `?~` \"wutsig\"\n\nBranch on whether a wing of the subject is null.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?~  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ?~(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%wtsg p=wing q=hoon r=hoon]\n```\n\n#### Expands to\n\n```hoon\n?:(?=($~ p) q r)\n```\n\n#### Produces\n\nIf `p` is null (`~`), `q`. If `p` is non-null, `r`.\n\n#### Discussion\n\nIt's bad style to use `?~` to test for any zero atom. Use it only for a true\nnull, `~`.\n\n#### Examples\n\n```\n> =foo \"\"\n\n> ?~(foo 1 2)\n1\n```\n\n---\n",
    "wuttis": "## `?=` \"wuttis\"\n\nTest pattern match.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?=  p<p>  q<p>  </pre> |\n| Wide | <pre>  ?=(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%wtts p=spec q=wing]\n```\n\n#### Produces\n\n`%.y` (true) if the noun at `q` is in the type of `p`; `%.n` (false) otherwise.\n\n#### Discussion\n\n`?=` is not as powerful as it might seem. For instance, it\ncan't generate a loop -- you cannot (and should not) use it to\ntest whether a `*` is a `(list @)`. Nor can it validate atomic\nauras.\n\nPatterns should be as weak as possible. Unpack one layer of\nunion at a time. Don't confirm things the type system knows.\n\nFor example, when matching from a tagged union for the type `[%foo p=@ q=[@ @]]`, the appropriate pattern is `[%foo *]`. You have one\nquestion, which is whether the head of the noun is `%foo`.\n\nA common error is `find.$`, meaning `p` is not a type.\n\n#### Examples\n\n```\n> =bar [%foo %bar %baz]\n> ?=([%foo *] bar)\n%.y\n```\n\n---\n",
    "wutzap": "## `?!` \"wutzap\"\n\nLogical NOT.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?!  p<p>  </pre> |\n| Wide | <pre>  ?!(p)<p>  </pre> |\n| Irregular | <pre>    !p<p>  </pre> |\n\n\n#### AST\n\n```hoon\n[%wtzp p=hoon]\n```\n\n#### Expands to\n\n```hoon\n.=(| p)\n```\n\n#### Produces\n\nThe logical NOT of `p`, which must evaluate to either `%.y` or `%.n`.\n\n#### Examples\n\n```\n~zod:dojo> ?!(.=(1 2))\n%.y\n\n~zod:dojo> !&\n%.n\n\n~zod:dojo> !|\n%.y\n\n~zod:dojo> !(gth 5 6)\n%.y\n```\n",
    "zapcom": "## `!,` \"zapcom\"\n\nProduce the Hoon AST of an expression.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !,  p<p>  q<p>  </pre> |\n| Wide | <pre>  !,(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%zpcm p=hoon q=hoon]\n```\n\n#### Discussion\n\nThis produces the [`$hoon`](/reference/hoon/stdlib/4o#hoon) AST of\nexpression `q`. The first argument, `p`, is always an example of the `$hoon`\ntype, typically just the `*hoon` bunt value, and is used for type inference. The\nreason for `p` is just to handle transitions if the `$hoon` type changes.\n\n#### Examples\n\n```\n> !,  *hoon  [1 1]\n[%cltr p=~[[%sand p=%ud q=1] [%sand p=%ud q=1]]]\n\n> !,  *hoon  (add 1 1)\n[%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=1] [%sand p=%ud q=1]]]\n```\n\n---\n",
    "zapgar": "## `!>` \"zapgar\"\n\nWrap a noun in its type (form a [`vase`](/reference/hoon/stdlib/4o#vase)).\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !>  p<p>  </pre> |\n| Wide | <pre>  !>(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%zpgr p=hoon]\n```\n\n#### Produces\n\nA cell whose tail is the product of `p`, and whose head is the static type of `p`.\n\n#### Discussion\n\nIn Hoon, a dynamic type is a static type compiled at runtime. This type-noun\ncell is generally called a [`vase`](/reference/hoon/stdlib/4o#vase).\n\n#### Examples\n\n```\n> !>(1)\n[#t/@ud q=1]\n```\n\nIf you want just the type value, use a 'type spear'. This is `-:!>`, i.e., the\nhead of the cell produced by `!>`:\n\n```\n> -:!>(1)\n#t/@ud\n```\n\n---\n",
    "zapgal": "## `!<` \"zapgal\"\n\nExtracts a [`vase`](/reference/hoon/stdlib/4o#vase) to the given mold if\nits type nests.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !<  p<p>  q<p>  </pre> |\n| Wide | <pre>  !<(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%zpgl p=spec q=hoon]\n```\n\n#### Produces\n\nThe value of vase `q` typed with the type of mold `p` if possible, else a\n`nest-fail`.\n\n#### Discussion\n\nThis is something like a partial inverse to the `!>` rune and can be used to\nextract a typed value from a `vase`.\n\n#### Examples\n\n```\n> !<  @  !>  ~zod\n0\n\n> !<  @p  !>  0\nnest-fail\n\n> !<  tape  !>(\"foobar\")\n\"foobar\"\n```\n\n---\n",
    "zapmic": "## `!;` \"zapmic\"\n\nWrap a noun in its type (raw).\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !;  p<p>  q<p>  </pre> |\n| Wide | <pre>  !;(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%zpmc p=hoon q=hoon]\n```\n\n#### Discussion\n\nThis wraps the product of `q` in its inferred type. It's a raw version of\n[`!>`](#-zapgar). Unlike zapgar, `q` is not given a `p` face and its type\ninformation is not stripped to a raw noun.\n\nThe first field, `p`, must be an example of the\n[`$type`](/reference/hoon/stdlib/4o#type) type, typically just `*type` (the\nbunt of `$type`). The `p` argument is just so transitions can be handled if the\n`$type` type changes.\n\nIt's unlikely you'd use this rune directly; [`!>`](#-zapgar) is much more\ntypical.\n\n#### Examples\n\n```\n> !;  *type  [1 1]\n[#t/[@ud @ud] 1 1]\n\n> !;  *type  'foo'\n[#t/@t 'foo']\n```\n\n---\n",
    "zaptis": "## `!=` \"zaptis\"\n\nMake the Nock formula for a Hoon expression.\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !=  p<p>  </pre> |\n| Wide | <pre>  !=(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%zpts p=hoon]\n```\n\n#### Produces\n\nThe Nock generated by `p`.\n\n#### Discussion\n\nDon't confuse `!=` with a negation, `!`, followed by a test for equality, `=(10 11)`.\n\n#### Examples\n\n```\n> !=(20)\n[1 20]\n\n> !=(~zod)\n[1 0]\n\n> !=((add 2 2))\n[8 [9 3.110.356 0 31] 9 2 [0 4] [7 [0 3] 1 2 2] 0 11]\n```\n\nDon't confuse the `!=` rune with:\n\n```\n> !=(10 11)\n%.y\n\n> !=(10 10)\n%.n\n```\n\nThe syntax difference is that a test for equality takes two subexpressions, and\nthe `!=` rune only one.\n\n---\n",
    "zapwut": "## `!?` \"zapwut\"\n\nRestrict Hoon version.\n\n#### Syntax\n\nTwo arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !?  p<p>  q<p>  </pre> |\n| Wide | <pre>  !?(p q)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%zpwt p=$@(p=@ [p=@ q=@]) q=hoon]\n```\n\n#### Produces\n\nWhen `p` is an atom:\n\n- `q` if `p` \u2265 Hoon kelvin version, otherwise crash.\n\nWhen `p` is a cell:\n\n- `q`, if `p.p` \u2265 Hoon kelvin version \u2265 `q.p`, otherwise crash.\n\n(Versions count down; the current version is 140.)\n\n#### Examples\n\n```\n> !?  [142 140]  (add 2 2)\n4\n\n> !?  142  (add 2 2)\n4\n\n> !?  64  (add 2 2)\n! exit\n```\n\n---\n",
    "zappat": "## `!@` \"zappat\"\n\nBranch on whether a wing exists.\n\n#### Syntax\n\nThree arguments, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !@  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  !@(p q r)<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%zppt p=(list wing) q=hoon r=hoon]\n```\n\n#### Discussion\n\n`p` is a wing reference like `foo`, `bar.foo`, etc. If `p` exists, `q`. If `p`\ndoes not exist, `r`. Essentially, this is like `?:` for wing existence.\n\n#### Examples\n\n```\n> =foo 42\n\n> !@(foo 'exists' 'does not exist')\n'exists'\n\n> !@(baz 'exists' 'does not exist')\n'does not exist'\n```\n\n---\n",
    "zapzap": "## `!!` \"zapzap\"\n\nCrash.\n\n#### Syntax\n\nNo arguments.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !!<p>  </pre> |\n| Wide | <pre><p>  !!<p>  </pre> |\n| Irregular | None. |\n\n\n#### AST\n\n```hoon\n[%zpzp ~]\n```\n\n#### Produces\n\nNothing. Always crashes, with type `%void`.\n\n#### Discussion\n\n`%void` nests in every other type, so you can stub out anything with `!!`.\n\n#### Examples\n\n```\n> !!\ndojo: hoon expression failed\n```\n\n---\n",
    "zapcol": "## `!:` \"zapcol\"\n\nTurn on stack trace.\n\n#### Syntax\n\nOne argument, fixed\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !:  p<p>  </pre> |\n| Wide | <pre>  !:(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### Produces\n\nThe product of `p` unless `p` crashes, in which case a stack trace is given.\n\n#### Discussion\n\n`!:` is used to turn on a debugging stack trace option for any code you have in\n`p`.\n\n#### Examples\n\n```\n> ?:(=(0 1) 123 !!)\ndojo: hoon expression failed\n\n> !:  ?:(=(0 1) 123 !!)\n/~zod/base/~2022.4.2..08.54.53..07d7:<[1 5].[1 22]>\n/~zod/base/~2022.4.2..08.54.53..07d7:<[1 19].[1 21]>\ndojo: hoon expression failed\n```\n\n---\n",
    "zapdot": "## `!.` \"zapdot\"\n\nTurn off stack trace for a subexpression `p`\n\n#### Syntax\n\nOne argument, fixed.\n\n| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !.  p<p>  </pre> |\n| Wide | <pre>  !.(p)<p>  </pre> |\n| Irregular | None. |\n\n\n#### Produces\n\nThe product of `p`. If `p` crashes, no stack trace entries are given for that code.\n\n#### Discussion\n\n`!.` is used to turn off a debugging stack trace option for any code you have in\n`p`. This rune can be embedded under a `!:` rune for inner loops of your code\nthat you don't want or need to trace. This is especially useful if a trace\noverflows the stack.\n\n#### Examples\n\n```\n> %.(1 |=(a=@ ^-(@ ?:(=(a 10) !! $(a +(a))))))\ndojo: hoon expression failed\n\n> !:  %.(1 |=(a=@ ^-(@ ?:(=(a 10) !! $(a +(a))))))\n/~zod/base/~2022.4.2..08.56.45..5ecc:<[1 5].[1 49]>\n/~zod/base/~2022.4.2..08.56.45..5ecc:<[1 17].[1 47]>\n/~zod/base/~2022.4.2..08.56.45..5ecc:<[1 22].[1 46]>\n...skipping some lines...\n/~zod/base/~2022.4.2..08.56.45..5ecc:<[1 22].[1 46]>\n/~zod/base/~2022.4.2..08.56.45..5ecc:<[1 33].[1 35]>\ndojo: hoon expression failed\n\n> !:  %.(1 !.(|=(a=@ ^-(@ ?:(=(a 10) !! $(a +(a)))))))\n/~zod/base/~2022.4.2..08.57.07..d40b:<[1 5].[1 53]>\ndojo: hoon expression failed\n```\n\n---\n",
    "wing":   "## Wings `[%wing p=(list limb)]`\nA wing is a limb search path into the subject.\n\n## Produces\n\nA wing is a list of limbs (including a trivial list of one limb).  The limbs are resolved in succession.  The result of the last limb resolution is the value produced by the wing expression.\n\n## Syntax    \nIrregular: `a.b.c`.  Read this as '`a` in `b` in `c`'. Finds limb `a` within limb `b` within limb `c` of the subject.    \n## Discussion    \nIntuitively, Hoon wings are written in the opposite order\nfrom attribute dot-paths in most languages.  Hoon `a.b.c` is Java's\n`c.b.a`; it means \"a within b within c.\"\n\nAny item in the wing can resolve to a leg (fragment) or arm\n(computation).  But if a non-terminal item in the wing would\nresolve to an arm, it resolves instead to the subject of the arm\n-- in other words, the core exporting that name.\n\nThe mysterious idiom `..b` produces the leg `b` if `b`\nis a leg; the core exporting `b` if `b` is an arm.  Since `.`\nis the same limb as `+`, `..b` is the same wing as `+1.foo`.\n\n## Examples\n\n```\n~zod:dojo> =a [fod=3 bat=[baz=1 moo=2]]\n\n~zod:dojo> bat.a\n[baz=1 moo=2]\n\n~zod:dojo> moo.bat.a\n2\n```\n\n##  Wing Resolution\n\nThere are two common syntaxes used to resolve a wing path into the\ncurrent subject:  `.` dot and `:` col.\n\n- `.` dot syntax, as `c.b.a`, resolves the wing path into the subject\n    at the right hand using Nock 0 (or possibly Nock 9 or Nock 10\n    depending on the expression).\n    \n    ```hoon\n    > !,(*hoon c.b.a)\n    [%wing p=~[%c %b %a]]\n    ```\n\n- The `:` col operator expands to a `=>` tisgar to resolve the wing path\n    against its right-hand side as the subject.  This can be a Nock 7\n    or possibly optimized by the compiler to a Nock 0.\n    \n    ```hoon\n    > !,(*hoon c:b:a)\n    [%tsgl p=[%wing p=~[%c]] q=[%tsgl p=[%wing p=~[%b]] q=[%wing p=~[%a]]]]\n    ```",
    "term":   "## `term`\n\nA [`term`](https://developers.urbit.org/guides/additional/strings#term) has an aura of `@tas`, and is a\nsubset of a [`knot`](#knot). It only allows lower-case letters, numbers, and\nhyphens. Additionally, the first character cannot be a hyphen or number. This is\na very restricted text atom, and is intended for naming data structures and the\nlike.\n\nThe `hoon` syntax for a term is a string conforming to the prior description,\nprepended with a `%` like:\n\n```hoon\n%foo-123\n```\n",
    "knot":   "## `knot`\n\nA [`knot`](https://developers.urbit.org/guides/additional/strings#knot) has an aura of `@ta`, and is a\nsubset of a [`cord`](#cord). It allows lower-case letters, numbers, and four\nspecial characters: Hyphen, tilde, underscore and period. Its restricted set of\ncharacters is intended to be URL-safe.\n\nThe `hoon` syntax for a knot is a string containing any of the aforementioned\ncharacters prepended with `~.` like:\n\n```hoon\n~.abc-123.def_456~ghi\n```\n",
    "cord":   "## `cord`\n\nA [`cord`](https://developers.urbit.org/guides/additional/strings#cord) has an aura of `@t`. It denotes\nUTF-8 text encoded in an atom, little-endian. That is, the first character in\nthe text is the least-significant byte. A cord may contain any UTF-8 characters,\nthere are no restrictions.\n\nThe `hoon` syntax for a cord is some text wrapped in single-quotes like:\n\n```hoon\n'This is a cord!'\n```\n\nsingle-quotes and backslashes must be escaped with a backslash like:\n\n```hoon\n''quotes' \\backslashes\\'\n```\n\nCharacters can also be entered as hex, they just have to be escaped by a\nbackslash. For example, `'\\21\\21\\21'` will render as `'!!!'`. This is useful for\nentering special characters such as line breaks like `'foo\\0abar'`.\n\nCords divided over multiple lines are allowed. There are two ways to do this.\nThe first is to start and end with three single-quotes like:\n\n```hoon\n'''\nfoo\nbar\nbaz\n'''\n```\n\nThe line endings will be encoded Unix-style as line feed characters like:\n\n```hoon\n'foo\\0abar\\0abaz'\n```\n\nThe second is to begin with a single-quote like usual, then break the line by\nending it with a backslash and start the next line with a forward-slash like:\n\n```hoon\n'foo/bar/baz'\n```\n\nThis will be parsed to:\n\n```hoon\n'foobarbaz'\n```\n",
    "tape":   "## `tape`\n\nA [`tape`](https://developers.urbit.org/guides/additional/strings#tape-1) is the other\nmain string type in hoon. Rather than a single atom, it's instead a list of\nindividual `@tD` characters (the `D` specifies a bit-length of 8, see the\n[Auras](/reference/hoon/auras#bitwidth) documentation for\ndetails). The head of the list is the first character in the string.\n\nThe `hoon` syntax for a tape is some text wrapped in double-quotes like:\n\n```hoon\n\"This is a tape!\"\n```\n\nDouble-quotes, backslashes and left-braces must be escaped by a backslash\ncharacter:\n\n```hoon\n\"\"double-quotes\" \\backslash\\ left-brace:{\"\n```\n\nLike with `cord`s, characters can also be entered as hex escaped by a backslash\nso `\"\\21\\21\\21\"` renders as `\"!!!\"`.\n\nTapes divided over multiple lines are allowed. Unlike [`cord`](#cord)s, there is\nonly one way to do this, which is by starting and ending with three\ndouble-quotes like:\n\n```hoon\n\"\"\"\nfoo\nbar\nbaz\n\"\"\"\n```\n\nThe line endings will be encoded Unix-style as line feed characters like:\n\n```hoon\n\"foo\\0abar\\0abaz\"\n```\n\nAs mentioned earlier, tapes are lists of single characters:\n\n```\n> `tape`~['f' 'o' 'o']\n\"foo\"\n```\n\nThis means they can be manipulated with ordinary list functions:\n\n```\n> `tape`(turn \"foobar\" succ)\n\"gppcbs\"\n```;\n\n### Interpolation\n\nTapes, unlike cords, allow string interpolation. Arbitrary `hoon` may be\nembedded in the tape syntax and its product will be included in the resulting\ntape. There are two ways to do it:\n\n#### Manual\n\nIn the first case, the code to be evaluated is enclosed in braces. The type of\nthe product of the code must itself be a tape. For example, if the `@p` of our\nship is stored in `our`, simply doing `\"{our}\"` will fail because its type will\nbe `@p` rather than `tape`. Instead, we must explicitly use the\n[`+scow`](/reference/hoon/stdlib/4m#scow) function to\nrender `our` as a tape:\n\n```\n> \"{(scow %p our)}\"\n\"~zod\"\n```\n\nAnother example:\n\n```\n> \"[{(scow %p our)} {(scow %da now)}]\"\n\"[~zod ~2021.10.3..08.59.10..2335]\"\n```\n\n#### Automatic\n\nRather than having to manually render data as a `tape`, angle brackets _inside_\nthe braces tell the interpreter to automatically pretty-print the product of the\nexpression as a tape. This way we needn't use functions like `+scow` and can\njust reference things like `our` directly:\n\n```\n> \"{<our>}\"\n~zod\n```\n\nAnother example:\n\n```\n> \"{<(add 1 2)>}\"\n\"3\"\n```\n\nAnd another:\n\n```\n> \"{<our now>}\"\n\"[~zod ~2021.10.3..09.01.14..1654]\"\n```\n\n",
    "hephep": "## `--` \"hephep\"\n\n#### Syntax\n\nThe `--` rune is used to indicate the end of a core expression.\n\n#### Discussion\n\nThe `|%`, `|_`, and `|^` runes are used to create cores that can have\narbitrarily many arms. When you have defined all the desired arms in a core\nexpression (using the `++`, `+$`, and `+*` runes), use `--` to terminate the\nexpression.\n",
    "tistis": "## `==` \"tistis\"\n\n#### Syntax\n\nThe `==` rune is used to indicate the end of a 'jogging' or 'running' series of\nHoon expressions (runes that take a variable number of arguments).\n\n#### Discussion\n\nCertain runes are used to create expressions that may include arbitrarily many\nsubexpressions. Such expressions are terminated with the `==` rune. For example,\nthe `:*` and `:~` runes are used to create a cell of any length. (The latter is\njust like the former except that it adds a null value at the end of the cell.)\nFor another example, the `%=` rune used used to make arbitrarily many changes to\na given wing value.\n"
}