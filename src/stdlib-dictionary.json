{
    "add": "## `++add`\n\nAdd\n\nProduces the sum of `a` and `b`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nAn [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  add\n  ~/  %add\n  |=  [a=@ b=@]\n  ^-  @\n  ?:  =(0 a)  b\n  $(a (dec a), b +(b))\n```\n\n#### Examples\n\n```\n> (add 2 2)\n4\n```\n\n```\n> (add 1 1.000.000)\n1.000.001\n```\n\n```\n> (add 1.333 (mul 2 2))\n1.337\n```\n\n```\n> (add 'a' 4)\n101\n```\n\n```\n> (add 'a' 'b')\n195\n```\n\n```\n> (add 0xc 0xf)\n27\n```\n\n```\n> `@ux`(add 0xc 0xf)\n0x1b\n```\n\n---\n",
    "dec": "## `++dec`\n\nDecrement\n\nDecrements `a` by `1`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nAn [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  dec\n  ~/  %dec\n  |=  a=@\n  ~_  leaf+\"decrement-underflow\"\n  ?<  =(0 a)\n  =+  b=0\n  |-  ^-  @\n  ?:  =(a +(b))  b\n  $(b +(b))\n```\n\n#### Examples\n\n```\n> (dec 7)\n6\n```\n\n```\n> (dec 0)\n! decrement-underflow\n! exit\n```\n\n```\n> (dec 'b')\n97\n> `@t`(dec 'b')\n'a'\n```\n\n```\n> (dec 0xc)\n11\n> `@ux`(dec 0xc)\n0xb\n```\n\n---\n",
    "div": "## `++div`\n\nDivide\n\nComputes `a` divided by `b` without remainder.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nAn [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  div\n  ~/  %div\n  |:  [a=`@`1 b=`@`1]\n  ^-  @\n  ~_  leaf+\"divide-by-zero\"\n  ?<  =(0 b)\n  =+  c=0\n  |-\n  ?:  (lth a b)  c\n  $(a (sub a b), c +(c))\n```\n\n#### Examples\n\n```\n> (div 4 2)\n2\n```\n\n```\n> (div 17 8)\n2\n```\n\n```\n> (div 20 30)\n0\n```\n\n```\n> (div 'ab' 'a')\n259\n> `@`'ab'\n25.185\n> `@`a\n97\n```\n\n```\n> (div 0x9f 0x29)\n6\n```\n\n---\n",
    "dvr": "## `++dvr`\n\nDivide with remainder\n\nComputes `a` divided by `b`, producing the quotient and the remainder.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nA cell of [`atoms`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  dvr\n  ~/  %dvr\n  |=  [a=@ b=@]\n  ^-  [p=@ q=@]\n  [(div a b) (mod a b)]\n```\n\n#### Examples\n\n```\n> (dvr 17 8)\n[p=2 q=1]\n```\n\n```\n> (dvr 17 6)\n[p=2 q=5]\n```\n\n```\n> (dvr 18 6)\n[p=3 q=0]\n```\n\n```\n> (dvr 4 2)\n[p=2 q=0]\n```\n\n```\n> (dvr 'ab 'a')\n[p=259 q=62]\n> `@`'a'\n97\n> `@`'ab'\n25.185\n```\n\n---\n",
    "gte": "## `++gte`\n\nGreater-than/equal\n\nTests whether `a` is greater than or equal to `b`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  gte\n  ~/  %gte\n  |=  [a=@ b=@]\n  ^-  ?\n  !(lth a b)\n```\n\n#### Examples\n\n```\n> (gte 100 10)\n%.y\n```\n\n```\n> (gte 4 4)\n%.y\n```\n\n```\n> (gte 3 4)\n%.n\n```\n\n---\n",
    "gth": "## `++gth`\n\nGreater-than\n\nTests whether `a` is greater than `b`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  gth\n  ~/  %gth\n  |=  [a=@ b=@]\n  ^-  ?\n  !(lte a b)\n```\n\n#### Examples\n\n```\n> (gth 'd' 'c')\n%.y\n```\n\n```\n> (gth ~h1 ~m61)\n%.n\n```\n\n```\n> (gth 'steak' 'brisket')\n%.n\n```\n\n---\n",
    "lte": "## `++lte`\n\nLess-than/equal\n\nTests whether `a` is less than or equal to `b`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  lte\n  ~/  %lte\n  |=  [a=@ b=@]\n  |(=(a b) (lth a b))\n```\n\n#### Examples\n\n```\n> (lte 4 5)\n%.y\n```\n\n```\n> (lte 5 4)\n%.n\n```\n\n```\n> (lte 5 5)\n%.y\n```\n\n```\n> (lte 0 0)\n%.y\n```\n\n```\n> (lte 'a' 'b')\n%.y\n> `@`'a'\n97\n> `@`'b'\n98\n```\n\n```\n> (lte 'abraham' 'bob')\n%.n\n```\n\n```\n> (lte ~m61 ~h1)\n%.n\n```\n\n---\n",
    "lth": "## `++lth`\n\nLess-than\n\nTests whether `a` is less than `b`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  lth\n  ~/  %lth\n  |=  [a=@ b=@]\n  ^-  ?\n  ?&  !=(a b)\n      |-\n      ?|  =(0 a)\n          ?&  !=(0 b)\n              $(a (dec a), b (dec b))\n  ==  ==  ==\n```\n\n#### Examples\n\n```\n> (lth 4 5)\n%.y\n```\n\n```\n> (lth 5 4)\n%.n\n```\n\n```\n> (lth 5 5)\n%.n\n```\n\n```\n> (lth 5 0)\n%.n\n```\n\n```\n> (lth 'a' 'b')\n%.y\n> `@`'a'\n97\n> `@`'b'\n98\n```\n\n```\n> (lth 'abraham' 'bob')\n%.n\n```\n\n---\n",
    "max": "## `++max`\n\nMaximum\n\nComputes the greater of `a` and `b`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nAn [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  max\n  ~/  %max\n  |=  [a=@ b=@]\n  ^-  @\n  ?:  (gth a b)  a\n  b\n```\n\n#### Examples\n\n```\n> (max 10 100)\n100\n```\n\n```\n> (max 10.443 9)\n10.443\n```\n\n```\n> (max 1 1)\n1\n```\n\n```\n> (max 'abraham' 'bob')\n30.787.873.400.840.801\n```\n\n```\n> `@t`(max 'abraham' 'bob')\n'abraham'\n```\n\n```\n> `@t`(max 'abraham' 'benjamin')\n'benjamin'\n```\n\n```\n> `@dr`(max ~m6 ~h1)\n~h1\n```\n\n```\n>`@ux`(max 0xe1 0x1e)\n0xe1\n```\n\n---\n",
    "min": "## `++min`\n\nMinimum\n\nComputes the lesser of `a` and `b`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nAn [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  min\n  ~/  %min\n  |=  [a=@ b=@]\n  ^-  @\n  ?:  (lth a b)  a\n  b\n```\n\n#### Examples\n\n```\n> (min 10 100)\n10\n```\n\n```\n> (min 10.443 9)\n9\n```\n\n```\n> (min 1 1)\n1\n```\n\n```\n> (min 'abraham' 'bob')\n6.451.042\n```\n\n```\n> `@t`(min 'abraham' 'bob')\n'bob'\n```\n\n```\n> `@t`(min 'abraham' 'benjamin')\n'abraham'\n```\n\n```\n> `@dr`(min ~m6 ~h1)\n~m6\n```\n\n---\n",
    "mod": "## `++mod`\n\nModulus\n\nComputes the remainder of dividing `a` by `b`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nAn [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  mod\n  ~/  %mod\n  |:  [a=`@`1 b=`@`1]\n  ^-  @\n  +:(dvr a b)\n```\n\n#### Examples\n\n```\n> (mod 5 2)\n1\n```\n\n```\n> (mod 5 5)\n0\n```\n\n```\n> (mod 2 5)\n2\n```\n\n```\n> (mod 40 20)\n0\n```\n\n```\n> `@`'c'\n99\n>`@`'a'\n97\n> (mod 'c' 'a')\n2\n```\n\n---\n",
    "mul": "## `++mul`\n\nMultiply\n\nMultiplies `a` by `b`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nAn [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  mul\n  ~/  %mul\n  |:  [a=`@`1 b=`@`1]\n  ^-  @\n  =+  c=0\n  |-\n  ?:  =(0 a)  c\n  $(a (dec a), c (add b c))\n```\n\n#### Examples\n\n```\n> (mul 3 4)\n12\n```\n\n```\n> (mul 0 1)\n0\n```\n\n```\n> `@`'a'\n97\n> `@`'b'\n98\n> (mul 'a' 'b')\n9.506\n```\n\n```\n>`@ux`(mul 0x1f 0xe)\n0x1b2\n```\n\n---\n",
    "sub": "## `++sub`\n\nSubtract\n\nSubtracts `b` from `a`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nAn [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  sub\n  ~/  %sub\n  |=  [a=@ b=@]\n  ~_  leaf+\"subtract-underflow\"\n  ^-  @\n  ?:  =(0 b)  a\n  $(a (dec a), b (dec b))\n```\n\n#### Examples\n\n```\n> (sub 10 5)\n5\n```\n\n```\n> (sub 243 44)\n199\n```\n\n```\n> (sub 5 0)\n5\n```\n\n```\n> (sub 0 5)\n! subtract-underflow\n! exit\n```\n\n```\n> (sub 'c' 'a')\n2\n> `@`'c'\n99\n> `@`'a'\n97\n```\n\n```\n> (sub 0x1f 0xe)\n17\n> `@ux`(sub 0x1f 0xe)\n0x11\n```\n",
    "cap": "## `++cap`\n\nTree head\n\nTests whether the tree address `a` is in the head or the tail of a [`noun`](/reference/glossary/noun).\nProduces the constant [`atom`](/reference/glossary/atom) `%2` if it is within the head (subtree `+2`), or\nthe constant [`atom`](/reference/glossary/atom) `%3` if it is within the tail (subtree `+3`).\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nA constant [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  cap\n  ~/  %cap\n  |=  a=@\n  ^-  ?(%2 %3)\n  ?-  a\n    %2        %2\n    %3        %3\n    ?(%0 %1)  !!\n    *         $(a (div a 2))\n  ==\n```\n\n#### Examples\n\n```\n> (cap 4)\n%2\n```\n\n```\n> (cap 6)\n%3\n```\n\n```\n> (cap (add 10 9))\n%2\n```\n\n```\n> (cap 1)    ::address '1' is in neither the head nor the tail\n! exit\n```\n\n```\n> (cap 0x40))\n%2\n> `@`0x40\n64\n```\n\n```\n> (cap 'a')\n%3\n> `@`'a'\n97\n```\n\n---\n",
    "mas": "## `++mas`\n\nAddress within head/tail\n\nComputes the tree address of [`atom`](/reference/glossary/atom) `a` within either the head (`+2`) or tail\n(`+3`) of a [`noun`](/reference/glossary/noun).\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nAn [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  mas\n  ~/  %mas\n  |=  a=@\n  ^-  @\n  ?-  a\n    ?(%2 %3)  1\n    ?(%0 %1)  !!\n    *         (add (mod a 2) (mul $(a (div a 2)) 2))\n  ==\n```\n\n#### Examples\n\n```\n> (mas 3)\n1\n```\n\n```\n> (mas 4)\n2\n```\n\n```\n> (mas 5)\n3\n> (cap 5)    ::`(cap a)` computes whether address `a` is in the head or the tail\n%2\n```\n\n```\n> (mas 7)\n3\n> (cap 7)\n%3\n```\n\n```\n> (mas 11)\n7\n```\n\n```\n> (mas (mas 11))\n3\n```\n\n```\n> (cap (mas 6))\n%3\n```\n\n```\n> (mas 0)    ::address `0` is in neither the head nor the tail\n! exit\n```\n\n```\n> (mas 1)    ::address `1` is in neither the head nor the tail\n! exit\n```\n\n#### Discussion\n\n```\n            1\n          /   \\\n         /     \\\n        2       3              <--here are the head (`+2`) and the tail (`+3`)\n       / \\      /\\\n      4   5    6  7\n     /\\   /\\  /\\  /\\\n     (continues...)\n```\n\nRunning `(mas 7)` in the [`Dojo`](/reference/glossary/dojo) will return `3`, because address `+3` is what\n`+7` now occupies. The tree below helps illustrate the relationship. With\nparentheses are `a` values (if `a` is in subtree `+3`), and without parentheses\nare the values returned with `(mas a)`.\n\n```\n            1(3)                       ::new/(old) addresses\n           /    \\\n          2       3\n         (6)     (7)\n        / \\       /\\\n       /   \\     /  \\\n      4     5   6    7\n     (12) (13) (14) (15)\n    / \\    / \\ / \\   / \\\n       (continues...)\n```\n\nNotice how the old values in the head (subtree `+2`) were not illustrated in\nthis case, because `+7` is within the tail (subtree `+3`).\n\n---\n",
    "peg": "## `++peg`\n\nAddress within address\n\nComputes the absolute address of `b`, a relative address within the subtree\n`a`.\n\n#### Accepts\n\n`a` is an [`atom`](/reference/glossary/atom).\n\n`b` is an [`atom`](/reference/glossary/atom).\n\n#### Produces\n\nAn [`atom`](/reference/glossary/atom).\n\n#### Source\n\n```hoon\n++  peg\n  ~/  %peg\n  |=  [a=@ b=@]\n  ?<  =(0 a)\n  ^-  @\n  ?-  b\n    %1  a\n    %2  (mul a 2)\n    %3  +((mul a 2))\n    *   (add (mod b 2) (mul $(b (div b 2)) 2))\n  ==\n```\n\n#### Examples\n\n```\n> (peg 4 1)\n4\n```\n\n```\n> (peg 1 4)\n4\n```\n\n```\n> (peg 4 2)\n8\n```\n\n```\n> (peg 4 8)\n32\n```\n\n```\n> (peg 4 (peg 4 2))\n32\n```\n\n```\n> (peg 8 45)\n269\n```\n\n```\n> (cap (peg 4 2))    ::`(cap a)` computes whether address `a` is in the head or the tail\n%2\n```\n\n#### Discussion\n\nIn other words, the subtree at address `a` is treated as a tree in its own\nright (starting with root `+1`, head `+2`, and tail `+3`). Relative address\n`b` is found with respect to `a`, and then its absolute address, within the\ngreater tree, is returned.\n\nRunning `(peg 3 4)` in the [`Dojo`](/reference/glossary/dojo), for example, will return `12`. Looking at\na tree diagram makes it easy to see why.\n\n```\n                 1\n              /     \\\n             /       \\\n            /         \\\n           2           3       <- here is the subtree `+3`. The subtree address is `a` in `(peg a b)`\n          / \\         / \\\n         /   \\       /   \\\n        4     5     6     7\n       / \\   / \\   / \\   / \\\n      8  9  10 11 12 13 14  15\n     /\\  /\\ /\\ /\\ /\\ /\\ /\\  /\\\n         (continues...)\n```\n\nWhen we consider subtree at address `+3` by itself, it has relative addresses\nthat are structured in the same way as its parent tree's absolute addresses.\nThe absolute addresses are given in parentheses in the diagram below.\nNotice how relative address `+4` is at the same position as absolute address\n`+12`.\n\n```\n            1(3)                        ::new/(old) addresses\n           /    \\\n          2       3\n         (6)     (7)\n        / \\       /\\\n       /   \\     /  \\\n      4     5   6    7\n    (12) (13) (14)  (15)\n    / \\    / \\ / \\   / \\\n       (continues...)\n```\n\n---\n",
    "bite": "## `+$bite`\n\nAtom slice specifier.\n\nEither a single atom representing block size, or a cell containing a block size\nand an atom representing the number of blocks, called `step`. If `step` is not\nsupplied, it defaults to a value of 1.\n\n#### Source\n\n```hoon\n    +$  bite  $@(bloq [=bloq =step])\n```\n\n#### Examples\n\n```\n    ::  ++end gets the least significant bits of an atom.\n\n    > (end [1 1] 255)\n    3\n\n    > (end 1 255)\n    3\n\n    > (end 3 255)\n    255\n\n    > (end 3 65.535)\n    255\n\n    > (end [3 2] 65.535)\n    65.535\n\n    > (end [3 0] 65.535)\n    0\n```\n",
    "bloq": "## `+$bloq`\n\nBlocksize\n\n[`Atom`](/reference/glossary/atom) representing block size. A block of size `a` has a bitwidth of `2^a`.\n\n#### Source\n\n```hoon\n    ++  bloq  @\n```\n\n#### Examples\n\n```\n    ::  ++met measures how many a-bloqs long an atom is.\n\n    > (met 3 256)\n    2\n\n    > (met 3 255)\n    1\n\n    > (met 3 65.535)\n    2\n\n    > (met 2 65.536)\n    > 3\n\n    > (met 0 4)\n    3\n\n    > (met 1 4)\n    2\n\n    > (met 5 9.999.999.999)\n    2\n\n    > (met 2 0xb5)\n    2\n```\n\n#### Discussion\n\nYou can think of `bloq` as a numeral system that can represent values of\n`a^2^2`, where `a` is the block size. That's because a block of size\n`a` contains `a^2` bits, and a binary number that is `b` bits wide can represent\n`b^2` values.\n\nA `bloq` of 0 has a bitwidth of 1. (2^0 bits; can represent 2 values.)\n\nA `bloq` of 1 has a bitwidth of 2. (2^1 bits; can represent 4 values.)\n\nA `bloq` of 2 has a bitwidth of 4. (2^2 bits; can represent 16 values.)\n\nA `bloq` of 3 has a bitwidth of 8. (2^3 bits; can represent 256 values.)\n\nAnd so on.\n\nSee the [bit arithmetic](/reference/hoon/stdlib/2c) section for operations that use `bloq`s.\n\n---\n",
    "each": "## `++each`\n\nMold of fork between two types\n\nA mold generator. Produces a discriminated fork between two types, defaulting to\n`this`.\n\n#### Source\n\n```hoon\n++  each\n  |$  [this that]\n  $%  [%| p=that]\n      [%& p=this]\n  ==\n```\n\n#### Examples\n\n```\n> ? *(each cord time)\n  ?([%.y p=@t] [%.n p=@da])\n[%.y p='']\n```\n\n```\n> ? *(each * tape)\n  ?([%.y p=*] [%.n p=\"\"])\n[%.y p=0]\n```\n\n---\n",
    "gate": "## `++gate`\n\nFunction\n\nA [`core`](/reference/glossary/core) with one arm, `$`--the empty name--which transforms a sample noun into a\nproduct noun. If used dryly as a type, the subject must have a sample type of\n`*`.\n\n#### Source\n\n```hoon\n    ++  gate\n      $-(* *)\n```\n\n#### Examples\n\n```\n> ? gate\n  <1.ddq [* <46.hgz 1.pnw %140>]>\n<1.ddq [* <46.hgz 1.pnw %140>]>\n```\n\n```\n> (`gate`|=(a=* [a 'b']) 1)\n[1 98]\n```\n\n```\n> (`gate`|=(a=@ [a 'b']) 1)\nmint-nice\n-need.@\n-have.*\nnest-fail\ndojo: hoon expression failed\n```\n\n#### Discussion\n\nA `gate` is analogous to a function in other programming languages. We created\nthis new jargon because other constructs in Urbit are \"functions\" in the\nmathematical sense. Any `gate` normalizes to an iron `gate`.\n\nSee also: [`++lift`](/reference/hoon/stdlib/2a#lift), [`++cork`](/reference/hoon/stdlib/2n#cork)\n\n---\n",
    "list": "## `++list`\n\nList\n\nA mold generator. Generates a mold of a null-terminated list of a\nhomogenous type.\n\n#### Source\n\n```hoon\n++  list\n  |$  [item]\n  $@(~ [i=item t=(list item)])\n```\n\n#### Examples\n\n```\n> *(list)\n~\n```\n\n```\n> `(list @)`\"abc\"\n~[97 98 99]\n```\n\n```\n> (snag 0 \"abc\")\n'a'\n```\n\n```\n> `(list @)`[1 2 'j' ~]\n~[1 2 106]\n```\n\n#### Discussion\n\nSee also: [`++turn`](/reference/hoon/stdlib/2b#turn), [`++snag`](/reference/hoon/stdlib/2b#snag)\n\n---\n",
    "lone": "## `++lone`\n\nFace on mold\n\nA mold generator. Puts face of `p` on the passed-in mold.\n\n#### Source\n\n```hoon\n++  lone\n  |$  [item]\n  p=item\n```\n\n#### Examples\n\n```\n> ? *cord\n@t\n''\n```\n\n```\n> ? *(lone cord)\n  p=@t\np=''\n```\n\n```\n> ? *(lone @)\n  p=@\np=0\n```\n\n```\n> ? *@\n  @\n0\n```\n\n---\n",
    "pair": "## `++pair`\n\nMold of pair of types\n\nA mold generator. Produces a tuple of two of the types passed in.\n\n#### Source\n\n```hoon\n++  pair\n  |$  [head tail]\n  [p=head q=tail]\n```\n\n#### Examples\n\n```\n> *(pair ? cord)\n[p=%.y q='']\n```\n\n```\n> *(pair tape @)\n[p=\"\" q=0]\n```\n\n---\n",
    "pole": "## `++pole`\n\nFaceless [`list`](/reference/hoon/stdlib/1c#list)\n\nA mold generator. A [`list`](/reference/hoon/stdlib/1c#list) without the faces `i` and `t`.\n\n#### Source\n\n```hoon\n++  pole\n  |$  [item]\n  $@(~ [item (pole item)])\n```\n\n#### Examples\n\n```\n> =/(a \"asdf\" ?>(?=(^ a) `(lest @tD)`a))\n[i='a' t=[i='s' t=[i='d' t=[i='f' t=~]]]]\n```\n\n```\n> `(pole char)`\"asdf\"\n['a' ['s' ['d' ['f' ~]]]]\n```\n\n---\n",
    "qual": "## `++qual`\n\nMold of 4-type tuple\n\nA mold generator. Produces a tuple of four of the types passed in.\n\n#### Source\n\n```hoon\n++  qual\n  |$  [first second third fourth]\n  [p=first q=second r=third s=fourth]\n```\n\n#### Examples\n\n```\n> *(qual date time tape cord)\n[p=[[a=%.y y=0] m=0 t=[d=0 h=0 m=0 s=0 f=~]] q=~2000.1.1 r=\"\" s='']\n```\n\n```\n> *(qual (list @) @u @ud @ux)\n[p=~ q=0 r=0 s=0x0]\n```\n\n---\n",
    "quip": "## `++quip`\n\nMold of pair of [`list`](/reference/hoon/stdlib/1c#list) and type\n\nA mold generator. Produces a tuple of a [`list`](/reference/hoon/stdlib/1c#list) of `item` and the mold of `state`.\n\n#### Source\n\n```hoon\n++  quip\n  |$  [item state]\n  [(list item) state]\n```\n\n#### Examples\n\n```\n> *(quip @ _'hi')\n[~ 'hi']\n```\n\n```\n> `(quip @ @ux)`[[1 2 3 4 ~] 0x10]\n[~[1 2 3 4] 0x10]\n```\n\n#### Discussion\n\nA common pattern in Hoon code is to return a `list` of changes, along with a\nnew state. You'll often see `quip` used in Gall apps.\n\n---\n",
    "step": "## `++step`\n\nAtom size or offset, in [bloq](#bloq)s.\n\n#### Source\n\n```\n++  step\n  _`@u`1\n```\n\n#### Examples\n\n```\n> `step`0\n0\n```\n\n```\n> `step`2\n2\n```\n\n---\n",
    "trap": "## `++trap`\n\n[`Core`](/reference/glossary/core) with one arm `$`\n\nA trap is a [`core`](/reference/glossary/core) with one arm `$`.\n\n#### Source\n\n```hoon\n++  trap\n  |$  [product]\n  _|?($:product)\n```\n\n#### Examples\n\n```\n> (*trap)\n<1?ruo 1.mhl [product=<1|xpg [* * *]> <46.hgz 1.pnw %140>]>\n```\n\n```\n> *(*trap)\n0\n```\n\n```\n> (|.(42))\n42\n```\n\n---\n",
    "tree": "## `++tree`\n\nTree mold generator\n\nA mold generator. A `tree` can be empty, or contain a node of a type and\nleft/right sub `tree` of the same type. Pretty-printed with `{}`.\n\n#### Source\n\n```hoon\n++  tree\n  |$  [node]\n  $@(~ [n=node l=(tree node) r=(tree node)])\n```\n\n#### Examples\n\n```\n> `(tree [@ tape])`[[1 \"hi\"] [[2 \"bye\"] ~ ~] ~]\n{[2 \"bye\"] [1 \"hi\"]}\n```\n\n---\n",
    "trel": "## `++trel`\n\nMold of three types\n\nA mold generator. A mold of the tuple of the three types passed in.\n\n#### Source\n\n```hoon\n++  trel\n  |$  [first second third]\n  [p=first q=second r=third]\n```\n\n#### Examples\n\n```\n> *(trel @ud @t @s)\n[p=0 q='' r=--0]\n```\n\n```\n> *(trel cord bloq tape)\n[p='' q=0 r=\"\"]\n```\n\n---\n",
    "unit": "## `++unit`\n\nMaybe\n\nA mold generator. A `unit` is either `~` or `[~ u=item]`, where `item` is the\ntype that was passed in.\n\n#### Source\n\n```hoon\n++  unit\n  |$  [item]\n  $@(~ [~ u=item])\n```\n\n#### Examples\n\n```\n> ? *(unit time)\n  u(@da)\n~\n```\n\n```\n> =a |=  a=@\n  ^-  (unit @)\n  ?~  a  ~\n  [~ a]\n> (a 2)\n[~ 2]\n```\n\n#### Discussion\n\nUsing a `unit` allows you to specify something that may not be there.\n\nSee also: [`++bind`](/reference/hoon/stdlib/2a#bind)\n\n---\n",
    "biff": "## `++biff`\n\n[`Unit`](/reference/hoon/stdlib/1c#unit) as argument\n\nApplies a function `b` that produces a [`unit`](/reference/hoon/stdlib/1c#unit) to the unwrapped value of [`unit`](/reference/hoon/stdlib/1c#unit)\n`a` (`u.a`). If `a` is empty, `~` is produced.\n\n#### Accepts\n\n`a` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n`b` is a function that accepts a [`noun`](/reference/glossary/noun) and produces a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Produces\n\nA [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Source\n\n```hoon\n++  biff\n  |*  [a=(unit) b=$-(* (unit))]\n  ?~  a  ~\n  (b u.a)\n```\n\n#### Examples\n\n```\n> (biff (some 5) |=(a=@ (some (add a 2))))\n[~ u=7]\n```\n\n```\n> (biff ~ |=(a=@ (some (add a 2))))\n~\n```\n\n---\n",
    "bind": "## `++bind`\n\nNon-unit function to [`unit`](/reference/hoon/stdlib/1c#unit), producing [`unit`](/reference/hoon/stdlib/1c#unit)\n\nApplies a function `b` to the value (`u.a`) of a [`unit`](/reference/hoon/stdlib/1c#unit) `a`, producing\na [`unit`](/reference/hoon/stdlib/1c#unit). Used when you want a function that does not accept or produce a\n[`unit`](/reference/hoon/stdlib/1c#unit) to both accept and produce a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Accepts\n\n`a` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n`b` is a function.\n\n#### Produces\n\nA [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Source\n\n```hoon\n++  bind\n  |*  [a=(unit) b=gate]\n  ?~  a  ~\n  [~ u=(b u.a)]\n```\n\n#### Examples\n\n```\n> (bind ((unit @) [~ 97]) ,@t)\n[~ u='a']\n```\n\n```\n> =a |=(a=@ (add a 1))\n> (bind ((unit @) [~ 2]) a)\n[~ u=3]\n```\n\n---\n",
    "bond": "## `++bond`\n\nReplace null\n\nReplaces an empty [`unit`](/reference/hoon/stdlib/1c#unit) `b` with the product of a called [`trap`](/reference/glossary/trap)\n`a`. If the [`unit`](/reference/hoon/stdlib/1c#unit) is not empty, then the original [`unit`](/reference/hoon/stdlib/1c#unit) is produced.\n\n#### Accepts\n\n`a` is a [`trap`](/reference/glossary/trap).\n\n`b` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Produces\n\nEither the product of `a` or the value inside of [`unit`](/reference/hoon/stdlib/1c#unit) `b`.\n\n#### Source\n\n```hoon\n++  bond\n  |*  a=(trap)\n  |*  b=(unit)\n  ?~  b  $:a\n  u.b\n```\n\n#### Examples\n\n```\n    > (bex 10)\n    1.024\n    > ((bond |.((bex 10))) ~)\n    1.024\n```\n\n```\n    > ((bond |.((bex 10))) (slaw %ud '123'))\n    123\n```\n\n---\n",
    "both": "## `++both`\n\nGroup [`unit`](/reference/hoon/stdlib/1c#unit) values into pair\n\nProduces `~` if either `a` or `b` are empty. Otherwise, produces a\n[`unit`](/reference/hoon/stdlib/1c#unit) whose value is a cell of the values of two input [`units`](/reference/hoon/stdlib/1c#unit) `a` and\n`b`.\n\n#### Accepts\n\n`a` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n`b` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Produces\n\nA [`unit`](/reference/hoon/stdlib/1c#unit) of the two initial values.\n\n#### Source\n\n```hoon\n++  both\n  |*  [a=(unit) b=(unit)]\n  ?~  a  ~\n  ?~  b  ~\n  [~ u=[u.a u.b]]\n```\n\n#### Examples\n\n```\n> (both (some 1) (some %b))\n[~ u=[1 %b]]\n```\n\n```\n> (both ~ (some %b))\n~\n```\n\n---\n",
    "clap": "## `++clap`\n\nCombine two [`units`](/reference/hoon/stdlib/1c#unit) with function\n\nApplies a binary function `c`--which does not usually accept or produce a\n[`unit`](/reference/hoon/stdlib/1c#unit)-- to the values of two [`units`](/reference/hoon/stdlib/1c#unit), `a` and `b`, producing a [`unit`](/reference/hoon/stdlib/1c#unit).\n\nIf `a` is null, produces `b`. If `b` is null, produces `a`. Otherwise, produces the produce of `c` in a `unit`.\n\n#### Accepts\n\n`a` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n`b` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n`c` is a function that performs a binary operation.\n\n#### Produces\n\nA [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Source\n\n```hoon\n++  clap\n  |*  [a=(unit) b=(unit) c=_=>(~ |=(^ +<-))]\n  ?~  a  b\n  ?~  b  a\n  [~ u=(c u.a u.b)]\n```\n\n#### Examples\n\n```\n> (clap ~ `'b' |=([a=@tD b=@tD] `tape`[a b ~]))\n[~ u='b']\n```\n\n```\n> (clap `'a' ~ |=([a=@tD b=@tD] `tape`[a b ~]))\n[~ u='a']\n```\n\n```\n> (clap `'a' `'b' |=([a=@tD b=@tD] `tape`[a b ~]))\n[~ u=\"ab\"]\n```\n\n---\n",
    "clef": "## `++clef`\n\nCompose two [`units`](/reference/hoon/stdlib/1c#unit) with function\n\nApplies a binary function `c`--which does not usually accept [`units`](/reference/hoon/stdlib/1c#unit)-- to the values of two [`units`](/reference/hoon/stdlib/1c#unit), `a` and `b`, producing a [`unit`](/reference/hoon/stdlib/1c#unit).\n\nIf `a` or `b` are null, produces null. Otherwise, produces the produce of `c`.\n\n#### Accepts\n\n`a` is a `unit`.\n\n`b` is a `unit`.\n\n`c` is a `gate` that takes a `cell` and produces a `unit`.\n\n#### Produces\n\nA `unit`.\n\n#### Source\n\n```hoon\n++  clef\n  |*  [a=(unit) b=(unit) c=_=>(~ |=(^ `+<-))]\n  ?~  a  ~\n  ?~  b  ~\n  (c u.a u.b)\n```\n\n#### Examples\n\n```\n> (clef ~ `'b' |=([a=@tD b=@tD] `(unit tape)`[~ [a b ~]]))\n~\n```\n\n```\n> (clef `'a' ~ |=([a=@tD b=@tD] `(unit tape)`[~ [a b ~]]))\n~\n```\n\n```\n> (clef `'a' `'b' |=([a=@tD b=@tD] `(unit tape)`[~ [a b ~]]))\n[~ \"ab\"]\n```\n\n---\n",
    "drop": "## `++drop`\n\n[`Unit`](/reference/hoon/stdlib/1c#unit) to list\n\nMakes a [`++list`](/reference/hoon/stdlib/1c#list) of the unwrapped value (`u.a`) of a [`unit`](/reference/hoon/stdlib/1c#unit) `a`.\n\n#### Accepts\n\n`a` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  drop\n  |*  a=(unit)\n  ?~  a  ~\n  [i=u.a t=~]\n```\n\n#### Examples\n\n```\n> =a ((unit @) [~ 97])\n> (drop a)\n[i=97 t=~]\n```\n\n```\n> =a ((unit @) [~])\n> (drop a)\n~\n```\n\n---\n",
    "fall": "## `++fall`\n\nGive [`unit`](/reference/hoon/stdlib/1c#unit) a default value\n\nProduces a default value `b` for a [`unit`](/reference/hoon/stdlib/1c#unit) `a` in cases where `a` is null.\n\n#### Accepts\n\n`a` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n`b` is a [`noun`](/reference/glossary/noun) that's used as the default value.\n\n#### Produces\n\nEither a [`noun`](/reference/glossary/noun) `b` or the unwrapped value of [`unit`](/reference/hoon/stdlib/1c#unit) `a`.\n\n#### Source\n\n```hoon\n++  fall\n  |*  [a=(unit) b=*]\n  ?~(a b u.a)\n```\n\n#### Examples\n\n```\n> (fall ~ 'a')\n'a'\n> (fall [~ u=0] 'a')\n0\n```\n\n---\n",
    "flit": "## `++flit`\n\nMake filter\n\nAccepts gate `a` which produces a `?`. Applies `a` to `b`, producing `b` wrapped in a `unit` if true, otherwise produces null.\n\n`+flit` is a wet gate that takes `a` and produces a new wet gate that takes `b`.\n\n#### Accepts\n\n`a` is a `gate` which produces `?`, and is the sample of the outer wet gate.\n\n`b` is any `noun`, and is the sample of the inner wet gate.\n\n#### Produces\n\n`(unit [type])`, where `[type]` is the type of `b`.\n\n#### Source\n\n```hoon\n++  flit\n  |*  a=$-(* ?)\n  |*  b=*\n  ?.((a b) ~ [~ u=b])\n```\n\n#### Examples\n\n```\n> =f (flit |=(=@ud ?:(=(ud 1) %.y %.n)))\n> (f 1)\n[~ 1]\n> (f 2)\n~\n```\n\n---\n",
    "hunt": "## `++hunt`\n\nFirst of units\n\nApply binary gate `ord`, which produces a `?`, to units `a` and `b`. Produce `a` if true and `b` if false. If `a` is null, produce `b`. If `b` is null, produce `a`.\n\nThis allows selecting between two units by some rule.\n\n#### Accepts\n\n`ord` is a `$-(^ ?)` - a binary gate that produces `?`.\n\n`a` is a `unit`.\n\n`b` is a `unit`.\n\n#### Produces\n\nA `unit`.\n\n#### Source\n\n```hoon\n++  hunt\n  |*  [ord=$-(^ ?) a=(unit) b=(unit)]\n  ^-  %-  unit\n      $?  _?>(?=(^ a) u.a)\n          _?>(?=(^ b) u.b)\n      ==\n  ?~  a  b\n  ?~  b  a\n  ?:((ord u.a u.b) a b)\n```\n\n#### Examples\n\n```\n> (hunt gte ~ `20)\n[~ 20]\n```\n\n```\n> (hunt gte `10 ~)\n[~ 10]\n```\n\n```\n> (hunt gte `10 `20)\n[~ 20]\n```\n\n---\n",
    "lift": "## `++lift`\n\nCurried bind\n\nAccepts function `a` and produces a function that accepts [`unit`](/reference/hoon/stdlib/1c#unit)\n`b` to which it applies `a`. Used when you want a function that does not accept\nor produce a [`unit`](/reference/hoon/stdlib/1c#unit) to both accept and produce a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Accepts\n\n`a` is a `mold`.\n\n`b` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Produces\n\nA [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Source\n\n```hoon\n++  lift\n  |*  a=mold\n  |*  b=(unit)\n  (bind b a)\n```\n\n#### Examples\n\n```\n> ((lift dec) `(unit @)`~)\n~\n```\n\n```\n> ((lift dec) `(unit @)`[~ 20])\n[~ 19]\n```\n\n---\n",
    "mate": "## `++mate`\n\nChoose\n\nAccepts two [`units`](/reference/hoon/stdlib/1c#unit) `a` and `b` whose values are expected to be\nequivalent. If either is empty, then the value of the other is produced.\nIf neither are empty, it asserts that both values are the same and\nproduces that value. If the assertion fails, `++mate` crashes with\n`'mate'` in the stack trace.\n\n#### Accepts\n\n`a` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n`b` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Produces\n\nA [`unit`](/reference/hoon/stdlib/1c#unit) or crash.\n\n#### Source\n\n```hoon\n++  mate\n  |*  [a=(unit) b=(unit)]\n  ?~  b  a\n  ?~  a  b\n  ?.(=(u.a u.b) ~>(%mean.'mate' !!) a)\n```\n\n#### Examples\n\n```\n> =a ((unit @) [~ 97])\n> =b ((unit @) [~ 97])\n> (mate a b)\n[~ 97]\n```\n\n```\n> =a ((unit @) [~ 97])\n> =b ((unit @) [~])\n> (mate a b)\n[~ 97]\n```\n\n```\n> =a ((unit @) [~ 97])\n> =b ((unit @) [~ 98])\n> (mate a b)\n! 'mate'\n! exit\n```\n\n---\n",
    "need": "## `++need`\n\nUnwrap [`unit`](/reference/hoon/stdlib/1c#unit)\n\nRetrieve the value from a [`unit`](/reference/hoon/stdlib/1c#unit) and crash if the [`unit`](/reference/hoon/stdlib/1c#unit) is null.\n\n#### Accepts\n\n`a` is a [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Produces\n\nEither the unwrapped value of `a` (`u.a`), or crash.\n\n#### Source\n\n```hoon\n++  need\n  ~/  %need\n  |*  a=(unit)\n  ?~  a  ~>(%mean.'need' !!)\n  u.a\n```\n\n#### Examples\n\n```\n> =a ((unit [@t @t]) [~ ['a' 'b']])\n> (need a)\n['a' 'b']\n```\n\n```\n> =a ((unit @ud) [~ 17])\n> (need a)\n17\n```\n\n```\n> =a ((unit @) [~])\n> (need a)\n! exit\n```\n\n---\n",
    "some": "## `++some`\n\nWrap value in a [`unit`](/reference/hoon/stdlib/1c#unit)\n\nTakes any [`noun`](/reference/glossary/noun) `a` and produces a [`unit`](/reference/hoon/stdlib/1c#unit) with the value set to `a`.\n\n#### Accepts\n\n`a` is a [`noun`](/reference/glossary/noun).\n\n#### Produces\n\nA [`unit`](/reference/hoon/stdlib/1c#unit).\n\n#### Source\n\n```hoon\n++  some\n  |*  a=*\n  [~ u=a]\n```\n\n#### Examples\n\n```\n> (some ['a' 'b'])\n[~ u=['a' 'b']]\n```\n\n```\n> (some &)\n[~ u=%.y]\n```\n\n---\n",
    "bake": "## `++bake`\n\n**Note:** This function isn't specifically a list function but is included in section 2b of the standard library so is documented here for completeness.\n\nConvert wet gate `f` to a dry gate by specifying argument mold `a`.\n\n`+bake` is a wet gate that takes a wet gate and produces a dry gate.\n\n#### Accepts\n\n`f` is a `gate`.\n\n`a` is a `mold`.\n\n#### Produces\n\nA dry `gate` whose sample type is `a`.\n\n#### Source\n\n```hoon\n++  bake\n  |*  [f=gate a=mold]\n  |=  arg=a\n  (f arg)\n```\n\n#### Examples\n\n```\n> =wet-gate |*(a=* [a a])\n> (wet-gate 42)\n[42 42]\n> (wet-gate ['foo' 'bar'])\n[['foo' 'bar'] 'foo' 'bar']\n> =dry-gate (bake wet-gate @ud)\n> (dry-gate 42)\n[42 42]\n> (dry-gate ['foo' 'bar'])\n-need.@ud\n-have.[@t @t]\nnest-fail\n```\n\n---\n",
    "fand": "## `++fand`\n\nAll indices in `list`\n\nProduces the indices of all occurrences of `nedl` in `hstk` as a `list` of\natoms.\n\n#### Accepts\n\n`nedl` is a list.\n\n`hstk` is a list.\n\n#### Produces\n\nA `list`.\n\n#### Source\n\n```hoon\n++  fand\n  ~/  %fand\n  |=  [nedl=(list) hstk=(list)]\n  =|  i=@ud\n  =|  fnd=(list @ud)\n  |-  ^+  fnd\n  =+  [n=nedl h=hstk]\n  |-\n  ?:  |(?=(~ n) ?=(~ h))\n    (flop fnd)\n  ?:  =(i.n i.h)\n    ?~  t.n\n      ^$(i +(i), hstk +.hstk, fnd [i fnd])\n    $(n t.n, h t.h)\n  ^$(i +(i), hstk +.hstk)\n```\n\n#### Examples\n\n```\n> (fand ~[3] ~[1 2 3])\n~[2]\n```\n\n```\n> (fand ~[4] ~[1 2 3])\n~\n```\n\n```\n> (fand ~['a'] \"cbabab\")\n~[2 4]\n```\n\n```\n> (fand \"ba\" \"cbabab\")\n~[1 3]\n```\n\n---\n",
    "find": "## `++find`\n\nFirst index in `list`\n\nProduces the index of the first occurrence of `nedl` in `hstk` as the `unit`\nof an atom.\n\n#### Accepts\n\n`nedl` is a list.\n\n`hstk` is a list.\n\n#### Produces\n\nThe `unit` of an atom.\n\n#### Source\n\n```hoon\n++  find\n  ~/  %find\n  |=  [nedl=(list) hstk=(list)]\n  =|  i=@ud\n  |-   ^-  (unit @ud)\n  =+  [n=nedl h=hstk]\n  |-\n  ?:  |(?=(~ n) ?=(~ h))\n     ~\n  ?:  =(i.n i.h)\n    ?~  t.n\n      `i\n    $(n t.n, h t.h)\n  ^$(i +(i), hstk +.hstk)\n```\n\n#### Examples\n\n```\n> (find [3]~ ~[1 2 3])\n[~ u=2]\n```\n\n```\n> (find [4]~ ~[1 2 3])\n~\n```\n\n```\n> (find ['c']~ \"cbabab\")\n[~ u=0]\n```\n\n```\n> (find \"ab\" \"cbabab\")\n[~ u=2]\n```\n\n```\n> (find \"bab\" \"cbabab\")\n[~ u=1]\n```\n\n---\n",
    "flop": "## `++flop`\n\nReverse\n\nProduces the `list` `a` in reverse order.\n\n#### Accepts\n\n`a` is a `list`.\n\n#### Produces\n\nA `list`.\n\n#### Source\n\n```hoon\n++  flop\n  ~/  %flop\n  |*  a=(list)\n  =>  .(a (homo a))\n  ^+  a\n  =+  b=`_a`~\n  |-\n  ?~  a  b\n  $(a t.a, b [i.a b])\n```\n\n#### Examples\n\n```\n> =a [1 2 3 ~]\n> (flop a)\n~[3 2 1]\n```\n\n```\n> (flop (flop a))\n~[1 2 3]\n```\n\n---\n",
    "gulf": "## `++gulf`\n\nList from range\n\nProduces a `list` composed of each consecutive integer starting from `a` and\nending with `b`. `a` and `b` are themselves included.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is an atom.\n\n#### Produces\n\na `list`.\n\n#### Source\n\n```hoon\n++  gulf\n  |=  [a=@ b=@]\n  ?>  (lte a b)\n  |-  ^-  (list @)\n  ?:(=(a +(b)) ~ [a $(a +(a))])\n```\n\n#### Examples\n\n```\n> (gulf 1 6)\n~[1 2 3 4 5 6]\n```\n\n```\n> `(list @t)`(gulf 99 106)\n<|c d e f g h i j|>\n```\n\n---\n",
    "homo": "## `++homo`\n\nHomogenize\n\nProduces a `list` whose type is a fork of all the contained types in the\nlist `a`. Used when you want to make all the types of the elements of a list the\nsame.\n\n#### Accepts\n\n`a` is a `list`.\n\n#### Produces\n\na `list`.\n\n#### Source\n\n```hoon\n++  homo\n  |*  a=(list)\n  ^+  =<  $\n    |@  ++  $  ?:(*? ~ [i=(snag 0 a) t=$])\n    --\n  a\n```\n\n#### Examples\n\n```\n> lyst\n[i=1 t=[i=97 t=[i=2 t=[i=98 t=[i=[~ u=10] t=~]]]]]\n> (homo lyst)\n~[1 97 2 98 [~ u=10]]\n```\n\n```\n> =a (limo [1 2 3 ~])\n> a\n[i=1 t=[i=2 t=[i=3 t=~]]]\n> (homo a)\n~[1 2 3]\n```\n\n---\n",
    "into": "## `++into`\n\nInsert item at index\n\nAccepts a `list` `a`, an atom `b`, and a noun `c`, producing the list of `a` with the item `c` inserted at index `b`.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a atom.\n\n`c` is a noun.\n\n#### Produces\n\nthe list of `a` with the item `c` inserted at index `b`.\n\n#### Source\n\n```hoon\n++  into\n  ~/  %into\n  |*  [a=(list) b=@ c=*]\n  ^+  a\n  (weld (scag b a) [c (slag b a)])\n```\n\n#### Examples\n\n```\n> (into (limo ~[2 3 4]) 1 11)\n~[2 11 3 4]\n```\n\n---\n",
    "join": "## `++join`\n\nConstructs a new `list`, placing `sep` between every element of `lit`.\n\n#### Accepts\n\n`sep` is a `noun`.\n\n`lit` is a `list`.\n\n#### Produces\n\na `list`.\n\n#### Source\n\n```hoon\n++  join\n  |*  [sep=* lit=(list)]\n  =.  sep  `_?>(?=(^ lit) i.lit)`sep\n  ?~  lit  ~\n  =|  out=(list _?>(?=(^ lit) i.lit))\n  |-  ^+  out\n  ?~  t.lit\n    (flop [i.lit out])\n  $(out [sep i.lit out], lit t.lit)\n```\n\n#### Examples\n\n```\n> (join ' ' \"hoon\")\n\"h o o n\"\n```\n\n```\n> (join 0 `(list @)`~[1 2 3])\n~[1 0 2 0 3]\n```\n\n---\n",
    "lent": "## `++lent`\n\nList length\n\nProduces the length of any `list` `a` as an atom.\n\n#### Accepts\n\n`a` is a `list`.\n\n#### Produces\n\nan atom.\n\n#### Source\n\n```hoon\n++  lent\n  ~/  %lent\n  |=  a=(list)\n  ^-  @\n  =+  b=0\n  |-\n  ?~  a  b\n  $(a t.a, b +(b))\n```\n\n#### Examples\n\n```\n> (lent [1 2 3 4 ~]))\n4\n```\n\n```\n> (lent [1 'a' 2 'b' (some 10) ~])\n5\n```\n\n---\n",
    "levy": "## `++levy`\n\nLogical \"and\" on list\n\nComputes the Boolean logical \"and\" on the results of gate `b` applied to each individual element in `list` `a`.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a gate.\n\n#### Produces\n\nA boolean.\n\n#### Source\n\n```hoon\n++  levy\n  ~/  %levy\n  |*  [a=(list) b=$-(* ?)]\n  |-  ^-  ?\n  ?~  a  &\n  ?.  (b i.a)  |\n  $(a t.a)\n```\n\n#### Examples\n\n```\n> =a |=(a=@ (lte a 1))\n> (levy `(list @)`[0 1 2 1 ~] a)\n%.n\n```\n\n```\n> =a |=(a=@ (lte a 3))\n> (levy `(list @)`[0 1 2 1 ~] a)\n%.y\n```\n\n---\n",
    "lien": "## `++lien`\n\nLogical \"or\" on list\n\nComputes the Boolean logical \"or\" on the results of applying `gate` `b` to\nevery element of `++list` `a`.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a gate.\n\n#### Source\n\n```hoon\n++  lien\n  ~/  %lien\n  |*  [a=(list) b=$-(* ?)]\n  |-  ^-  ?\n  ?~  a  |\n  ?:  (b i.a)  &\n  $(a t.a)\n```\n\n#### Examples\n\n```\n> =a |=(a=@ (gte a 1))\n> (lien `(list @)`[0 1 2 1 ~] a)\n%.y\n```\n\n```\n> =a |=(a=@ (gte a 3))\n> (lien `(list @)`[0 1 2 1 ~]) a)\n%.n\n```\n\n---\n",
    "limo": "## `++limo`\n\nList Constructor\n\nTurns a null-terminated tuple into a `list`.\n\n#### Accepts\n\n`a` is a null-terminated tuple.\n\n#### Produces\n\nA `++list`.\n\n#### Source\n\n```hoon\n++  limo\n  |*  a=*\n  ^+  =<  $\n    |@  ++  $  ?~(a ~ ?:(*? [i=-.a t=$] $(a +.a)))\n    --\n  a\n```\n\n#### Examples\n\n```\n> (limo [1 2 3 ~])\n[i=1 t=[i=2 t=[i=3 t=~]]]\n```\n\n---\n",
    "murn": "## `++murn`\n\nMaybe transform\n\nPasses each member of `list` `a` to gate `b`, which must produce a\n`unit`. Produces a new list with all the results that do not produce\n`~`.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a gate that produces a unit.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  murn\n  ~/  %murn\n  |*  [a=(list) b=$-(* (unit))]\n  =>  .(a (homo a))\n  |-  ^-  (list _?>(?=(^ a) (need (b i.a))))\n  ?~  a  ~\n  =/  c  (b i.a)\n  ?~  c  $(a t.a)\n  [+.c $(a t.a)]\n```\n\n#### Examples\n\n```\n> =a |=(a=@ ?.((gte a 2) ~ (some (add a 10))))\n> (murn `(list @)`[0 1 2 3 ~] a)\n[i=12 t=[i=13 t=~]]\n```\n\n---\n",
    "oust": "## `++oust`\n\nRemove\n\nRemoves elements from list `c` beginning at inclusive index `a`, removing `b`\nnumber of elements.\n\n#### Accepts\n\n`c` is a list.\n\n#### Produces\n\nA `++list`.\n\n#### Source\n\n```hoon\n++  oust\n  ~/  %oust\n  |*  [[a=@ b=@] c=(list)]\n  (weld (scag +<-< c) (slag (add +<-< +<->) c))\n```\n\n#### Examples\n\n```\n> (oust [4 5] \"good day, urbit!\")\n\"good urbit!\"\n```\n\n```\n> (oust [2 2] `(list @)`[1 2 3 4 ~])\n~[1 2]\n```\n\n---\n",
    "reap": "## `++reap`\n\nReplicate\n\nReplicate: produces a `list` containing `a` copies of `b`.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is a noun.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  reap\n  ~/  %reap\n  |*  [a=@ b=*]\n  |-  ^-  (list _b)\n  ?~  a  ~\n  [b $(a (dec a))]\n```\n\n#### Examples\n\n```\n> (reap 20 %a)\n~[%a %a %a %a %a %a %a %a %a %a %a %a %a %a %a %a %a %a %a %a]\n```\n\n```\n> (reap 5 ~s1)\n~[~s1 ~s1 ~s1 ~s1 ~s1]\n> `@dr`(roll (reap 5 ~s1) add)\n~s5\n```\n\n---\n",
    "rear": "## `++rear`\n\nLast item of list\n\nProduces the last item in list `a`, crashing if `a` is null.\n\n#### Accepts\n\n`a` is a `list`.\n\n#### Produces\n\nThe type of the last element in `a`.\n\n#### Source\n\n```hoon\n++  rear\n  ~/  %rear\n  |*  a=(list)\n  ^-  _?>(?=(^ a) i.a)\n  ?>  ?=(^ a)\n  ?:  =(~ t.a)  i.a\n  $(a t.a)\n```\n\n#### Examples\n\n```\n> (rear ~[1 2 3])\n3\n```\n\n```\n> (rear ~)\ndojo: hoon expression failed\n```\n\n---\n",
    "reel": "## `++reel`\n\nRight fold\n\nRight fold: moves right to left across a `list` `a`, recursively slamming\na binary gate `b` with an element from `a` and an accumulator, producing\nthe final value of the accumulator.\n\n(To \"slam\" means to call a gate and give it a sample/samples. In this instance,\n`a` is the list of samples that are given to the gate b.)\n\nThe initial value of the accumulator is the bunt of `b`'s second argument (`+<+`). This can occasionally produce\nundesired behavior (see examples). If you need more control over the initial\nvalue, try making use of `$_` and `|:`, or perhaps [`+spin`](#spin) or\n[`+spun`](#spun).\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a binary gate.\n\n#### Produces\n\nThe accumulator, which is a noun.\n\n#### Source\n\n```hoon\n++  reel\n  ~/  %reel\n  |*  [a=(list) b=_=>(~ |=([* *] +<+))]\n  |-  ^+  ,.+<+.b\n  ?~  a\n    +<+.b\n  (b i.a $(a t.a))\n```\n\n#### Examples\n\n```\n> (reel `(list @)`[1 2 3 4 5 ~] add)\n15\n\n> (reel `(list @)`[6 3 1 ~] sub)\n4\n\n> (reel `(list @)`[3 6 1 ~] sub)\n! subtract-underflow\n! exit\n```\n\n`+mul`'s default sample is 1, so calling `+reel` with `+mul` yields the expected behavior:\n\n```\n> *mul\n1\n\n> (reel `(list @)`~[1 2 3 4] mul)\n24\n```\n\nHowever, if you build a gate that uses `+mul` like so, the sample defaults to 0\nsince that is the bunt of `@`:\n\n```\n> (reel `(list @)`~[1 2 3 4] |=([a=@ b=@] (mul a b)))\n0\n```\n\nWe can fix this with `|:`:\n\n```\n> (reel `(list @)`~[1 2 3 4] |:([a=1 b=1] (mul a b)))\n24\n```\n\nIf you check the definition of `+mul`, you'll see that it also utilizes this\npattern.\n\nWe can check explicitly what sequence of operations `+reel` performs like this:\n\n```\n> =f |:  [l='e_l' r='e_r']\n      ^-  @t\n      :((cury cat 3) '(' l '*' r ')')\n> (reel \"abcde\" f)\n'(a*(b*(c*(d*(e*e_r)))))'\n```\n\n---\n",
    "roll": "## `++roll`\n\nLeft fold\n\nLeft fold: moves left to right across a list `a`, recursively slamming a\nbinary gate `b` with an element from the `list` and an accumulator,\nproducing the final value of the accumulator.\n\n(To \"slam\" means to call a gate and give it a sample/samples. In this instance,\n`a` is the list of samples that are given to the gate b.)\n\nThe initial value of the accumulator is `b`'s second argument (`+<+`). This can\noccasionally produce undesired behavior (see examples). If you need more control\nover the initial value, try making use of `$_` and `|:`, or perhaps\n[`+spin`](#spin) or [`+spun`](#spun).\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a binary gate.\n\n#### Produces\n\nThe accumulator, which is a noun.\n\n#### Source\n\n```hoon\n++  roll\n  ~/  %roll\n  |*  [a=(list) b=_=>(~ |=([* *] +<+))]\n  |-  ^+  ,.+<+.b\n  ?~  a\n    +<+.b\n  $(a t.a, b b(+<+ (b i.a +<+.b)))\n```\n\n#### Examples\n\n```\n> (roll `(list @)`[1 2 3 4 5 ~] add)\nq=15\n\n> (roll `(list @)`[6 3 1 ~] sub)\n! subtract-underflow\n! exit\n\n> (roll `(list @)`[1 3 6 ~] sub)\nq=4\n```\n\n`+mul`'s default sample is 1, so calling `+roll` with `+mul` yields the expected behavior:\n\n```\n> *mul\n1\n\n> (roll `(list @)`~[1 2 3 4] mul)\n24\n```\n\nHowever, if you build a gate that uses `+mul` like so, the sample defaults to 0\nsince that is the bunt of `@`:\n\n```\n> (roll `(list @)`~[1 2 3 4] |=([a=@ b=@] (mul a b)))\n0\n```\n\nWe can fix this with `|:`:\n\n```\n> (roll `(list @)`~[1 2 3 4] |:([a=1 b=1] (mul a b)))\n24\n```\n\nIf you check the definition of `+mul`, you'll see that it also utilizes this\npattern.\n\nWe can check explicitly what sequence of operations `+roll` performs like this:\n\n```\n> =f |:  [l='e_l' r='e_r']\n      ^-  @t\n      :((cury cat 3) '(' l '*' r ')')\n> (roll \"abcde\" f)\n'(e*(d*(c*(b*(a*e_r)))))\n```\n\nThis is in contrast to what one might expect:\n\n```\n> =foldl\n    |*  [l=(list) f=$-([* *] *)]\n    ^-  f\n    ?~  l  +<-.f\n    %=  $\n      +<-.f  (f +<-.f i.l)\n      l      t.l\n      ==\n> (foldl \"abcde\" f)\n'(((((e_l*a)*b)*c)*d)*e)'\n```\n\n---\n",
    "scag": "## `++scag`\n\nPrefix\n\nAccepts an atom `a` and `list` `b`, producing the first `a` elements of\nthe front of the list.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is a list.\n\n#### Produces\n\nA list of the same type as `b`.\n\n#### Source\n\n```hoon\n++  scag\n  ~/  %scag\n  |*  [a=@ b=(list)]\n  |-  ^+  b\n  ?:  |(?=(~ b) =(0 a))  ~\n  [i.b $(b t.b, a (dec a))]\n```\n\n#### Examples\n\n```\n> (scag 2 `(list @)`[1 2 3 4 ~])\n[i=1 t=~[2]]\n```\n\n```\n> (scag 10 `(list @)`[1 2 3 4 ~])\n[i=1 t=~[2 3 4]]\n```\n\n---\n",
    "skid": "## `++skid`\n\nSeparate\n\nSeparates a `list` `a` into two lists - Those elements of `a` who produce\ntrue when slammed to gate `b` and those who produce `%.n`.\n\n(To \"slam\" means to call a gate and give it a sample/samples. In this instance,\n`a` is the list of samples that are given to the gate `b`.)\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a gate that accepts one argument and produces a flag.\n\n#### Produces\n\nA cell of two lists.\n\n#### Source\n\n```hoon\n++  skid\n  ~/  %skid\n  |*  [a=(list) b=$-(* ?)]\n  |-  ^+  [p=a q=a]\n  ?~  a  [~ ~]\n  =+  c=$(a t.a)\n  ?:((b i.a) [[i.a p.c] q.c] [p.c [i.a q.c]])\n```\n\n#### Examples\n\n```\n> =a |=(a=@ (gth a 1))\n> (skid `(list @)`[0 1 2 3 ~] a)\n[p=[i=2 t=~[3]] q=[i=0 t=~[1]]]\n```\n\n---\n",
    "skim": "## `++skim`\n\nFilter\n\nCycles through the members of a list `a`, passing them to a gate `b` and\nproducing a list of all of the members that produce `%.y`. Inverse of\n`skip`.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a gate that accepts one argument and produces a boolean.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  skim\n  ~/  %skim\n  |*  [a=(list) b=$-(* ?)]\n  |-\n  ^+  a\n  ?~  a  ~\n  ?:((b i.a) [i.a $(a t.a)] $(a t.a))\n```\n\n#### Examples\n\n```\n> =a |=(a=@ (gth a 1))\n> (skim `(list @)`[0 1 2 3 ~] a)\n[i=2 t=~[3]]\n```\n\n---\n",
    "skip": "## `++skip`\n\nExcept\n\nCycles through the members of `list` `a`, passing them to a gate `b`.\nProduces a list of all of the members that produce `%.n`. Inverse of\n`skim`.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a gate that accepts one argument and produces a flag.\n\n#### Produces\n\nA list of the same type as `a`.\n\n#### Source\n\n```hoon\n++  skip\n  ~/  %skip\n  |*  [a=(list) b=$-(* ?)]\n  |-\n  ^+  a\n  ?~  a  ~\n  ?:((b i.a) $(a t.a) [i.a $(a t.a)])\n```\n\n#### Examples\n\n```\n> =a |=(a=@ (gth a 1))\n> (skip `(l)`[0 1 2 3 ~]) a)\n[i=0 t=[i=1 t=~]]\n```\n\n---\n",
    "slag": "## `++slag`\n\nSuffix\n\nAccepts an atom `a` and list `b`, producing the remaining elements from\n`b` starting at `a`.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is a list.\n\n#### Produces\n\nA list of the same type as `b`.\n\n#### Source\n\n```hoon\n++  slag\n  ~/  %slag\n  |*  [a=@ b=(list)]\n  |-  ^+  b\n  ?:  =(0 a)  b\n  ?~  b  ~\n  $(b t.b, a (dec a))\n```\n\n#### Examples\n\n```\n> (slag 2 (limo [1 2 3 4 ~]))\n[i=3 t=[i=4 t=~]]\n> (slag 1 (limo [1 2 3 4 ~]))\n[i=2 t=[i=3 t=[i=4 t=~]]]\n```\n\n---\n",
    "snag": "## `++snag`\n\nIndex\n\nAccepts an atom `a` and a `++list` `b`, producing the element at the index\nof `a`and failing if the list is null. Lists are 0-indexed.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is a list.\n\n#### Produces\n\nProduces an element of `b`, or crashes if no element exists at that index.\n\n#### Source\n\n```hoon\n++  snag\n  ~/  %snag\n  |*  [a=@ b=(list)]\n  |-  ^+  ?>(?=(^ b) i.b)\n  ?~  b\n    ~_  leaf+\"snag-fail\"\n    !!\n  ?:  =(0 a)  i.b\n  $(b t.b, a (dec a))\n```\n\n#### Examples\n\n```\n> (snag 2 \"asdf\")\n'd'\n```\n\n```\n> (snag 0 `(list @ud)`~[1 2 3 4])\n1\n```\n\n---\n",
    "snap": "## `++snap`\n\nReplace item at index\n\nAccepts a `list` `a`, an atom `b`, and a noun `c`, producing the list of `a` with the item at index `b` replaced with `c`.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a atom.\n\n`c` is a noun.\n\n#### Produces\n\nthe list of `a` with the item at index `b` replaced with `c`.\n\n#### Source\n\n```hoon\n++  snap\n  ~/  %snap\n  |*  [a=(list) b=@ c=*]\n  ^+  a\n  (weld (scag b a) [c (slag +(b) a)])\n```\n\n#### Examples\n\n```\n> (snap (limo ~[2 3 4]) 1 11)\n~[2 11 4]\n```\n\n---\n",
    "snip": "## `++snip`\n\nDrop tail off list\n\nRemoves the last element from list `a`.\n\n#### Accepts\n\n`a` is a `list`.\n\n#### Produces\n\nA `list`.\n\n#### Source\n\n```hoon\n++  snip\n  ~/  %snip\n  |*  a=(list)\n  ^+  a\n  ?~  a  ~\n  ?:  =(~ t.a)  ~\n  [i.a $(a t.a)]\n```\n\n#### Examples\n\n```\n> `tape`(snip \"foobar\")\n\"fooba\"\n```\n\n```\n> (snip ~)\n~\n```\n\n---\n",
    "snoc": "## `++snoc`\n\nAppend\n\nAccepts a `++list` `a` and a noun `b`, producing the list of `b` appended to `a`.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a noun.\n\n#### Produces\n\nProduces a list of `b` appended to `a`.\n\n#### Source\n\n```hoon\n++  snoc\n  |*  [a=(list) b=*]\n  (weld a ^+(a [b]~))\n```\n\n#### Examples\n\n```\n> `tape`(zing (snoc `(list tape)`~[\"a\" \"bc\" \"def\"] \"g\"))\n\"abcdefg\"\n> (snoc `(list @ud)`~[1 2 3] 4)\n~[1 2 3 4]\n```\n\n---\n",
    "sort": "## `++sort`\n\nQuicksort\n\nQuicksort: accepts a `++list` `a` and a gate `b` which accepts two nouns and\nproduces a flag. `++sort` then produces a list of the elements of `a`,\nsorted according to `b`.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a gate that accepts two nouns and produces a boolean.\n\n#### Produces\n\nA list\n\n#### Source\n\n```hoon\n++  sort  !.\n  ~/  %sort\n  |*  [a=(list) b=$-([* *] ?)]\n  =>  .(a ^.(homo a))\n  |-  ^+  a\n  ?~  a  ~\n  =+  s=(skid t.a |:(c=i.a (b c i.a)))\n  %+  weld\n    $(a p.s)\n  ^+  t.a\n  [i.a $(a q.s)]\n```\n\n#### Examples\n\n```\n> (sort `(list @)`[0 1 2 3 ~] gth)\n~[3 2 1 0]\n```\n\n---\n",
    "spin": "## `++spin` {% #spin %}\n\nGate to list, with state\n\nAccepts a `++list` `a`, some state `b`, and a gate `c`. `c` is called with\na tuple -- the head is an element of `a` and the tail is the state `b`, and\nshould produce a tuple of the transformed element and the (potentially\nmodified) state `b`. Produces a pair where the first element is a list of the\ntransformed elements of `a`, and the second element is the final value of `b`.\n\n#### Accepts\n\n`a` is a `++list`.\n\n`b` is a noun.\n\n`c` is a gate.\n\n#### Produces\n\nA pair of a list and a noun.\n\n#### Source\n\n```hoon\n++  spin\n  ~/  %spin\n  |*  [a=(list) b=* c=_|=(^ [** +<+])]\n  =>  .(c `$-([_?>(?=(^ a) i.a) _b] [_-:(c) _b])`c)\n  =/  acc=(list _-:(c))  ~\n  |-  ^-  (pair _acc _b)\n  ?~  a\n    [(flop acc) b]\n  =^  res  b  (c i.a b)\n  $(acc [res acc], a t.a)\n```\n\n#### Examples\n\n```\n> %^  spin  (limo ~[4 5 6])     ::  Trivial example -- does nothing with the state\n    0\n  |=([n=@ a=@] [n a])\n[p=~[4 5 6] q=0]\n```\n\n```\n> %^  spin  (limo ~[4 5 6])     ::  Form a pair with `p` as the index and `q` as the list element\n    0\n  |=([n=@ a=@] [`(pair)`[a n] +(a)])\n[p=~[[p=0 q=4] [p=1 q=5] [p=2 q=6]] q=3]\n```\n\n```\n> %^  spin  (reap 10 0)     :: Create 10 random numbers less than `10`\n    ~(. og eny)\n  |=([n=@ rng=_og] (rads:rng 10))\n[p=~[7 8 6 0 1 5 4 7 9 3] q=<4.rvi {a/@uvJ <51.qyl 129.pdd 41.mac 1.ane $141>}>]\n```\n\n#### Discussion\n\n`(~(rads og eny) 2)` creates a random number less than `2`, seeding the RNG\nwith entropy (`eny`). The head of the product is the random number, the tail\nis the continuation of the RNG.\n\n---\n",
    "spun": "## `++spun` {% #spun %}\n\nGate to list, with state\n\nAccepts a `list` `a` and a gate `b`. `c` is internal state, initially\nderived by **bunting** the tail of the sample of gate `b`, instead of\nbeing passed in explicitly as in `++spin`. Produces a list with the\ngate applied to each element of the original list. `b` is called with a tuple --\nthe head is an element of `a` and the tail is the state `c`, and should\nproduce a tuple of the transformed element and the (potentially modified)\nstate `c`.\n\n#### Accepts\n\n`a` is a `++list`.\n\n`b` is a gate.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  spun\n  ~/  %spun\n  |*  [a=(list) b=_|=(^ [** +<+])]\n  p:(spin a +<+.b b)\n```\n\n#### Examples\n\n```\n> %+  spun  (limo ~[4 5 6])            ::  `p` as the index and `q` as the list element\n  |=([n=@ a=@] [`(pair)`[a n] +(a)])\n~[[p=0 q=4] [p=1 q=5] [p=2 q=6]]\n```\n\n```\n> =l (limo ~[7 8 9])\n> %+  spun  (limo ~[4 5 6])            ::  joins two lists into a list of pairs\n  |=([n=@ a=@] [`(pair)`[(snag a l) n] +(a)])\n~[[p=7 q=4] [p=8 q=5] [p=9 q=6]]\n```\n\n---\n",
    "swag": "## `++swag`\n\nInfix\n\nSimilar to `substr` in Javascript: extracts a string infix, beginning at\ninclusive index `a`, producing `b` number of characters.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is an atom.\n\n`c` is a list.\n\n#### Produces\n\nA list of the same type as `c`.\n\n#### Source\n\n```hoon\n++  swag\n  |*  [[a=@ b=@] c=(list)]\n  (scag +<-> (slag +<-< c))\n```\n\n#### Examples\n\n```\n> (swag [2 5] \"roly poly\")\n\"ly po\"\n```\n\n```\n> (swag [2 2] (limo [1 2 3 4 ~]))\n[i=3 t=[i=4 t=~]]\n```\n\n---\n",
    "turn": "## `++turn`\n\nGate to list\n\nAccepts a `++list` `a` and a gate `b`. Produces a list with the gate applied\nto each element of the original list.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a gate.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  turn\n  ~/  %turn\n  |*  [a=(list) b=gate]\n  =>  .(a (homo a))\n  ^-  (list _?>(?=(^ a) (b i.a)))\n  |-\n  ?~  a  ~\n  [i=(b i.a) t=$(a t.a)]\n```\n\n#### Examples\n\n```\n> (turn (limo [104 111 111 110 ~]) @t)\n<|h o o n|>\n```\n\n```\n> =a |=(a=@ (add a 4))\n> (turn (limo [1 2 3 4 ~]) a)\n~[5 6 7 8]\n```\n\n#### Discussion\n\n`turn` is Hoon's version of 'map' in Haskell.\n\n---\n",
    "weld": "## `++weld`\n\nConcatenate\n\nConcatenate two `++list`s `a` and `b`.\n\n#### Accepts\n\n`a` and `b` are lists.\n\n#### Source\n\n```hoon\n++  weld\n  ~/  %weld\n  |*  [a=(list) b=(list)]\n  =>  .(a ^.(homo a), b ^.(homo b))\n  |-  ^+  b\n  ?~  a  b\n  [i.a $(a t.a)]\n```\n\n#### Examples\n\n```\n> (weld \"urb\" \"it\")\n\"urbit\"\n```\n\n```\n> (weld (limo [1 2 ~]) (limo [3 4 ~]))\n~[1 2 3 4]\n```\n\n---\n",
    "welp": "## `++welp`\n\nPerfect weld\n\nConcatenate two `++list`s `a` and `b` without losing their type information\nto homogenization.\n\n#### Accepts\n\n`a` is a list.\n\n`b` is a list.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  welp\n  ~/  %welp\n  =|  [* *]\n  |@\n  ++  $\n    ?~  +<-\n      +<-(. +<+)\n    +<-(+ $(+<- +<->))\n  --\n```\n\n#### Examples\n\n```\n> (welp \"foo\" \"bar\")\n\"foobar\"\n```\n\n```\n> (welp ~[60 61 62] ~[%a %b %c])\n[60 61 62 %a %b %c ~]\n\n> ? (welp ~[60 61 62] ~[%a %b %c])\n  [@ud @ud @ud %a %b %c %~]\n[60 61 62 %a %b %c ~]\n```\n\n```\n> (welp [sa+1 so+2 ~] si=3)\n[[%sa 1] [%so 2] si=3]\n```\n\n---\n",
    "zing": "## `++zing`\n\nTurns a `++list` of lists into a single list by promoting the elements of\neach sublist into the higher.\n\n#### Accepts\n\nA list of lists.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  zing\n  ~/  %zing\n  =|  *\n  |@\n  ++  $\n    ?~  +<\n      +<\n    (welp +<- $(+< +<+))\n  --\n```\n\n#### Examples\n\n```\n> (zing (limo [(limo ['a' 'b' 'c' ~]) (limo ['e' 'f' 'g' ~]) (limo ['h' 'i' 'j' ~]) ~]))\n~['a' 'b' 'c' 'e' 'f' 'g' 'h' 'i' 'j']\n```\n\n```\n> (zing (limo [(limo [1 'a' 2 'b' ~]) (limo [3 'c' 4 'd' ~]) ~]))\n~[1 97 2 98 3 99 4 100]\n```\n\n---\n",
    "bex": "## `++bex`\n\nBinary exponent\n\nComputes the result of `2^a`, where `a` is a block size (see [$bloq](/reference/hoon/stdlib/1c#bloq)), producing an atom.\n\n#### Accepts\n\n`a` is an `bloq`.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  bex\n  ~/  %bex\n  |=  a=bloq\n  ^-  @\n  ?:  =(0 a)  1\n  (mul 2 $(a (dec a)))\n```\n\n#### Examples\n\n```\n> (bex 4)\n16\n```\n\n```\n> (bex (add 19 1))\n1.048.576\n```\n\n```\n> (bex 0)\n1\n```\n\n---\n",
    "can": "## `++can`\n\nAssemble\n\nProduces an atom from a list `b` of length-value pairs `p` and `q`,\nwhere `p` is the length in blocks of size `a`, and `q` is an atomic\nvalue.\n\n#### Accepts\n\n`a` is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq)).\n\n`b` is a `list` of length-value pairs, `p` and `q`:\n\n- `p` is a [step](/reference/hoon/stdlib/1c/#step).\n- `q` is a `@`.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  can\n  ~/  %can\n  |=  [a=bloq b=(list [p=step q=@])]\n  ^-  @\n  ?~  b  0\n  (add (end [a p.i.b] q.i.b) (lsh [a p.i.b] $(b t.b)))\n```\n\n#### Examples\n\n```\n> `@ub`21    ::  @ub is the binary aura\n0b1.0101\n```\n\n```\n> `@ub`(can 3 ~[[1 21]])\n0b1.0101\n```\n\n```\n> `@ub`(can 3 ~[[1 1]])\n0b1\n```\n\n```\n> `@ub`(can 0 ~[[1 255]])\n0b1\n```\n\n```\n> `@ux`(can 3 [3 0xc1] [1 0xa] ~)    ::  @ux is the hexadecimal aura\n0xa00.00c1\n```\n\n```\n> `@ux`(can 3 [3 0xc1] [1 0xa] [1 0x23] ~)\n0x23.0a00.00c1\n```\n\n```\n> `@ux`(can 4 [3 0xc1] [1 0xa] [1 0x23] ~)\n0x23.000a.0000.0000.00c1\n```\n\n```\n> `@ux`(can 3 ~[[1 'a'] [2 'bc']])\n0x63.6261\n```\n\n---\n",
    "cat": "## `++cat`\n\nConcatenate\n\nConcatenates two atoms, `b` and `c`, according to block size `a`, producing an\natom.\n\n#### Accepts\n\n`a` is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq)).\n\n`b` is an atom.\n\n`c` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  cat\n  ~/  %cat\n  |=  [a=bloq b=@ c=@]\n  (add (lsh [a (met a b)] c) b)\n```\n\n#### Examples\n\n```\n> `@ub`(cat 3 1 0)    ::  @ub is the binary aura\n0b1\n> `@ub`(cat 0 1 1)\n0b11\n> `@ub`(cat 0 2 1)\n0b110\n> `@ub`(cat 2 1 1)\n0b1.0001\n```\n\n```\n> `@ub`256\n0b1.0000.0000\n> `@ub`255\n0b1111.1111\n> `@ub`(cat 3 256 255)\n0b1111.1111.0000.0001.0000.0000\n> `@ub`(cat 2 256 255)\n0b1111.1111.0001.0000.0000\n> (cat 3 256 255)\n16.711.936\n> (cat 2 256 255)\n1.044.736\n```\n\n---\n",
    "cut": "## `++cut`\n\nSlice\n\nSlices `c` blocks of size `a` that are positioned `b` blocks from the end of\n`d`. That slice is produced as an atom.\n\n#### Accepts\n\n`a` is a block size (see [`$bloq`](/reference/hoon/stdlib/1c)).\n\n`[b c]` where:\n\n- `b` is a [step](/reference/hoon/stdlib/1c#step).\n- `c` is a [step](/reference/hoon/stdlib/1c#step).\n\n`d` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  cut\n  ~/  %cut\n  |=  [a=bloq [b=step c=step] d=@]\n  (end [a c] (rsh [a b] d))\n```\n\n#### Examples\n\n```\n> (cut 0 [1 1] 2)\n1\n> (cut 0 [2 1] 4)\n1\n```\n\n```\n> `@t`(cut 3 [0 3] 'abcdefgh')           ::  @t is the cord aura\n'abc'\n> `@t`(cut 3 [1 3] 'abcdefgh')\n'bcd'\n```\n\n```\n> `@ub`(cut 0 [0 3] 0b1111.0000.1101)    ::  @ub is the binary aura\n0b101\n> `@ub`(cut 0 [0 6] 0b1111.0000.1101)\n0b1101\n> `@ub`(cut 0 [4 6] 0b1111.0000.1101)\n0b11.0000\n> `@ub`(cut 0 [3 6] 0b1111.0000.1101)\n0b10.0001\n```\n\n---\n",
    "end": "## `++end`\n\nTail\n\nProduces an atom by taking the last `step` blocks of size `bloq` from `b`.\n\n#### Accepts\n\n`a` is an atom slice specifier (see [`$bite`](/reference/hoon/stdlib/1c#bite)),\nwhich is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq))\nwith optional block count.\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  end\n  ~/  %end\n  |=  [a=bite b=@]\n  =/  [=bloq =step]  ?^(a a [a *step])\n  (mod b (bex (mul (bex bloq) step)))\n```\n\n#### Examples\n\n```\n> (end [2 2] 255)\n255\n> (end [3 1] 255)\n255\n> (end 3 255)\n255\n> (end 3 256)\n0\n```\n\n```\n> `@ub`12                  ::  @ub is the binary aura\n0b1100\n> `@ub`(end [0 3] 12)\n0b100\n> (end [0 3] 12)\n4\n> `@ub`(end [1 3] 12)\n0b1100\n> (end [1 3] 12)\n12\n```\n\n```\n> `@ux`'abc'               ::  @ux is the hexademical aura\n0x63.6261\n> `@ux`(end [3 2] 'abc')\n0x6261\n> `@t`(end [3 2] 'abc')    ::  @t is the cord aura\n'ab'\n```\n\n---\n",
    "fil": "## `++fil`\n\nFill bloqstream\n\nProduces an atom by repeating `c` for `b` blocks of size `a`.\n\n#### Accepts\n\n`a` is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq)).\n\n`b` is a [step](/reference/hoon/stdlib/1c#step).\n\n`c` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  fil\n  ~/  %fil\n  |=  [a=bloq b=step c=@]\n  =|  n=@ud\n  =.  c  (end a c)\n  =/  d  c\n  |-  ^-  @\n  ?:  =(n b)\n    (rsh a d)\n  $(d (add c (lsh a d)), n +(n))\n```\n\n#### Examples\n\n```\n> `@t`(fil 3 5 %a)                                ::  @t is the cord (string) aura\n'aaaaa'\n```\n\n```\n> `@t`(fil 5 10 %ceeb)\n'ceebceebceebceebceebceebceebceebceebceeb'\n```\n\n```\n> `@t`(fil 4 10 'eced')\n'ecececececececececec'\n```\n\n```\n> `@tas`(fil 4 10 %bf)                            ::  @tas is the term aura\n%bfbfbfbfbfbfbfbfbfbf\n```\n\n```\n> `@ub`(fil 2 6 1)                                ::  @ub is the binary aura\n0b1.0001.0001.0001.0001.0001\n```\n\n---\n",
    "lsh": "## `++lsh`\n\nLeft-shift\n\nProduces an atom by left-shifting `b` by `step` blocks of size `bloq`.\n\n#### Accepts\n\n`a` is an atom slice specifier (see [`$bite`](/reference/hoon/stdlib/1c#bite)),\nwhich is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq))\nwith optional block count.\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  lsh\n  ~/  %lsh\n  |=  [a=bite b=@]\n  =/  [=bloq =step]  ?^(a a [a *step])\n  (mul b (bex (mul (bex bloq) step)))\n```\n\n#### Examples\n\n```\n> `@ub`1                 ::  @ub is the binary aura\n0b1\n> `@ub`(lsh [0 1] 1)\n0b10\n> (lsh [0 1] 1)\n2\n> (lsh 0 1)\n2\n```\n\n```\n> `@ub`255\n0b1111.1111\n> `@ub`(lsh [3 1] 255)\n0b1111.1111.0000.0000\n> (lsh [3 1] 255)\n65.280\n```\n\n---\n",
    "met": "## `++met`\n\nMeasure\n\nComputes the number of blocks of size `a` in `b`, producing an atom.\n\n#### Accepts\n\n`a` is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq)).\n\n`b` is an atom.\n\n#### Source\n\n```hoon\n++  met\n  ~/  %met\n  |=  [a=bloq b=@]\n  ^-  @\n  =+  c=0\n  |-\n  ?:  =(0 b)  c\n  $(b (rsh a b), c +(c))\n```\n\n#### Examples\n\n```\n> (met 0 1)\n1\n> (met 0 2)\n2\n```\n\n```\n> (met 3 255)\n1\n> (met 3 256)\n2\n```\n\n```\n> (met 3 'abcde')\n5\n```\n\n---\n",
    "rap": "## `++rap`\n\nAssemble non-zero\n\nConcatenates a list of atoms `b` using block size `a`, producing an atom.\n\n#### Accepts\n\n`a` is a block size (see [`++bloq`](/reference/hoon/stdlib/1c)).\n\n`b` is a `list` of atoms.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  rap\n  ~/  %rap\n  |=  [a=bloq b=(list @)]\n  ^-  @\n  ?~  b  0\n  (cat a i.b $(b t.b))\n```\n\n#### Examples\n\n```\n> `@ub`(rap 2 [1 2 3 4 ~])                   ::  @ub is the binary aura\n0b100.0011.0010.0001\n> `@ub`(rap 1 [1 2 3 4 ~])\n0b1.0011.1001\n```\n\n```\n> (rap 0 [0 0 0 ~])\n0\n> (rap 0 [1 0 1 ~])\n3\n```\n\n```\n> `@ub`3\n0b11\n> (rap 0 [0 1 0 0 1 2 ~])\n11\n> (rap 0 [1 1 2 ~])\n11\n> `@ub`11\n0b1011\n```\n\n#### Discussion\n\nAny element of the value `0` is not included in concatenation.\n\n---\n",
    "rep": "## `++rep`\n\nAssemble single\n\nProduces an atom by assembling a list of atoms `b` using block size `a`.\n\n#### Accepts\n\n`a` is an atom slice specifier (see [`$bite`](/reference/hoon/stdlib/1c#bite)),\nwhich is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq))\nwith optional block count.\n\n`b` is a list of atoms.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  rep\n  ~/  %rep\n  |=  [a=bite b=(list @)]\n  =/  [=bloq =step]  ?^(a a [a *step])\n  =|  i=@ud\n  |-  ^-  @\n  ?~  b   0\n  %+  add  $(i +(i), b t.b)\n  (lsh [bloq (mul step i)] (end [bloq step] i.b))\n```\n\n#### Examples\n\n```\n> `@ub`(rep 2 [1 2 3 4 ~])                   ::  @ub is the binary aura\n0b100.0011.0010.0001\n```\n\n```\n> (rep 0 [0 0 1 ~])\n4\n> (rep 0 [0 0 0 1 ~])\n8\n```\n\n```\n> `@ub`(rep 0 [0 0 0 1 ~])\n0b1000\n> `@ub`8\n0b1000\n```\n\n```\n> `@ub`(rep 0 [1 0 1 0 ~])\n0b101\n> `@ub`(rep 0 [1 2 3 4 ~])\n0b101\n```\n\n```\n> (rep 0 [0 1 0 1 ~])\n10\n> (rep 0 [1 0 1 0 1 ~])\n21\n> `@ub`21\n0b10.1010\n```\n\n```\n> `@ub`(rep 3 [12 166 8 34 ~])\n0b10.0010.0000.1000.1010.0110.0000.1100\n```\n\n```\n> `*`\"abcd\"\n[97 98 99 100 0]\n> `@t`(rep 3 \"abcd\")                         :: @t is the text aura\n'abcd'\n```\n\n---\n",
    "rev": "## `++rev`\n\nReverses block order, accounting for leading zeroes.\n\nProduces an atom from the bits of `dat` in reverse order according to a block\nsize `boz` and a size `len`.\n\nIf the total size is less than the length of `dat`, then only the first\nbits of `dat` up to the total size will be taken and reversed. If the total size\nis longer, trailing zeroes will be added.\n\n#### Accepts\n\n`boz` is a block size with optional block count (see\n[`$bloq`](/reference/hoon/stdlib/1c#bloq)).\n\n`len` is a `@ud` of the number of blocks of size `boz` to be reversed.\n\n`dat` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  rev\n  ~/  %rev\n  |=  [boz=bloq len=@ud dat=@]\n  ^-  @\n  =.  dat  (end [boz len] dat)\n  %+  lsh\n    [boz (sub len (met boz dat))]\n  (swp boz dat)\n```\n\n#### Examples\n\n```\n> =a 0b1111.0000.1111.1010.0011\n> `@ub`(rev 0 20 a)\n0b1100.0101.1111.0000.1111\n> `@ub`(rev 0 12 a)\n0b1100.0101.1111\n> `@ub`(rev 2 5 a)\n0b11.1010.1111.0000.1111\n> `@ub`(rev 2 4 a)\n0b11.1010.1111.0000\n> `@ub`(rev 2 6 a)\n0b11.1010.1111.0000.1111.0000\n```\n\n```\n> (rev 1 10 1.000)\n179.200\n> (rev 2 5 1.000)\n582.400\n> (rev 1 5 1.000)\n175\n```\n\n---\n",
    "rip": "## `++rip`\n\nDisassemble\n\nProduces a list of atoms from the bits of `b` using block size `a`.\n\n#### Accepts\n\n`a` is an atom slice specifier (see [`$bite`](/reference/hoon/stdlib/1c#bite)),\nwhich is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq))\nwith optional block count.\n\n`b` is an atom.\n\n#### Produces\n\nA list of atoms.\n\n#### Source\n\n```hoon\n++  rip\n  ~/  %rip\n  |=  [a=bite b=@]\n  ^-  (list @)\n  ?:  =(0 b)  ~\n  [(end a b) $(b (rsh a b))]\n```\n\n#### Examples\n\n```\n> `@ub`155                      ::  @ub is the binary aura\n0b1001.1011\n> (rip 0 155)\n~[1 1 0 1 1 0 0 1]\n> (rip 2 155)\n~[11 9]\n```\n\n```\n> (rip 0 11)\n~[1 1 0 1]\n> (rip 1 155)\n~[3 2 1 2]\n```\n\n```\n> `@ub`256\n0b1.0000.0000\n> (rip 0 256)\n~[0 0 0 0 0 0 0 0 1]\n> (rip 2 256)\n~[0 0 1]\n> (rip 3 256)\n~[0 1]\n```\n\n```\n> `tape`(rip 3 'abcd')\n\"abcd\"\n```\n\n---\n",
    "rsh": "## `++rsh`\n\nRight-shift\n\nRight-shifts `b` by `step` blocks of size `bloq`, producing an atom.\n\n#### Accepts\n\n`a` is an atom slice specifier (see [`$bite`](/reference/hoon/stdlib/1c#bite)),\nwhich is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq))\nwith optional block count.\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  rsh\n  ~/  %rsh\n  |=  [a=bite b=@]\n  =/  [=bloq =step]  ?^(a a [a *step])\n  (div b (bex (mul (bex bloq) step)))\n```\n\n#### Examples\n\n```\n> `@ub`145                       ::  @ub is the binary aura\n0b1001.0001\n> `@ub`(rsh [1 1] 145)\n0b10.0100\n> (rsh [1 1] 145)\n36\n> (rsh 1 145)\n36\n> `@ub`(rsh [2 1] 145)\n0b1001\n> (rsh [2 1] 145)\n9\n```\n\n```\n> `@ub`10\n0b1010\n> `@ub`(rsh [0 1] 10)\n0b101\n> (rsh [0 1] 10)\n5\n```\n\n```\n> `@ux`'abc'\n0x63.6261\n> `@t`(rsh [3 1] 'abc')\n'bc'\n> `@ux`(rsh [3 1] 'abc')\n0x6362\n```\n\n---\n",
    "run": "## `++run`\n\n`++turn` into atom.\n\nDisassembles atom `b` into slices specified by `a`, applies `c` to each slice,\nand reassembles the results back into an atom.\n\n#### Accepts\n\n`a` is an atom slice specifier (see [`$bite`](/reference/hoon/stdlib/1c#bite)),\nwhich is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq))\nwith optional block count.\n\n`b` is an atom.\n\n`c` is a gate that accepts an atom and produces an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  run\n  ~/  %run\n  |=  [a=bite b=@ c=$-(@ @)]\n  (rep a (turn (rip a b) c))\n```\n\n#### Examples\n\n```\n    > `@ux`65.535                     :: @ux is the hexadecimal aura\n    0xffff\n    > `@ux`(run 2 65.535 dec)         :: dec is the decrement gate\n    0xeeee\n```\n\n---\n",
    "rut": "## `++rut`\n\n`++turn` into list.\n\nDisassembles atom `b` into slices specified by `a`, applies `c` to each slice,\nand assembles the results back into a.\n\n#### Accepts\n\n`a` is an atom slice specifier (see [`$bite`](/reference/hoon/stdlib/1c#bite)),\nwhich is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq))\nwith optional block count.\n\n`b` is an atom.\n\n`c` is a gate that accepts an atom.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  rut\n  ~/  %rut\n  |*  [a=bite b=@ c=$-(@ *)]\n  (turn (rip a b) c)\n```\n\n#### Examples\n\n```\n> `@ux`65.535                             :: @ux is the hexadecimal aura\n0xffff\n> `(list @ux)`(rut 2 65.535 dec)          :: dec is the decrement gate\n~[0xe 0xe 0xe 0xe]\n```\n\n---\n",
    "sew": "## `++sew`\n\nStitch one atom into another\n\nReplace `c` blocks of size `a` at offset `b` of atom `e` with `c` blocks of size `a` from atom `d`.\n\nThat is, take `(end [a c] d)` from `d` and overwrite the `(cut a [b c] e)` part of `e`.\n\nOr in simpler terms, take from the start of `d` and replace some part of `e` with it.\n\n#### Accepts\n\n`a` is a [$bloq](/reference/hoon/stdlib/1c#bite) (block size).\n\n`[b c d]` where:\n\n- `b` is a [step](/reference/hoon/stdlib/1c#step) specifying the number of `bloq`s to offset.\n- `b` is a [step](/reference/hoon/stdlib/1c#step) specifying the number of `bloq`s to replace.\n- `d` is the donor atom.\n\n`e` is the recipient atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  sew\n  ~/  %sew\n  |=  [a=bloq [b=step c=step d=@] e=@]\n  ^-  @\n  %+  add\n    (can a b^e c^d ~)\n  =/  f  [a (add b c)]\n  (lsh f (rsh f e))\n```\n\n#### Examples\n\n```\n> `@t`(sew 3 [0 0 'XXXX'] 'OOOO')\n'OOOO'\n> `@t`(sew 3 [0 1 'XXXX'] 'OOOO')\n'XOOO'\n> `@t`(sew 3 [2 1 'XXXX'] 'OOOO')\n'OOXO'\n> `@t`(sew 3 [2 2 'XXXX'] 'OOOO')\n'OOXX'\n> `@t`(sew 3 [0 4 'XXXX'] 'OOOO')\n'XXXX'\n```\n\n---\n",
    "swp": "## `++swp`\n\nReverse block order\n\nSwitches little-endian to big-endian and vice versa: produces an atom by\nreversing the block order of `b` using block size `a`.\n\n#### Accepts\n\n`a` is a block size (see [`$bloq`](/reference/hoon/stdlib/1c#bloq)).\n\n`b` is an atom.\n\n#### Produces\n\nAn atom\n\n#### Source\n\n```hoon\n++  swp\n  ~/  %swp\n  |=  [a=bloq b=@]\n  (rep a (flop (rip a b)))\n```\n\n#### Examples\n\n```\n> `@ub`24             ::  @ub is the binary aura\n0b1.1000\n> (swp 0 24)\n3\n> `@ub`3\n0b11\n```\n\n```\n> (swp 0 0)\n0\n> (swp 0 128)\n1\n```\n\n---\n",
    "xeb": "## `++xeb`\n\nBinary logarithm\n\nComputes the base-2 logarithm of `a`, producing an atom.\n\n#### Accepts\n\n`a` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  xeb\n  ~/  %xeb\n  |=  a=@\n  ^-  @\n  (met 0 a)\n```\n\n#### Examples\n\n```\n> (xeb 31)\n5\n```\n\n```\n> (xeb 32)\n6\n```\n\n```\n> (xeb 49)\n6\n```\n\n```\n> (xeb 0)\n0\n```\n\n```\n> (xeb 1)\n1\n```\n\n```\n> (xeb 2)\n2\n```\n\n---\n",
    "fe": "## `++fe`\n\nModulo bloq\n\nCore that contains arms for `bloq` and modular integer operations.\n\n#### Accepts\n\n`a` is a `bloq`.\n\n#### Source\n\n```hoon\n    |_  a=bloq\n```\n\n---\n\n### `++dif:fe`\n\nProduces the difference between two atoms in the modular basis\nrepresentation.\n\n#### Accepts\n\n`a` is a `bloq` (and is the sample of the parent core).\n\n`b` is an atom.\n\n`c` is an atom.\n\n#### Produces\n\nA `@s`.\n\n#### Source\n\n```hoon\n  ++  dif\n    |=([b=@ c=@] (sit (sub (add out (sit b)) (sit c))))\n```\n\n#### Examples\n\n```\n> (~(dif fe 3) 63 64)\n255\n> (~(dif fe 3) 5 10)\n251\n> (~(dif fe 3) 0 1)\n255\n```\n\n```\n> (~(dif fe 0) 9 10)\n1\n> (~(dif fe 0) 9 11)\n0\n> (~(dif fe 0) 9 12)\n1\n```\n\n```\n> (~(dif fe 2) 9 12)\n13\n> (~(dif fe 2) 63 64)\n15\n```\n\n---\n\n### `++inv:fe`\n\nInverse\n\nInverts the order of the modular field.\n\n#### Accepts\n\n`a` is a `bloq` (and is the sample of the parent core).\n\n`b` is a `bloq`. (see [`$bloq`](/reference/hoon/stdlib/1c#bloq))\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  inv  |=(b=@ (sub (dec out) (sit b)))\n```\n\n#### Examples\n\n```\n> (~(inv fe 3) 255)\n0\n> (~(inv fe 3) 256)\n255\n```\n\n```\n> (~(inv fe 3) 0)\n255\n> (~(inv fe 3) 1)\n254\n> (~(inv fe 3) 2)\n253\n```\n\n```\n> (~(inv fe 3) 55)\n200\n```\n\n---\n\n### `++net:fe`\n\nFlip endianness\n\nReverses bytes within a block.\n\n#### Accepts\n\n`a` is a `bloq` (and the sample of the parent core).\n\n`b` is a `bloq`. (see [`$bloq`](/reference/hoon/stdlib/1c#bloq))\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  net  |=  b=@  ^-  @\n         =>  .(b (sit b))\n         ?:  (lte a 3)\n           b\n         =+  c=(dec a)\n         %+  con\n           (lsh c $(a c, b (cut c [0 1] b)))\n         $(a c, b (cut c [1 1] b))\n```\n\n#### Examples\n\n```\n> (~(net fe 3) 64)\n64\n> (~(net fe 3) 128)\n128\n> (~(net fe 3) 255)\n255\n> (~(net fe 3) 256)\n0\n> (~(net fe 3) 257)\n1\n```\n\n```\n> (~(net fe 3) 500)\n244\n> (~(net fe 3) 511)\n255\n> (~(net fe 3) 512)\n0\n> (~(net fe 3) 513)\n1\n```\n\n```\n> (~(net fe 3) 0)\n0\n> (~(net fe 3) 1)\n1\n> (~(net fe 0) 1)\n1\n> (~(net fe 0) 2)\n0\n> (~(net fe 0) 3)\n1\n```\n\n```\n> (~(net fe 6) 1)\n72.057.594.037.927.936\n> (~(net fe 6) 2)\n144.115.188.075.855.872\n> (~(net fe 6) 3)\n216.172.782.113.783.808\n> (~(net fe 6) 4)\n288.230.376.151.711.744\n> (~(net fe 6) 5)\n360.287.970.189.639.680\n```\n\n---\n\n### `++out:fe`\n\nMax integer value\n\nProduces the maximum integer value that the current block can store; `2^a^a`.\n\n#### Accepts\n\n`a` is a `bloq` (and is the sample of the parent core).\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  out  (bex (bex a))\n```\n\n#### Examples\n\n```\n> ~(out fe 0)\n2\n> ~(out fe 1)\n4\n> ~(out fe 2)\n16\n> ~(out fe 3)\n256\n> ~(out fe 4)\n65.536\n```\n\n```\n> ~(out fe 10)\n\\/179.769.313.486.231.590.772.930.519.078.902.473.361.797.697.894.230.657.273\\/\n  .430.081.157.732.675.805.500.963.132.708.477.322.407.536.021.120.113.879.87\n  1.393.357.658.789.768.814.416.622.492.847.430.639.474.124.377.767.893.424.8\n  65.485.276.302.219.601.246.094.119.453.082.952.085.005.768.838.150.682.342.\n  462.881.473.913.110.540.827.237.163.350.510.684.586.298.239.947.245.938.479\n  .716.304.835.356.329.624.224.137.216\n\\/                                                                           \\/\n```\n\n---\n\n### `++rol:fe`\n\nRoll left\n\nRolls `d` to the left by `c` `b`-sized blocks.\n\n#### Accepts\n\n`a` is a `bloq` (and is the sample of the parent core).\n\n`b` is a `bloq`.\n\n`c` is an atom.\n\n`d` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  rol  |=  [b=bloq c=@ d=@]  ^-  @\n         =+  e=(sit d)\n         =+  f=(bex (sub a b))\n         =+  g=(mod c f)\n         (sit (con (lsh [b g] e) (rsh [b (sub f g)] e)))\n```\n\n#### Examples\n\n```\n> `@ux`(~(rol fe 6) 4 3 0xabac.dedf.1213)\n0x1213.0000.abac.dedf\n\n> `@ux`(~(rol fe 6) 4 2 0xabac.dedf.1213)\n0xdedf.1213.0000.abac\n```\n\n```\n> `@t`(~(rol fe 5) 3 1 'dfgh')\n'hdfg'\n\n> `@t`(~(rol fe 5) 3 2 'dfgh')\n'ghdf'\n\n> `@t`(~(rol fe 5) 3 0 'dfgh')\n'dfgh'\n```\n\n---\n\n### `++ror:fe`\n\nRoll right\n\nRolls `d` to the right by `c` `b`-sized blocks.\n\n#### Accepts\n\n`a` is a `bloq` (and is the sample of the parent core).\n\n`b` is a `bloq`.\n\n`c` is an atom.\n\n`d` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  ror  |=  [b=bloq c=@ d=@]  ^-  @\n         =+  e=(sit d)\n         =+  f=(bex (sub a b))\n         =+  g=(mod c f)\n         (sit (con (rsh [b g] e) (lsh [b (sub f g)] e)))\n```\n\n#### Examples\n\n```\n> `@ux`(~(ror fe 6) 4 1 0xabac.dedf.1213)\n0x1213.0000.abac.dedf\n\n> `@ux`(~(ror fe 6) 3 5 0xabac.dedf.1213)\n0xacde.df12.1300.00ab\n\n> `@ux`(~(ror fe 6) 3 3 0xabac.dedf.1213)\n0xdf12.1300.00ab.acde\n```\n\n```\n> `@t`(~(rol fe 5) 3 0 'hijk')\n'hijk'\n\n> `@t`(~(rol fe 5) 3 1 'hijk')\n'khij'\n\n> `@t`(~(rol fe 5) 3 2 'hijk')\n'jkhi'\n```\n\n---\n\n### `++sum:fe`\n\nSum\n\nSums two numbers in this modular field.\n\n#### Accepts\n\n`a` is a `bloq` (and is the sample of the parent core).\n\n`b` is an atom.\n\n`c` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  sum  |=([b=@ c=@] (sit (add b c)))\n```\n\n#### Examples\n\n```\n> (~(sum fe 3) 10 250)\n4\n```\n\n```\n> (~(sum fe 0) 0 1)\n1\n> (~(sum fe 0) 0 2)\n0\n```\n\n```\n> (~(sum fe 2) 14 2)\n0\n> (~(sum fe 2) 14 3)\n1\n```\n\n```\n> (~(sum fe 4) 10.000 256)\n10.256\n> (~(sum fe 4) 10.000 100.000)\n44.464\n```\n\n---\n\n### `++sit:fe`\n\nEnforce modulo\n\nProduces an atom in the current modular block representation.\n\n#### Accepts\n\n`a` is a `bloq` (and is the sample of the parent core).\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  sit  |=(b=@ (end a b))\n```\n\n#### Examples\n\n```\n> (~(sit fe 3) 255)\n255\n> (~(sit fe 3) 256)\n0\n> (~(sit fe 3) 257)\n1\n```\n\n```\n> (~(sit fe 2) 257)\n1\n> (~(sit fe 2) 10.000)\n0\n> (~(sit fe 2) 100)\n4\n> (~(sit fe 2) 19)\n3\n> (~(sit fe 2) 17)\n1\n```\n\n```\n> (~(sit fe 0) 17)\n1\n> (~(sit fe 0) 0)\n0\n> (~(sit fe 0) 1)\n1\n```\n\n---\n",
    "con": "## `++con`\n\nBinary OR\n\nComputes the bitwise logical OR of two atoms, `a` and `b`, producing an atom.\n\n#### Accepts\n\n`a` is an atom\n\n`b` is an atom\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  con\n  ~/  %con\n  |=  [a=@ b=@]\n  =+  [c=0 d=0]\n  |-  ^-  @\n  ?:  ?&(=(0 a) =(0 b))  d\n  %=  $\n    a   (rsh 0 a)\n    b   (rsh 0 b)\n    c   +(c)\n    d   %+  add  d\n          %+  lsh  [0 c]\n          ?&  =(0 (end 0 a))\n              =(0 (end 0 b))\n          ==\n  ==\n```\n\n#### Examples\n\n```\n    > (con 0b0 0b1)\n    1\n\n    > (con 0 1)\n    1\n\n    > (con 0 0)\n    0\n\n    > `@ub`(con 0b1111.0000 0b1.0011)\n    0b1111.0011\n\n    > (con 4 4)\n    4\n\n    > (con 10.000 234)\n    10.234\n\n    > `@ub`534\n    0b10.0001.0110\n\n    > `@ub`987\n    0b11.1101.1011\n\n    > `@ub`(con 534 987)\n    0b11.1101.1111\n\n    > (con 534 987)\n    991\n```\n\n#### Discussion\n\n`con` performs the bitwise operation OR, a concept that's general to computing.\nIt compares each bit of its first sample to the corresponding bit of its second\nsample. If either bit is 1, the corresponding product bit is set\nto 1. Otherwise, the corresponding product bit is set to 0.\n\nTake the example of `(con 8 12)`. It's easy to see how this operation works when\nits samples and its product are stacked.\n\n```\n    0b1000     ::  8  (sample)\n    0b1100     ::  12 (sample)\n    0b1100     ::  12 (product)\n```\n\nNote that the names `con` (conjunction) for OR and `dis` (disjunction) for AND\nare given to opposite operators in Hoon when compared to other computing\ncontexts. That's because `0` is true in Hoon and `1` is false. Outside of Hoon,\nwhere `0` is false and `1` is true, bitwise OR is the logical disjunction and\nbitwise AND is the logical conjunction.\n\n---\n",
    "dis": "## `++dis`\n\nBinary AND\n\nComputes the bitwise logical AND of two atoms, `a` and `b`, producing an atom.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  dis\n  ~/  %dis\n  |=  [a=@ b=@]\n  =|  [c=@ d=@]\n  |-  ^-  @\n  ?:  ?|(=(0 a) =(0 b))  d\n  %=  $\n    a   (rsh 0 a)\n    b   (rsh 0 b)\n    c   +(c)\n    d   %+  add  d\n          %+  lsh  [0 c]\n          ?|  =(0 (end 0 a))\n              =(0 (end 0 b))\n          ==\n  ==\n```\n\n#### Examples\n\n```\n    > `@ub`9\n    0b1001\n\n    > `@ub`5\n    0b101\n\n    > `@ub`(dis 9 5)\n    0b1\n\n    > (dis 9 5)\n    1\n\n    > `@ub`534\n    0b10.0001.0110\n\n    > `@ub`987\n    0b11.1101.1011\n\n    > `@ub`(dis 534 987)\n    0b10.0001.0010\n\n    > (dis 534 987)\n    530\n```\n\n#### Discussion\n\n`dis` performs the bitwise AND, an operation general to computing. It compares\neach bit of its first sample to the corresponding bit of its second sample. If\nboth bits are 1, the corresponding product bit is set to 1. Otherwise, the\ncorresponding product bit is set to 0.\n\nTake the example of `(dis 8 12)`. It's easy to see how this operation works when\nits samples and its product are stacked.\n\n```\n    0b1000     ::  8  (sample)\n    0b1100     ::  12 (sample)\n    0b1000     ::  8  (product)\n```\n\nNote that the names `dis` (disjunction) for AND and `con` (conjuction) for OR\nare given to opposite operators in Hoon when compared to other computing\ncontexts. That's because `0` is true in Hoon and `1` is false. Outside of Hoon,\nwhere `0` is false and `1` is true, bitwise OR is the logical disjunction and\nbitwise AND is the logical conjunction.\n\n---\n",
    "mix": "## `++mix`\n\nBinary XOR\n\nProduces the bitwise logical XOR of two atoms, `a` and `b`, producing an atom.\n\n#### Accepts\n\n`a` is an atom\n\n`b` is an atom\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  mix\n  ~/  %mix\n  |=  [a=@ b=@]\n  ^-  @\n  =+  [c=0 d=0]\n  |-\n  ?:  ?&(=(0 a) =(0 b))  d\n  %=  $\n    a   (rsh 0 a)\n    b   (rsh 0 b)\n    c   +(c)\n    d   (add d (lsh [0 c] =((end 0 a) (end 0 b))))\n  ==\n```\n\n#### Examples\n\n```\n    > `@ub`2\n    0b10\n\n    > `@ub`3\n    0b11\n\n    > `@ub`(mix 2 3)\n    0b1\n\n    > (mix 2 3)\n    1\n\n    > `@ub`(mix 2 2)\n    0b0\n\n    > (mix 2 2)\n    0\n\n    > `@ub`534\n    0b10.0001.0110\n\n    > `@ub`987\n    0b11.1101.1011\n\n    > `@ub`(mix 534 987)\n    0b1.1100.1101\n\n    > (mix 534 987)\n    461\n```\n\n#### Discussion\n\n`mix` performs the bitwise XOR (exclusive-OR), an operation that's general to\ncomputing. compares each bit of its first sample to the corresponding bit of its\nsecond sample. If one bit is 0 and the other bit is 1, the corresponding product\nbit is set to 1. Otherwise, the corresponding product bit is set to 0.\n\nTake the example of `(mix 8 12)`. It's easy to see how this operation works when\nits samples and its product are stacked.\n\n```\n    0b1000     ::  8  (sample)\n    0b1100     ::  12 (sample)\n     0b100     ::  4 (product)\n```\n\n---\n",
    "not": "## `++not`\n\nBinary NOT\n\nComputes the bitwise logical NOT of the bottom `b` blocks of size `a`\nof `c`.\n\n#### Accepts\n\n`a` is a block size (see [`bloq`](/reference/hoon/stdlib/1c)).\n\n`b` is an atom.\n\n`c` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  not  |=  [a=bloq b=@ c=@]\n  (mix c (dec (bex (mul b (bex a)))))\n```\n\n#### Examples\n\n```\n    > `@ub`24\n    0b1.1000\n\n    > (not 0 5 24)\n    7\n\n    > `@ub`7\n    0b111\n\n    > (not 2 5 24)\n    1.048.551\n\n    > (not 2 5 1.048.551)\n    24\n\n    > (not 1 1 (not 1 1 10))\n    10\n```\n\n#### Discussion\n\nIn computing in general, the bitwise operation NOT simply turns a binary\nnumber's `0`s into `1`s, and vice versa.\n\nIn Hoon, we ask for a little more information to use `not`, because binary\nnumbers have a number of implicit leading zeroes differently depending on on\ntheir [block size](/reference/hoon/stdlib/1c). Decimal `7`, for example, is `0b111` in binary, and\nhas one implicit zero in the context of a block of size `2`, which has a\nbitwidth of 4. Let's try `not` on `7` with a single block of size `2`.\n\n```\n    > `@ub`(not 2 1 0b111)\n    0b1000\n\n    > `@u`0b1000\n    8\n```\n\nThis happened because `0b111` is considered as `0b0111` by the `not` operator\nwhen dealing with a single block of size `2`. The NOT of `7`, then, is `0b1000`,\nor `8` in decimal.\n\nWhen we pass `not` a single block of size `3`, there is a bitwidth of 8 to\nfill with binary information. So the remaining leading digits of `0b111` are,\nagain, treated as `0`.\n\n```\n    > `@ub`(not 3 1 0b111)\n    0b1111.1000\n\n    > `@u`0b1111.1000\n    248\n```\n\nThis works when going to a smaller block size, too.\n\n```\n    > `@ub`(not 1 1 0b1011)\n    0b100\n\n    > `@u`0b100\n    4\n```\n\nWhat's happening here may not be readily apparent. But we're only flipping the\nlast block of size `1` (bitwidth 2) of the binary `0b111`. That is, we leave\nthe \"0b1\" piece just the same and manipulate the \"11\" that the number ends with.\n\n---\n",
    "mug": "## `++mug` {% #mug %}\n\nmurmur3 scrambler\n\nHashes `a` with the 31-bit murmur3 non-cryptographic hash algorithm,\nproducing an atom.\n\n#### Accepts\n\n`a` is a noun.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  mug\n  ~/  %mug\n  |=  a=*\n  |^  ?@  a  (mum 0xcafe.babe 0x7fff a)\n      =/  b  (cat 5 $(a -.a) $(a +.a))\n      (mum 0xdead.beef 0xfffe b)\n  ::\n  ++  mum\n    |=  [syd=@uxF fal=@F key=@]\n    =/  wyd  (met 3 key)\n    =|  i=@ud\n    |-  ^-  @F\n    ?:  =(8 i)  fal\n    =/  haz=@F  (muk syd wyd key)\n    =/  ham=@F  (mix (rsh [0 31] haz) (end [0 31] haz))\n    ?.(=(0 ham) ham $(i +(i), syd +(syd)))\n  --\n```\n\n#### Examples\n\n```\n> (mug 10.000)\n795.713.195\n```\n\n```\n> (mug 10.001)\n420.521.697\n```\n\n```\n> (mug 1)\n1.901.865.568\n```\n\n```\n> (mug (some 10))\n750.200.080\n```\n\n```\n> (mug [1 2 3 4 5 ~])\n1.565.443.491\n```\n\n---\n",
    "muk": "## `++muk`\n\nStandard MurmurHash3\n\nImplementation of the 32-bit\n[MurmurHash3](https://en.wikipedia.org/wiki/MurmurHash#Algorithm)\nnon-cryptographic hash algorithm. Takes `syd` as the seed, `len` as the key length\nin [blocks](/reference/hoon/stdlib/2c) of size 3, and `key` as the key, producing an atom.\n\n#### Accepts\n\n`syd` is an atom.\n\n`len` is an atom.\n\n`key` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  muk                                                 ::  standard murmur3\n  ~%  %muk  ..muk  ~\n  =+  ~(. fe 5)\n  |=  [syd=@ len=@ key=@]\n  =.  syd      (end 5 syd)\n  =/  pad      (sub len (met 3 key))\n  =/  data     (weld (rip 3 key) (reap pad 0))\n  =/  nblocks  (div len 4)  ::  intentionally off-by-one\n  =/  h1  syd\n  =+  [c1=0xcc9e.2d51 c2=0x1b87.3593]\n  =/  blocks  (rip 5 key)\n  =/  i  nblocks\n  =.  h1  =/  hi  h1  |-\n    ?:  =(0 i)  hi\n    =/  k1  (snag (sub nblocks i) blocks)  ::  negative array index\n    =.  k1  (sit (mul k1 c1))\n    =.  k1  (rol 0 15 k1)\n    =.  k1  (sit (mul k1 c2))\n    =.  hi  (mix hi k1)\n    =.  hi  (rol 0 13 hi)\n    =.  hi  (sum (sit (mul hi 5)) 0xe654.6b64)\n    $(i (dec i))\n  =/  tail  (slag (mul 4 nblocks) data)\n  =/  k1    0\n  =/  tlen  (dis len 3)\n  =.  h1\n    ?+  tlen  h1  ::  fallthrough switch\n      %3  =.  k1  (mix k1 (lsh [0 16] (snag 2 tail)))\n          =.  k1  (mix k1 (lsh [0 8] (snag 1 tail)))\n          =.  k1  (mix k1 (snag 0 tail))\n          =.  k1  (sit (mul k1 c1))\n          =.  k1  (rol 0 15 k1)\n          =.  k1  (sit (mul k1 c2))\n          (mix h1 k1)\n      %2  =.  k1  (mix k1 (lsh [0 8] (snag 1 tail)))\n          =.  k1  (mix k1 (snag 0 tail))\n          =.  k1  (sit (mul k1 c1))\n          =.  k1  (rol 0 15 k1)\n          =.  k1  (sit (mul k1 c2))\n          (mix h1 k1)\n      %1  =.  k1  (mix k1 (snag 0 tail))\n          =.  k1  (sit (mul k1 c1))\n          =.  k1  (rol 0 15 k1)\n          =.  k1  (sit (mul k1 c2))\n          (mix h1 k1)\n    ==\n  =.  h1  (mix h1 len)\n  |^  (fmix32 h1)\n  ++  fmix32\n    |=  h=@\n    =.  h  (mix h (rsh [0 16] h))\n    =.  h  (sit (mul h 0x85eb.ca6b))\n    =.  h  (mix h (rsh [0 13] h))\n    =.  h  (sit (mul h 0xc2b2.ae35))\n    =.  h  (mix h (rsh [0 16] h))\n    h\n  --\n```\n\n#### Examples\n\n```\n    > (muk 6 1 3)\n    3.427.677.118\n\n    > (muk 6 2 'jerry')\n    ! exit\n\n    > (muk 6 2 'je')\n    3.602.081.716\n\n    > (met 3 'jerry')\n    5\n\n    > (met 3 'je')\n    2\n\n    > (muk 6 5 'jerry')\n    1.276.447.489\n\n    > (muk 6 15 'jerry')\n    2.881.503.571\n\n    > =e (cut 3 [0 2] eny)                            :: `eny` is 512 bits of entropy (a random number).\n    > e\n    44.228\n\n    > (muk e 11 10.000)\n    246.077.549\n```\n\n---\n",
    "aor": "## `++aor`\n\nAlphabetical order\n\nComputes whether `a` and `b` are in alphabetical order, producing a flag. Orders atoms before cells, and atoms in ascending LSB order.\n\n#### Accepts\n\n`a` is a noun.\n\n`b` is a noun.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  aor\n  ~/  %aor\n  |=  [a=* b=*]\n  ^-  ?\n  ?:  =(a b)  &\n  ?.  ?=(@ a)\n    ?:  ?=(@ b)  |\n    ?:  =(-.a -.b)\n      $(a +.a, b +.b)\n    $(a -.a, b -.b)\n  ?.  ?=(@ b)  &\n  |-\n  =+  [c=(end 3 a) d=(end 3 b)]\n  ?:  =(c d)\n    $(a (rsh 3 a), b (rsh 3 b))\n  (lth c d)\n```\n\n#### Examples\n\n```\n> (aor 'a' 'b')\n%.y\n> (aor 'b' 'a')\n%.n\n> (aor 'a' 'a')\n%.y\n\n> (aor 1 2)\n%.y\n> (aor 2 1)\n%.n\n\n> (aor ['a' ~] 'b')\n%.n\n> (aor 'b' ['a' ~])\n%.y\n\n> (aor ['a' ~] ['b' ~])\n%.y\n> (aor ['b' ~] ['a' ~])\n%.n\n\n> (aor \"abca\" \"abcz\")\n%.y\n> (aor \"abcz\" \"abca\")\n%.n\n\n> (aor 0b1011 0b1010)\n%.n\n> (aor 0b1010 0b1011)\n%.y\n\n> (aor [1 2] [2 1])\n%.y\n> (aor [2 1] [1 2])\n%.n\n```\n\nNote the possible differences with `+dor` due to comparing one byte at a time:\n\n```\n> (aor 0b1001.0000.0000 0b1000.1000.0000)\n%.y\n> (dor 0b1001.0000.0000 0b1000.1000.0000)\n%.n\n```\n\n#### Discussion\n\nThis is different than [+dor](#dor) in that it compares atoms one byte at a time, while `+dor` compares whole atoms at once. Note that because it simply compares bytes, it doesn't account for multi-byte UTF-8 characters and the like.\n\n---\n",
    "dor": "## `++dor`\n\nDepth order\n\nComputes whether `a` and `b` are in ascending tree depth order, producing a flag. Orders atoms before cells, and atoms in ascending numerical order.\n\n#### Accepts\n\n`a` is a noun.\n\n`b` is a noun.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  dor\n  ~/  %dor\n  |=  [a=* b=*]\n  ^-  ?\n  ?:  =(a b)  &\n  ?.  ?=(@ a)\n    ?:  ?=(@ b)  |\n    ?:  =(-.a -.b)\n      $(a +.a, b +.b)\n    $(a -.a, b -.b)\n  ?.  ?=(@ b)  &\n  (lth a b)\n```\n\n#### Examples\n\n```\n> (dor 1 2)\n%.y\n\n> (dor 2 1)\n%.n\n\n> (dor ~[1 2 3] ~[1 2 4])\n%.y\n\n> (dor ~[1 2 4] ~[1 2 3])\n%.n\n\n> (dor `(list @)`~[99 100 10.000] ~[99 101 10.000])\n%.y\n\n> (dor ~[99 101 10.999] `(list @)`~[99 100 10.000])\n%.n\n```\n\nNote the possible difference with [+aor](#aor) due to comparing whole atoms rather than one byte at a time:\n\n```\n> (aor 0b1001.0000.0000 0b1000.1000.0000)\n%.y\n> (dor 0b1001.0000.0000 0b1000.1000.0000)\n%.n\n```\n\n#### Discussion\n\nIf `a` and `b` are both atoms, `dor` is equivalent to [`lte`](/reference/hoon/stdlib/1a#lte). If they're\ncells, `dor` recurses on the heads, and then if the heads are the same it checks\nthe tails.\n\nIf one sample is a cell and the other is an atom, the cell sample is treated as\n\"greater.\"\n\n---\n",
    "gor": "## `++gor`\n\nMug order\n\nComputes whether of `(mug a)` and `(mug b)` are in ascending numeric order,\nproducing a flag. If the `mug` hashes are equal, `a` and `b` are compared by\n`dor` instead.\n\n[`mug`](/reference/hoon/stdlib/2e#mug) is the the 31-bit nonzero FNV-1a hash algorithm.\n\n#### Accepts\n\n`a` is a noun.\n\n`b` is a noun.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  gor\n  ~/  %gor\n  |=  [a=* b=*]\n  ^-  ?\n  =+  [c=(mug a) d=(mug b)]\n  ?:  =(c d)\n    (dor a b)\n  (lth c d)\n```\n\n#### Examples\n\n```\n> (gor 'd' 'c')\n%.y\n\n> 'd'\n'd'\n> 'c'\n'c'\n\n> `@ud`'d'\n100\n> `@ud`'c'\n99\n\n> (mug 'd')\n1.628.185.714\n> (mug 'c')\n1.712.073.811\n\n> (gor 'd' 'c')\n%.y\n> (gor 'c' 'd')\n%.n\n```\n\n```\n> (gor \"foo\" \"bar\")\n%.n\n```\n\n```\n> (gor (some 10) `(list @)`[1 2 3 ~])\n%.n\n```\n\n#### Discussion\n\n`map`s use `gor` on the key for horizontal ordering and `mor` for\nvertical order. `map`s only look at the keys (the head of the key-value pair\nelements) for ordering.\n\n---\n",
    "mor": "## `++mor`\n\n(more) mug order\n\nComputes whether the double-hashes `(mug (mug a))` and `(mug (mug b))` are in\nascending numeric order, producing a flag. If the double-`mug` hashes are\nequal, `a` and `b` are compared by `dor` instead.\n\n[`mug`](/reference/hoon/stdlib/2e#mug) is the the 31-bit nonzero FNV-1a hash algorithm.\n\n#### Accepts\n\n`a` is a noun\n\n`b` is a noun\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  mor\n  ~/  %mor\n  |=  [a=* b=*]\n  ^-  ?\n  =+  [c=(mug (mug a)) d=(mug (mug b))]\n  ?:  =(c d)\n    (dor a b)\n  (lth c d)\n```\n\n#### Examples\n\n```\n    > (mor 'f' 'g')\n    %.y\n\n    > [(mug 'f') (mug 'g')]\n    [1.661.740.952 1.644.963.335]\n\n    > [(mug (mug 'f')) (mug (mug 'g'))]\n    [261.421.509 1.861.258.547]\n\n    > (mor 'a' 'z')\n    %.n\n\n    > (mor 43.326 41.106)\n    %.n\n```\n\n#### Discussion\n\nMaps, sets, and queues all use `mor` to check for vertical ordering. Maps and\nsets also use `gor` for horizontal order, but queues use\nvertical ordering alone.\n\nSince hashing removes correlation, double-`mug`ging with `mor` removes\ncorrelation with single-`mug`ged `gor`. Vertical order becomes uncorrelated\nwith horizontal order.\n\n---\n",
    "pow": "## `++pow`\n\nComputes `a` raised to the power of `b`, producing an atom.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  pow\n  ~/  %pow\n  |=  [a=@ b=@]\n  ?:  =(b 0)  1\n  |-  ?:  =(b 1)  a\n  =+  c=$(b (div b 2))\n  =+  d=(mul c c)\n  ?~  (dis b 1)  d  (mul d a)\n```\n\n#### Examples\n\n```\n    > (pow 2 6)\n    64\n\n    > (pow 6 2)\n    36\n\n    > (pow 7 (add 2 2))\n    2.401\n\n    > (pow 2 0)\n    1\n\n    > `@ux`(pow 0x1b 2)\n    0x2d9\n```\n\n---\n",
    "sqt": "## `++sqt`\n\nComputes the square root of `a` and its remainder.\n\n#### Accepts\n\n`a` is an atom.\n\n#### Produces\n\nA cell of atoms.\n\n#### Source\n\n```hoon\n++  sqt\n  ~/  %sqt\n  |=  a=@  ^-  [p=@ q=@]\n  ?~  a  [0 0]\n  =+  [q=(div (dec (xeb a)) 2) r=0]\n  =-  [-.b (sub a +.b)]\n  ^=  b  |-\n  =+  s=(add r (bex q))\n  =+  t=(mul s s)\n  ?:  =(q 0)\n    ?:((lte t a) [s t] [r (mul r r)])\n  ?:  (lte t a)\n    $(r s, q (dec q))\n  $(q (dec q))\n```\n\n#### Examples\n\n```\n    > (sqt 4)\n    [p=2 q=0]\n\n    > (sqt 6)\n    [p=2 q=2]\n\n    > (sqt 2)\n    [p=1 q=1]\n\n    > (sqt 0b1101)\n    [p=3 q=4]\n\n    > `@ux`(sqt 0b1101)\n    ! exit\n```\n\n---\n",
    "in": "## `++in`\n\nSet operations\n\nCore whose arms contain a variety of functions that operate on `set`s. Its\nsample accepts the input `set` to be manipulated.\n\n#### Accepts\n\nA `set`.\n\n#### Source\n\n```hoon\n  ~/  %in\n  =|  a=(tree)\n  |@\n```\n\n#### Examples\n\n```\n> ~(. in (sy \"asd\"))\n<16.ufw [a=?(%~ [?(n=@tD n=#1) l=nlr(?(@tD #1)) r=nlr(?(@tD ^#1.?(@tD #1)))]) <123.zao 46.hgz 1.pnw %140>]>\n```\n\n### `++all:in`\n\nLogical AND\n\nComputes the logical AND on every element in `a` slammed with `b`, producing a\nflag.\n\n#### Accepts\n\n`a` is a `set`, and is the sample of `+in`.\n\n`b` is a gate that accepts a noun and produces a flag.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  all\n  ~/  %all\n  |*  b=$-(* ?)\n  |-  ^-  ?\n  ?~  a\n    &\n  ?&((b n.a) $(a l.a) $(a r.a))\n```\n\n#### Examples\n\n```\n> (~(all in (silt ~[1 2 3 4])) |=(a=@ (lth a 5)))\n%.y\n\n> (~(all in (silt ~[1 2 3 4 5])) |=(a=@ (lth a 5)))\n%.n\n```\n\n---\n\n### `++any:in`\n\nLogical OR\n\nComputes the logical OR on every element of `a` slammed with `b`, producing a\nflag.\n\n#### Accepts\n\n`a` is a `set`, and is the sample of `+in`.\n\n`b` is a gate that accepts a noun and produces a flag.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  any\n  ~/  %any\n  |*  b=$-(* ?)\n  |-  ^-  ?\n  ?~  a\n    |\n  ?|((b n.a) $(a l.a) $(a r.a))\n```\n\n#### Examples\n\n```\n> (~(any in (silt ~[2 3 4 5])) |=(a=@ (lth a 3)))\n%.y\n\n> (~(any in (silt ~[3 4 5])) |=(a=@ (lth a 3)))\n%.n\n```\n\n---\n\n### `++apt:in`\n\nCheck correctness\n\nComputes whether `a` has a correct horizontal order and a correct vertical\norder, producing a flag.\n\n#### Accepts\n\n`a` is a set.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  apt\n  =<  $\n  ~/  %apt\n  =|  [l=(unit) r=(unit)]\n  |.  ^-  ?\n  ?~  a   &\n  ?&  ?~(l & (gor n.a u.l))\n      ?~(r & (gor u.r n.a))\n      ?~(l.a & ?&((mor n.a n.l.a) $(a l.a, l `n.a)))\n      ?~(r.a & ?&((mor n.a n.r.a) $(a r.a, r `n.a)))\n  ==\n```\n\n#### Examples\n\n```\n> ~(apt in ~)\n%.y\n```\n\n```\n> =a (silt ~[1 2 3])\n> a\n[n=2 l={1} r={3}]\n> ~(apt in a)\n%.y\n\n> =z ?~(a ~ a(n 10))\n> z\n[n=10 l={1} r={3}]\n> ~(apt in z)\n%.n\n```\n\n#### Discussion\n\nSee section [`2f`](/reference/hoon/stdlib/2f) for more information on noun ordering.\n\n---\n\n### `++bif:in`\n\nBifurcate\n\nSplits set `a` into sets `l` and `r`, which contain the items either side of `b` but not including `b`.\n\n#### Accepts\n\n`a` is a set, and is the sample of `+in`.\n\n`b` is a noun.\n\n#### Produces\n\nA cell of two sets.\n\n#### Source\n\n```hoon\n++  bif\n  ~/  %bif\n  |*  b=*\n  ^+  [l=a r=a]\n  =<  +\n  |-  ^+  a\n  ?~  a\n    [b ~ ~]\n  ?:  =(b n.a)\n    a\n  ?:  (gor b n.a)\n    =+  c=$(a l.a)\n    ?>  ?=(^ c)\n    c(r a(l r.c))\n  =+  c=$(a r.a)\n  ?>  ?=(^ c)\n  c(l a(r l.c))\n```\n\n#### Examples\n\n```\n> =a `(set @)`(silt (gulf 1 20))\n> a\n{17 8 20 13 11 5 19 7 15 10 18 14 6 12 9 1 2 3 16 4}\n\n> (~(bif in a) 10)\n[l=[n=11 l={17 8 20 13} r={5 19 7 15}] r=[n=12 l={18 14 6} r={9 1 2 3 16 4}]]\n\n> `[(set @) (set @)]`(~(bif in a) 10)\n[{17 8 20 13 11 5 19 7 15} {18 14 6 12 9 1 2 3 16 4}]\n```\n\n#### Discussion\n\nNote that `set`s are horizontally ordered by the [mug](/reference/hoon/stdlib/2e#mug) hash of their items and vertically ordered by the double-`mug` hash of their items. This means bifurcating the set of numbers `(silt ~[10 20 30 40 50])` at `30` will not produce `[{10 20} {40 50}]`, but rather `[{20} {10 40 50}]` due to the tree structure resulting from their `mug` hashes.\n\n---\n\n### `++del:in`\n\nRemove noun\n\nRemoves `b` from the `set` `a`.\n\n#### Accepts\n\n`a` is a set, and is the sample of `+in`.\n\n`b` is a noun.\n\n#### Produces\n\nA set.\n\n#### Source\n\n```hoon\n++  del\n  ~/  %del\n  |*  b=*\n  |-  ^+  a\n  ?~  a\n    ~\n  ?.  =(b n.a)\n    ?:  (gor b n.a)\n      a(l $(a l.a))\n    a(r $(a r.a))\n  |-  ^-  [$?(~ _a)]\n  ?~  l.a  r.a\n  ?~  r.a  l.a\n  ?:  (mor n.l.a n.r.a)\n    l.a(r $(l.a r.l.a))\n  r.a(l $(r.a l.r.a))\n```\n\n#### Examples\n\n```\n> `(set @)`(~(del in (silt ~[1 2 3 4 5])) 3)\n{5 1 2 4}\n```\n\n```\n> `(set @t)`(~(del in (silt ~['foo' 'bar' 'baz'])) 'bar')\n{'baz' 'foo'}\n```\n\n```\n> `(set @)`(~(del in (silt ~[1 2 3 4 5])) 10)\n{5 1 2 3 4}\n```\n\n```\n> `(set @)`(~(del in ~) 10)\n{}\n```\n\n---\n\n### `++dif:in`\n\nDifference\n\nComputes the difference between `a` and `b`, producing the set of items in `a`\nthat are not in `b`.\n\n#### Accepts\n\n`a` is a set, and is the sample of `+in`.\n\n`b` is a set.\n\n#### Produces\n\nA set.\n\n#### Source\n\n```hoon\n++  dif\n  ~/  %dif\n  =+  b=a\n  |@\n  ++  $\n    |-  ^+  a\n    ?~  b\n      a\n    =+  c=(bif n.b)\n    ?>  ?=(^ c)\n    =+  d=$(a l.c, b l.b)\n    =+  e=$(a r.c, b r.b)\n    |-  ^-  [$?(~ _a)]\n    ?~  d  e\n    ?~  e  d\n    ?:  (mor n.d n.e)\n      d(r $(d r.d))\n    e(l $(e l.e))\n  --\n```\n\n#### Examples\n\n```\n> =a (silt ~[1 2 3 4 5])\n> =b (silt ~[3 4])\n\n> `(set @)`(~(dif in a) b)\n{5 1 2}\n```\n\n---\n\n### `++dig:in`\n\nAddress b in a\n\nProduce the tree address of `b` within `a`.\n\n#### Accepts\n\n`a` is a set, and is the sample of `+in`.\n\n`b` is a noun.\n\n#### Produces\n\nThe `unit` of an atom.\n\n#### Source\n\n```hoon\n++  dig\n  |=  b=*\n  =+  c=1\n  |-  ^-  (unit @)\n  ?~  a  ~\n  ?:  =(b n.a)  [~ u=(peg c 2)]\n  ?:  (gor b n.a)\n    $(a l.a, c (peg c 6))\n  $(a r.a, c (peg c 7))\n```\n\n#### Examples\n\n```\n> =a (silt ~[1 2 3 4 5 6 7])\n\n> -.a\nn=6\n\n> (~(dig in a) 7)\n[~ 12]\n\n> (~(dig in a) 2)\n[~ 60]\n\n> (~(dig in a) 6)\n[~ 2]\n\n> (~(dig in a) 10)\n~\n```\n\n#### Discussion\n\nFor more on the tree addressing system, see section [1b](/reference/hoon/stdlib/1b).\n\n---\n\n### `++gas:in`\n\nConcatenate\n\nInsert the elements of a `list` `b` into a `set` `a`.\n\n#### Accepts\n\n`a` is a set, and is the sample of `+in`.\n\n`b` is a list.\n\n#### Produces\n\nA `set`.\n\n#### Source\n\n```hoon\n++  gas\n  ~/  %gas\n  |=  b=(list _?>(?=(^ a) n.a))\n  |-  ^+  a\n  ?~  b\n    a\n  $(b t.b, a (put i.b))\n```\n\n#### Examples\n\n```\n> =a (silt ~['foo' 'bar' 'baz'])\n> `(set @t)`a\n{'bar' 'baz' 'foo'}\n\n> `(set @t)`(~(gas in a) ~['foo' 'foo' 'foo' 'foo'])\n{'bar' 'baz' 'foo'}\n\n> `(set @t)`(~(gas in a) ~['abc' 'xyz' '123'])\n{'xyz' 'bar' 'baz' 'foo' 'abc' '123'}\n```\n\n---\n\n### `++has:in`\n\nb in a?\n\nChecks if `b` is an element of `a`, producing a flag.\n\n#### Accepts\n\n`a` is a set, and is the sample of `+in`.\n\n`b` is a noun.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  has\n  ~/  %has\n  |*  b=*\n  ^-  ?\n  %.  [~ b]\n  |=  b=(unit _?>(?=(^ a) n.a))\n  =>  .(b ?>(?=(^ b) u.b))\n  |-  ^-  ?\n  ?~  a\n    |\n  ?:  =(b n.a)\n    &\n  ?:  (gor b n.a)\n    $(a l.a)\n  $(a r.a)\n```\n\n#### Examples\n\n```\n> =a (silt ~[1 2 3 4 5])\n\n> (~(has in a) 2)\n%.y\n\n> (~(has in a) 6)\n%.n\n```\n\n---\n\n### `++int:in`\n\nIntersection\n\nProduces a set of the intersection between two sets of the same type,\n`a` and `b`.\n\n#### Accepts\n\n`a` is a set, and is the sample of `+in`.\n\n`b` is a set.\n\n#### Produces\n\nA `set`.\n\n#### Source\n\n```hoon\n++  int\n  ~/  %int\n  =+  b=a\n  |@\n  ++  $\n    |-  ^+  a\n    ?~  b\n      ~\n    ?~  a\n      ~\n    ?.  (mor n.a n.b)\n      $(a b, b a)\n    ?:  =(n.b n.a)\n      a(l $(a l.a, b l.b), r $(a r.a, b r.b))\n    ?:  (gor n.b n.a)\n      %-  uni(a $(a l.a, r.b ~))  $(b r.b)\n    %-  uni(a $(a r.a, l.b ~))  $(b l.b)\n  --\n```\n\n#### Examples\n\n```\n> `(set @tD)`(~(int in (silt \"foobar\")) (silt \"bar\"))\n{'r' 'b' 'a'}\n\n> `(set @tD)`(~(int in (silt \"foobar\")) ~)\n{}\n\n> `(set @tD)`(~(int in (silt \"foobar\")) (silt \"baz\"))\n{'b' 'a'}\n```\n\n---\n\n### `++put:in`\n\nPut b in a\n\nAdd an element `b` to the set `a`, producing a set.\n\n#### Accepts\n\n`a` is a set, and is the sample of `+in`.\n\n`b` is a noun.\n\n#### Produces\n\nA `set`.\n\n#### Source\n\n```hoon\n++  put\n  ~/  %put\n  |*  b=*\n  |-  ^+  a\n  ?~  a\n    [b ~ ~]\n  ?:  =(b n.a)\n    a\n  ?:  (gor b n.a)\n    =+  c=$(a l.a)\n    ?>  ?=(^ c)\n    ?:  (mor n.a n.c)\n      a(l c)\n    c(r a(l r.c))\n  =+  c=$(a r.a)\n  ?>  ?=(^ c)\n  ?:  (mor n.a n.c)\n    a(r c)\n  c(l a(r l.c))\n```\n\n#### Examples\n\n```\n> `(set @)`(~(put in (silt ~[1 2 3])) 4)\n{1 2 3 4}\n\n> `(set @)`(~(put in `(set @)`~) 42)\n{42}\n```\n\n---\n\n### `++rep:in`\n\nAccumulate\n\nAccumulate the elements of `a` using binary gate `b`.\n\n#### Accepts\n\n`a` is a `set`, and is the sample of `+in`.\n\n`b` is a gate.\n\n#### Produces\n\nA noun.\n\n#### Source\n\n```hoon\n++  rep\n  ~/  %rep\n  |*  b=_=>(~ |=([* *] +<+))\n  |-\n  ?~  a  +<+.b\n  $(a r.a, +<+.b $(a l.a, +<+.b (b n.a +<+.b)))\n```\n\n#### Examples\n\n```\n> (~(rep in (silt ~[1 2 3 4 5])) add)\nb=15\n```\n\n```\n> `@t`(~(rep in (silt ~['foo' 'bar' 'baz'])) |=(a=[@ @] (cat 3 a)))\n'foobarbaz'\n```\n\n---\n\n### `++run:in`\n\nApply gate to set\n\nProduce a `set` containing the products of gate `b` applied to each element\nin `a`.\n\n#### Accepts\n\n`a` is a `set`.\n\n`b` is a gate.\n\n#### Produces\n\nA set.\n\n#### Source\n\n```hoon\n++  run\n  ~/  %run\n  |*  b=gate\n  =+  c=`(set _?>(?=(^ a) (b n.a)))`~\n  |-  ?~  a  c\n  =.  c  (~(put in c) (b n.a))\n  =.  c  $(a l.a, c c)\n  $(a r.a, c c)\n```\n\n#### Examples\n\n```\n> =s (silt ~[\"a\" \"A\" \"b\" \"c\"])\n> `(set tape)`s\n{\"A\" \"a\" \"c\" \"b\"}\n\n> (~(run in s) cuss)\n{\"A\" \"C\" \"B\"}\n```\n\n---\n\n### `++tap:in`\n\nSet to list\n\nFlattens the `set` `a` into a `list`.\n\n#### Accepts\n\n`a` is an set.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  tap\n  =<  $\n  ~/  %tap\n  =+  b=`(list _?>(?=(^ a) n.a))`~\n  |.  ^+  b\n  ?~  a\n    b\n  $(a r.a, b [n.a $(a l.a)])\n```\n\n#### Examples\n\n```\n> ~(tap in (silt \"foobar\"))\n\"oafbr\"\n```\n\n```\n> ~(tap in (silt ~[1 2 3 4 5]))\n~[4 3 2 1 5]\n```\n\n---\n\n### `++uni:in`\n\nUnion\n\nProduces a set of the union between two sets of the same type, `a` and\n`b`.\n\n#### Accepts\n\n`a` is a set, and is the sample of `+in`.\n\n`b` is a set.\n\n#### Produces\n\nA set.\n\n#### Source\n\n```hoon\n++  uni\n  ~/  %uni\n  =+  b=a\n  |@\n  ++  $\n    ?:  =(a b)  a\n    |-  ^+  a\n    ?~  b\n      a\n    ?~  a\n      b\n    ?:  =(n.b n.a)\n      b(l $(a l.a, b l.b), r $(a r.a, b r.b))\n    ?:  (mor n.a n.b)\n      ?:  (gor n.b n.a)\n        $(l.a $(a l.a, r.b ~), b r.b)\n      $(r.a $(a r.a, l.b ~), b l.b)\n    ?:  (gor n.a n.b)\n      $(l.b $(b l.b, r.a ~), a r.a)\n    $(r.b $(b r.b, l.a ~), a l.a)\n  --\n```\n\n#### Examples\n\n```\n> =a (silt ~[1 2 3 4 5])\n> =b (silt ~[4 5 6 7 8])\n\n> `(set @)`(~(uni in a) b)\n{8 5 7 6 1 2 3 4}\n\n> `(set @)`(~(uni in a) ~)\n{5 1 2 3 4}\n\n> `(set @)`(~(uni in `(set @)`~) b)\n{8 5 7 6 4}\n```\n\n---\n\n### `++wyt:in`\n\nSet size\n\nProduces the number of elements in set `a` as an atom.\n\n#### Accepts\n\n`a` is an set.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  wyt\n  =<  $\n  ~%  %wyt  +  ~\n  |.  ^-  @\n  ?~(a 0 +((add $(a l.a) $(a r.a))))\n--\n```\n\n#### Examples\n\n```\n> ~(wyt in (silt ~[1 2 3 4]))\n4\n```\n\n```\n> ~(wyt in `(set @)`~)\n0\n```\n\n---\n",
    "by": "## `++by`\n\nMap operations\n\nContainer arm for map operation arms. A map is a set of key-value pairs. The\ncontained arms inherit its sample map, `a`.\n\n#### Accepts\n\n`a` is a map.\n\n#### Source\n\n```hoon\n++  by\n  ~/  %by\n  =|  a=(tree (pair))  ::  (map)\n  =*  node  ?>(?=(^ a) n.a)\n  |@\n```\n\n#### Examples\n\n```\n> ~(. by (malt (limo ~[a+1 b+2 c+3])))\n< 27.jus\n  [   a\n    ?(\n      %~\n      [ n=[?(p=%a p=%b p=%c) q=@ud]\n        l=nlr([p=?(%a %b %c) q=@ud])\n        r=nlr([p=?(%a %b %c) q=@ud])\n      ]\n    )\n    <123.zao 46.hgz 1.pnw %140>\n  ]\n>\n```\n\n---\n\n### `++all:by`\n\nLogical AND\n\nComputes the logical AND on the results of slamming every element in map `a`\nwith gate `b`.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a gate.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  all\n  ~/  %all\n  |*  b=$-(* ?)\n  |-  ^-  ?\n  ?~  a\n    &\n  ?&((b q.n.a) $(a l.a) $(a r.a))\n```\n\n#### Examples\n\n```\n> =a (malt (limo ~[a+1 b+[2 3]]))\n\n> (~(all by a) |=(a=* ?@(a & |)))\n%.n\n```\n\n```\n> =a (malt (limo ~[a+1 b+2 c+3 d+4 e+5]))\n\n> (~(all by a) |=(a=@ (lte a 6)))\n%.y\n\n> (~(all by a) |=(a=@ (lte a 4)))\n%.n\n```\n\n---\n\n### `++any:by`\n\nLogical OR\n\nComputes the logical OR on the results of slamming every element with\ngate `b`.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a wet gate.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  any\n  ~/  %any\n  |*  b=$-(* ?)\n  |-  ^-  ?\n  ?~  a\n    |\n  ?|((b q.n.a) $(a l.a) $(a r.a))\n```\n\n#### Examples\n\n```\n> =a (malt (limo ~[a+1 b+[2 3]]))\n\n> (~(any by a) |=(a=* ?@(a & |)))\n%.y\n```\n\n```\n> =a (malt (limo ~[a+1 b+2 c+3 d+4 e+5]))\n\n> (~(any by a) |=(a=@ (lte a 4)))\n%.y\n```\n\n---\n\n### `++apt:by`\n\nCheck correctness\n\nComputes whether `a` has a correct horizontal order and a correct vertical\norder, producing a flag.\n\n#### Accepts\n\n`a` is a map.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  apt\n  =<  $\n  ~/  %apt\n  =|  [l=(unit) r=(unit)]\n  |.  ^-  ?\n  ?~  a   &\n  ?&  ?~(l & &((gor p.n.a u.l) !=(p.n.a u.l)))\n      ?~(r & &((gor u.r p.n.a) !=(u.r p.n.a)))\n      ?~  l.a   &\n      &((mor p.n.a p.n.l.a) !=(p.n.a p.n.l.a) $(a l.a, l `p.n.a))\n      ?~  r.a   &\n      &((mor p.n.a p.n.r.a) !=(p.n.a p.n.r.a) $(a r.a, r `p.n.a))\n  ==\n```\n\n#### Examples\n\n```\n> =a (malt `(list [@tas @])`~[a+1 b+2 c+3 d+4 e+5])\n\n> ~(apt by a)\n%.y\n\n> =z ?~(a ~ a(p.n `@tas`%z))\n\n> z\n[n=[p=%z q=2] l={[p=%e q=5]} r={[p=%d q=4] [p=%a q=1] [p=%c q=3]}]\n\n> ~(apt by z)\n%.n\n```\n\n#### Discussion\n\nSee section [`2f`](/reference/hoon/stdlib/2f) for more information on noun ordering.\n\n### `++bif:by`\n\nBifurcate\n\nSplits map `a` into two maps `l` and `r`, which contain the items either side of key `b` with value `c` but not including `b`-`c`.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a noun.\n\n`c` is a noun.\n\n#### Produces\n\nA cell of two maps.\n\n#### Source\n\n```hoon\n++  bif\n  ~/  %bif\n  |*  [b=* c=*]\n  ^+  [l=a r=a]\n  =<  +\n  |-  ^+  a\n  ?~  a\n    [[b c] ~ ~]\n  ?:  =(b p.n.a)\n    ?:  =(c q.n.a)\n      a\n    a(n [b c])\n  ?:  (gor b p.n.a)\n    =+  d=$(a l.a)\n    ?>  ?=(^ d)\n    d(r a(l r.d))\n  =+  d=$(a r.a)\n  ?>  ?=(^ d)\n  d(l a(r l.d))\n```\n\n#### Examples\n\n```\n> =a (malt `(list [@tas @])`~[a+1 b+2 c+3 d+4 e+5])\n\n> (~(bif by a) b+2)\n[l=[n=[p=%e q=5] l=~ r=~] r=[n=[p=%d q=4] l=~ r=[n=[p=%c q=3] l={[p=%a q=1]} r={}]]]\n\n> `[(map @tas @) (map @tas @)]`(~(bif by a) b+2)\n[{[p=%e q=5]} {[p=%d q=4] [p=%a q=1] [p=%c q=3]}]\n```\n\n#### Discussion\n\nNote that `map`s are horizontally ordered by the [mug](/reference/hoon/stdlib/2e#mug) hash of their keys and vertically ordered by the double-`mug` hash of their keys. This means bifurcating the map `(malt ~[10^10 20^20 30^30 40^40 50^50])` at `30^30` will not produce `[{10^10 20^20} {40^40 50^50}]`, but rather `[{20^20} {10^10 40^40 50^50}]` due to the tree structure resulting from their `mug` hashes.\n\n---\n\n### `++del:by`\n\nDelete\n\nProduces map `a` with the element located at key `b` removed.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a key as a noun.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n++  del\n  ~/  %del\n  |*  b=*\n  |-  ^+  a\n  ?~  a\n    ~\n  ?.  =(b p.n.a)\n    ?:  (gor b p.n.a)\n      a(l $(a l.a))\n    a(r $(a r.a))\n  |-  ^-  [$?(~ _a)]\n  ?~  l.a  r.a\n  ?~  r.a  l.a\n  ?:  (mor p.n.l.a p.n.r.a)\n    l.a(r $(l.a r.l.a))\n  r.a(l $(r.a l.r.a))\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> `(map @tas @)`(~(del by a) %z)\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> `(map @tas @)`(~(del by a) %b)\n{[p=%d q=4] [p=%a q=1] [p=%c q=3]}\n```\n\n---\n\n### `++dif:by`\n\nDifference\n\nComputes the difference between `a` and `b`, producing the map of key-value pairs in `a` whose keys are not in `b`.\n\n#### Accepts\n\n`a` is a `map`, and is the sample of `+by`.\n\n`b` is a `map`.\n\n#### Produces\n\nA `map`.\n\n#### Source\n\n```hoon\n++  dif\n  ~/  %dif\n  =+  b=a\n  |@\n  ++  $\n    |-  ^+  a\n    ?~  b\n      a\n    =+  c=(bif p.n.b q.n.b)\n    ?>  ?=(^ c)\n    =+  d=$(a l.c, b l.b)\n    =+  e=$(a r.c, b r.b)\n    |-  ^-  [$?(~ _a)]\n    ?~  d  e\n    ?~  e  d\n    ?:  (mor p.n.d p.n.e)\n      d(r $(d r.d))\n    e(l $(e l.e))\n  --\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> =b `(map @tas @)`(malt (limo ~[c+3 d+4 e+5 f+6]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n> b\n{[p=%e q=5] [p=%d q=4] [p=%f q=6] [p=%c q=3]}\n\n> `(map @tas @)`(~(dif by a) b)\n{[p=%b q=2] [p=%a q=1]}\n```\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> =b `(map @tas @)`(malt (limo ~[a+2 e+4 f+5]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n> b\n{[p=%e q=4] [p=%f q=5] [p=%a q=2]}\n\n> `(map @tas @)`(~(dif by a) b)\n{[p=%b q=2] [p=%d q=4] [p=%c q=3]}\n```\n\n#### Discussion\n\nThis only compares keys, so if both maps contain the same key with different values, that key-value pair is not considered a difference and will not be included in the resulting map.\n\n---\n\n### `++dig:by`\n\nAddress of key\n\nProduce the address of key `b` within map `a`.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a key as a noun.\n\n#### Produces\n\nA unit.\n\n#### Source\n\n```hoon\n++  dig\n  |=  b=*\n  =+  c=1\n  |-  ^-  (unit @)\n  ?~  a  ~\n  ?:  =(b p.n.a)  [~ u=(peg c 2)]\n  ?:  (gor b p.n.a)\n    $(a l.a, c (peg c 6))\n  $(a r.a, c (peg c 7))\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n\n> (~(dig by a) %a)\n[~ 252]\n\n> (~(dig by a) %b)\n[~ 2]\n\n> (~(dig by a) %e)\n~\n```\n\n---\n\n### `++gas:by`\n\nConcatenate\n\nInsert a list of key-value pairs `b` into map `a`. For a key which exists in both `a` and `b`, the value is replaced with the value in `b`.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a list of cells of key-value nouns `p` and `q`.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n++  gas\n  ~/  %gas\n  |*  b=(list [p=* q=*])\n  =>  .(b `(list _?>(?=(^ a) n.a))`b)\n  |-  ^+  a\n  ?~  b\n    a\n  $(b t.b, a (put p.i.b q.i.b))\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> `(map @tas @)`(~(gas by a) ~[e+5 f+6 g+7])\n{[p=%e q=5] [p=%b q=2] [p=%d q=4] [p=%f q=6] [p=%g q=7] [p=%a q=1] [p=%c q=3]}\n```\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2]))\n> a\n{[p=%b q=2] [p=%a q=1]}\n\n> `(map @tas @)`(~(gas by a) ~[a+100 b+200])\n{[p=%b q=200] [p=%a q=100]}\n```\n\n```\n> `(map @tas @)`(~(gas by `(map @tas @)`~) ~[a+100 b+200])\n{[p=%b q=200] [p=%a q=100]}\n```\n\n---\n\n### `++get:by`\n\nGrab unit value\n\nProduce the unit value of the value located at key `b` within map `a`.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a key as a noun.\n\n#### Produces\n\nA unit.\n\n#### Source\n\n```hoon\n++  get\n  ~/  %get\n  |*  b=*\n  =>  .(b `_?>(?=(^ a) p.n.a)`b)\n  |-  ^-  (unit _?>(?=(^ a) q.n.a))\n  ?~  a\n    ~\n  ?:  =(b p.n.a)\n    (some q.n.a)\n  ?:  (gor b p.n.a)\n    $(a l.a)\n  $(a r.a)\n```\n\n#### Examples\n\n```\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> (~(get by a) %a)\n[~ 1]\n\n> (~(get by a) %b)\n[~ 2]\n\n> (~(get by a) %z)\n~\n```\n\n---\n\n### `++got:by`\n\nAssert\n\nProduce the value located at key `b` within map `a`. Crash if key `b` does not\nexist.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a key as a noun.\n\n#### Produces\n\nA noun.\n\n#### Source\n\n```hoon\n++  got\n  |*  b=*\n  (need (get b))\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> (~(got by a) %a)\n1\n\n> (~(got by a) %b)\n2\n\n> (~(got by a) %z)\ndojo: hoon expression failed\n```\n\n---\n\n### `++gut:by`\n\nGrab value with default\n\nProduce the value located at key `b` within map `a`. Use default value `c` if\nkey does not exist.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a key as a noun.\n\n`c` is a noun.\n\n#### Produces\n\nA noun.\n\n#### Source\n\n```hoon\n++  gut\n  |*  [b=* c=*]\n  (fall (get b) c)\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> (~(gut by a) %a 9.999)\n1\n\n> (~(gut by a) %b 9.999)\n2\n\n> (~(gut by a) %z 9.999)\n9.999\n```\n\n---\n\n### `++has:by`\n\nKey existence check\n\nChecks whether map `a` contains an element with key `b`, producing a flag.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a key as a noun.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  has\n  ~/  %has\n  |*  b=*\n  !=(~ (get b))\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> (~(has by a) %a)\n%.y\n> (~(has by a) %z)\n%.n\n```\n\n---\n\n### `++int:by`\n\nIntersection\n\nProduces a map of the (key) intersection between two maps of the same type, `a`\nand `b`. If both maps have an identical key that point to different values, the\nelement from map `b` is used.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a map.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n++  int\n  ~/  %int\n  =+  b=a\n  |@\n  ++  $\n    |-  ^+  a\n    ?~  b\n      ~\n    ?~  a\n      ~\n    ?:  (mor p.n.a p.n.b)\n      ?:  =(p.n.b p.n.a)\n        b(l $(a l.a, b l.b), r $(a r.a, b r.b))\n      ?:  (gor p.n.b p.n.a)\n        %-  uni(a $(a l.a, r.b ~))  $(b r.b)\n      %-  uni(a $(a r.a, l.b ~))  $(b l.b)\n    ?:  =(p.n.a p.n.b)\n      b(l $(b l.b, a l.a), r $(b r.b, a r.a))\n    ?:  (gor p.n.a p.n.b)\n      %-  uni(a $(b l.b, r.a ~))  $(a r.a)\n    %-  uni(a $(b r.b, l.a ~))  $(a l.a)\n  --\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> =b `(map @tas @)`(malt (limo ~[c+3 d+4 e+5 f+6]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n> b\n{[p=%e q=5] [p=%d q=4] [p=%f q=6] [p=%c q=3]}\n\n> `(map @tas @)`(~(int by a) b)\n{[p=%d q=4] [p=%c q=3]}\n```\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2]))\n> =b `(map @tas @)`(malt (limo ~[a+100 b+200]))\n> a\n{[p=%b q=2] [p=%a q=1]}\n> b\n{[p=%b q=200] [p=%a q=100]}\n\n> `(map @tas @)`(~(int by a) b)\n{[p=%b q=200] [p=%a q=100]}\n```\n\n---\n\n### `++jab:by`\n\nTransform value\n\nProduce map `a` with the value at key `b` transformed by gate `c`.\n\n#### Accepts\n\n`a` is a `map`, and is the sample of `+by`.\n\n`b` is a noun, and a key in `a`.\n\n`c` is a `gate`.\n\n#### Produces\n\nA `map`.\n\n#### Source\n\n```hoon\n++  jab\n  ~/  %jab\n  |*  [key=_?>(?=(^ a) p.n.a) fun=$-(_?>(?=(^ a) q.n.a) _?>(?=(^ a) q.n.a))]\n  ^+  a\n  ::\n  ?~  a  !!\n  ::\n  ?:  =(key p.n.a)\n    a(q.n (fun q.n.a))\n  ::\n  ?:  (gor key p.n.a)\n    a(l $(a l.a))\n  ::\n  a(r $(a r.a))\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> `(map @tas @)`(~(jab by a) %d |=(x=@ (pow x 2)))\n{[p=%b q=2] [p=%d q=16] [p=%a q=1] [p=%c q=3]}\n\n> (~(jab by a) %z |=(x=@ (pow x 2)))\ndojo: hoon expression failed\n\n> (~(jab by a) %d |=(a=@ [a a]))\n-need.?(%~ [n=[p=@tas q=@] l=nlr([p=@tas q=@]) r=nlr([p=@tas q=@])])\n-have.[n=[p=@tas q=[@ @]] l=nlr([p=@tas q=@]) r=nlr([p=@tas q=@])]\nnest-fail\ndojo: hoon expression failed\n```\n\n---\n\n### `++key:by`\n\nSet of keys\n\nProduces a set of all keys in map `a`.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n#### Produces\n\nA set.\n\n#### Source\n\n```hoon\n++  key\n  =<  $\n  ~/  %key\n  =+  b=`(set _?>(?=(^ a) p.n.a))`~\n  |.  ^+  b\n  ?~  a   b\n  $(a r.a, b $(a l.a, b (~(put in b) p.n.a)))\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n\n> ~(key by a)\n{%b %d %a %c}\n```\n\n---\n\n### `++mar:by`\n\nAdd with validation\n\nProduces map `a` with the addition of key-value pair `b` and `c`, where the value is a\nnonempty unit.\n\nAccept a noun and a unit of a noun of the type of the map's keys and values,\nrespectively. Validate that the value is not null and put the pair in the map.\nIf the value is null, delete the key.\n\n#### Accepts\n\n`a` is a `map`, and is the sample of `+by`.\n\n`b` is a noun.\n\n`c` is a `unit`.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n++  mar\n  |*  [b=* c=(unit *)]\n  ?~  c\n    (del b)\n  (put b u.c)\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> `(map @tas @)`(~(mar by a) %e (some 5))\n{[p=%e q=5] [p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> `(map @tas @)`(~(mar by a) %a (some 10))\n{[p=%b q=2] [p=%d q=4] [p=%a q=10] [p=%c q=3]}\n\n> `(map @tas @)`(~(mar by a) %a ~)\n{[p=%b q=2] [p=%d q=4] [p=%c q=3]}\n```\n\n---\n\n### `++put:by`\n\nAdd key-value pair\n\nProduces `a` with the addition of the key-value pair of `b` and `c`.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a key of the same type as the keys in `a`.\n\n`c` is a value of the same type of the values in `a`.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n++  put\n  ~/  %put\n  |*  [b=* c=*]\n  |-  ^+  a\n  ?~  a\n    [[b c] ~ ~]\n  ?:  =(b p.n.a)\n    ?:  =(c q.n.a)\n      a\n    a(n [b c])\n  ?:  (gor b p.n.a)\n    =+  d=$(a l.a)\n    ?>  ?=(^ d)\n    ?:  (mor p.n.a p.n.d)\n      a(l d)\n    d(r a(l r.d))\n  =+  d=$(a r.a)\n  ?>  ?=(^ d)\n  ?:  (mor p.n.a p.n.d)\n    a(r d)\n  d(l a(r l.d))\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3]))\n> a\n{[p=%b q=2] [p=%a q=1] [p=%c q=3]}\n\n> `(map @tas @)`(~(put by a) %d 4)\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> `(map @tas @)`(~(put by a) %a 10)\n{[p=%b q=2] [p=%a q=10] [p=%c q=3]}\n\n> (~(put by a) 42 'foo')\nmull-grow\nmull-nice\n-need.?(%~ [n=[p=@tas q=@] l=nlr([p=@tas q=@]) r=nlr([p=@tas q=@])])\n-have.[[@ud @t] %~ %~]\nnest-fail\ndojo: hoon expression failed\n```\n\n---\n\n### `++rep:by`\n\nReduce to product\n\nAccumulate elements of map `a` using gate `b`, producing a noun.\n\n#### Accepts\n\n`a` is a map.\n\n`b` is a gate.\n\n#### Produces\n\nA noun.\n\n#### Source\n\n```hoon\n++  rep\n  ~/  %rep\n  |*  b=_=>(~ |=([* *] +<+))\n  |-\n  ?~  a  +<+.b\n  $(a r.a, +<+.b $(a l.a, +<+.b (b n.a +<+.b)))\n```\n\n#### Examples\n\n```\n> =a `(map @tas @)`(malt (limo ~[a+1 b+2 c+3 d+4]))\n> a\n{[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n\n> (~(rep by a) |=([p=[@tas @] q=@] ~&([p q] (add +.p q))))\n[[%b 2] 0]\n[[%d 4] 2]\n[[%c 3] 6]\n[[%a 1] 9]\nq=10\n```\n\n#### Discussion\n\nThe gate will iteratively be fed a cell whose head is a key-value pair from the map and whose tail is an accumulator, producing the final value of the accumulator.\n\n---\n\n### `++rib:by`\n\nTransform + product\n\n`c` is a gate with a sample like `[[key value] accumulator]` and a product like `[accumulator [key value]]`. Each key-value pair in map `a` is passed to `c` and replaced with the key-value pair `c` produced. The final value of the accumulator and the modified map are returned. `b` is the initial value of the accumulator.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a noun, and is the initial value of the accumulator.\n\n`c` is a gate.\n\n#### Produces\n\nA cell of a noun and a map.\n\n#### Source\n\n```hoon\n++  rib\n  |*  [b=* c=gate]\n  |-  ^+  [b a]\n  ?~  a  [b ~]\n  =+  d=(c n.a b)\n  =.  n.a  +.d\n  =+  e=$(a l.a, b -.d)\n  =+  f=$(a r.a, b -.e)\n  [-.f a(l +.e, r +.f)]\n```\n\n#### Examples\n\nIn this example, all values less than three are changed to zero, and a list of their keys are produced along with the modified map.\n\n```\n> =a `(map @t @)`(malt ~[['a' 1] ['b' 2] ['c' 3] ['d' 4] ['e' 5]])\n> a\n{[p='e' q=5] [p='b' q=2] [p='d' q=4] [p='a' q=1] [p='c' q=3]}\n\n> =c |=  [[k=@t v=@] acc=(list @t)]\n     ?:  (lth v 3)\n       [[k acc] [k 0]]\n     [acc [k v]]\n\n> `[(list @t) (map @t @)]`(~(rib by a) *(list @t) c)\n[<|a b|> {[p='e' q=5] [p='b' q=0] [p='d' q=4] [p='a' q=0] [p='c' q=3]}]\n```\n\n#### Discussion\n\nKey-value pairs in the map are transformed in their existing tree location. This means if you change the key, you'd likely produce a map with an incorrect order, so typically you should only change the value.\n\n---\n\n### `++run:by`\n\nTransform values\n\nIterates over every value in map `a` using gate `b`, producing a map.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a gate.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n++  run\n  ~/  %run\n  |*  b=gate\n  |-\n  ?~  a  a\n  [n=[p=p.n.a q=(b q.n.a)] l=$(a l.a) r=$(a r.a)]\n```\n\n#### Examples\n\n```\n> =a `(map @t @)`(malt ~[['a' 1] ['b' 2] ['c' 3] ['d' 4] ['e' 5]])\n\n> `(map @t @)`(~(run by a) dec)\n{[p='e' q=4] [p='b' q=1] [p='d' q=3] [p='a' q=0] [p='c' q=2]}\n```\n\n---\n\n### `++rut:by`\n\nTransform nodes\n\nApplies a gate `b` to nodes in map `a`. The sample of gate `b` is a key-value pair, and it produces a new value.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n`b` is a gate.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n++  rut\n  |*  b=gate\n  |-\n  ?~  a  a\n  [n=[p=p.n.a q=(b p.n.a q.n.a)] l=$(a l.a) r=$(a r.a)]\n```\n\n#### Examples\n\n```\n> =a `(map @ @)`(malt ~[[1 1] [2 2] [3 3] [4 4] [5 5]])\n\n> =b |=  [k=@ v=@]\n     ?:  (gth v 2)\n       (mul k v)\n     v\n\n> `(map @ @)`(~(rut by a) b)\n{[p=5 q=25] [p=1 q=1] [p=2 q=2] [p=3 q=9] [p=4 q=16]}\n```\n\n---\n\n### `++tap:by`\n\nListify pairs\n\nProduces the list of all elements in map `a`.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  tap\n  =<  $\n  ~/  %tap\n  =+  b=`(list _?>(?=(^ a) n.a))`~\n  |.  ^+  b\n  ?~  a\n    b\n  $(a r.a, b [n.a $(a l.a)])\n```\n\n#### Examples\n\n```\n> =a `(map @ @)`(malt ~[[1 1] [2 2] [3 3] [4 4] [5 5]])\n\n> ~(tap by a)\n~[[p=4 q=4] [p=3 q=3] [p=2 q=2] [p=1 q=1] [p=5 q=5]]\n```\n\n---\n\n### `++uni:by`\n\nUnion, merge\n\nProduces a map of the union between the keys of `a` and `b`. If `b` shares a\nkey with `a`, the tuple from `b` is preserved.\n\n#### Accepts\n\n`a` is a map, and is the sample `+by`.\n\n`b` is a map.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n++  uni\n  ~/  %uni\n  =+  b=a\n  |@\n  ++  $\n    |-  ^+  a\n    ?~  b\n      a\n    ?~  a\n      b\n    ?:  =(p.n.b p.n.a)\n      b(l $(a l.a, b l.b), r $(a r.a, b r.b))\n    ?:  (mor p.n.a p.n.b)\n      ?:  (gor p.n.b p.n.a)\n        $(l.a $(a l.a, r.b ~), b r.b)\n      $(r.a $(a r.a, l.b ~), b l.b)\n    ?:  (gor p.n.a p.n.b)\n      $(l.b $(b l.b, r.a ~), a r.a)\n    $(r.b $(b r.b, l.a ~), a l.a)\n  --\n```\n\n#### Examples\n\n```\n> =a `(map @ @)`(malt ~[[1 1] [2 2] [3 3]])\n> =b `(map @ @)`(malt ~[[3 300] [4 400] [5 500]])\n> a\n{[p=1 q=1] [p=2 q=2] [p=3 q=3]}\n> b\n{[p=5 q=500] [p=3 q=300] [p=4 q=400]}\n\n> `(map @ @)`(~(uni by a) b)\n{[p=5 q=500] [p=1 q=1] [p=2 q=2] [p=3 q=300] [p=4 q=400]}\n```\n\n---\n\n### `++uno:by`\n\nGeneral union\n\nProduces a map of the union between the keys of `a` and `b`. If `b` shares a key with `a`, gate `meg` is applied to both and its product is used as the new value of the key in question.\n\n#### Accepts\n\n`a` is a `map`, and is the sample of `+by`.\n\n`b` is a `map`, and is the sample of `~(uno by a)`.\n\n`meg` is a gate, and is the sample of `(~(uno by a) b)`.\n\n#### Produces\n\nA `map`.\n\n#### Source\n\n```hoon\n++  uno\n  =+  b=a\n  |@\n  ++  $\n    |=  meg=$-([_p:node _q:node _q:node] _q:node)\n    |-  ^+  a\n    ?~  b\n      a\n    ?~  a\n      b\n    ?:  =(p.n.b p.n.a)\n      :+  [p.n.a (meg p.n.a q.n.a q.n.b)]\n        $(b l.b, a l.a)\n      $(b r.b, a r.a)\n    ?:  (mor p.n.a p.n.b)\n      ?:  (gor p.n.b p.n.a)\n        $(l.a $(a l.a, r.b ~), b r.b)\n      $(r.a $(a r.a, l.b ~), b l.b)\n    ?:  (gor p.n.a p.n.b)\n      $(l.b $(b l.b, r.a ~), a r.a)\n    $(r.b $(b r.b, l.a ~), a l.a)\n  --\n```\n\n#### Examples\n\n```\n> =a `(map @ @)`(malt ~[[1 1] [2 2] [3 3]])\n> =b `(map @ @)`(malt ~[[3 3] [4 4] [5 5]])\n> a\n{[p=1 q=1] [p=2 q=2] [p=3 q=3]}\n> b\n{[p=5 q=5] [p=3 q=3] [p=4 q=4]}\n\n> `(map @ @)`((~(uno by a) b) |=([k=@ v=@ w=@] (add v w)))\n{[p=5 q=5] [p=1 q=1] [p=2 q=2] [p=3 q=6] [p=4 q=4]}\n```\n\n---\n\n### `++urn:by`\n\nTurn (with key)\n\nIterates over every value in map `a` using gate `b`, which accepts both\nthe key and the value of each element as its sample.\n\n#### Accepts\n\n`a` is a map.\n\n`b` is a gate that accepts two nouns.\n\n#### Produces\n\nA `map`.\n\n#### Source\n\n```hoon\n++  urn\n  ~/  %urn\n  |*  b=$-([* *] *)\n  |-\n  ?~  a  ~\n  a(n n.a(q (b p.n.a q.n.a)), l $(a l.a), r $(a r.a))\n```\n\n#### Examples\n\n```\n> =a `(map @ @)`(malt ~[[1 1] [2 2] [3 3]])\n> a\n{[p=1 q=1] [p=2 q=2] [p=3 q=3]}\n\n> (~(urn by a) |=([k=@ v=@] (pow v 2)))\n{[p=1 q=1] [p=2 q=4] [p=3 q=9]}\n```\n\n---\n\n### `++wyt:by`\n\nDepth\n\nProduce the size of the tree map `a`.\n\n#### Accepts\n\n`a` is a map, and is the sample of `+by`.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  wyt\n  =<  $\n  ~%  %wyt  +  ~\n  |.  ^-  @\n  ?~(a 0 +((add $(a l.a) $(a r.a))))\n```\n\n#### Examples\n\n```\n> =a `(map @ @)`(malt ~[[1 1] [2 2] [3 3]])\n> =b `(map @ @)`(malt ~[[1 1] [2 2] [3 3] [4 4] [5 5]])\n> a\n{[p=1 q=1] [p=2 q=2] [p=3 q=3]}\n> b\n{[p=5 q=5] [p=1 q=1] [p=2 q=2] [p=3 q=3] [p=4 q=4]}\n\n> ~(wyt by a)\n3\n\n> ~(wyt by b)\n5\n```\n\n---\n\n### `++val:by`\n\nList of values\n\nProduces a list of all values in map `a`.\n\n#### Accepts\n\n`a` is a map.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  val\n  =+  b=`(list _?>(?=(^ a) q.n.a))`~\n  |-  ^+  b\n  ?~  a   b\n  $(a r.a, b [q.n.a $(a l.a)])\n```\n\n#### Examples\n\n```\n> =a `(map @t @)`(malt ~[['a' 1] ['b' 2] ['c' 3]])\n> a\n{[p='b' q=2] [p='a' q=1] [p='c' q=3]}\n\n> ~(val by a)\n~[3 1 2]\n```\n\n---\n",
    "ja": "## `++ja`\n\nJar engine\n\nA container arm for `jar` operation arms. A `jar` is a `map` of\n`list`s. The contained arms inherit the sample jar.\n\n#### Accepts\n\n`a` is a jar.\n\n#### Produces\n\nA core.\n\n#### Source\n\n```hoon\n++  ja\n  =|  a=(tree (pair * (list)))  ::  (jar)\n  |@\n```\n\n#### Examples\n\n```\n> ~(. ja (my [a+1 b+2 ~]))\n< 2.ngd\n  [   a\n    ?(\n      %~\n      [ n=[?(p=%a p=%b) q=@ud]\n        l=nlr([p=?(%a %b) q=@ud])\n        r=nlr([p=?(%a %b) q=@ud])\n      ]\n    )\n    <123.zao 46.hgz 1.pnw %140>\n  ]\n>\n```\n\n---\n\n### `++get:ja`\n\nGrab value by key\n\nProduces the list at key `b` in jar `a`.\n\n#### Accepts\n\n`a` is a `jar`, and is the sample of `+ja`.\n\n`b` is a noun.\n\n#### Produces\n\nA `list`.\n\n#### Source\n\n```hoon\n++  get\n  |*  b=*\n  =+  c=(~(get by a) b)\n  ?~(c ~ u.c)\n```\n\n#### Examples\n\n```\n> =j `(jar @t @ud)`(malt ~[['a' `(list @ud)`~[1 2 3]] ['b' `(list @ud)`~[4 5 6]]])\n> j\n{[p='b' q=~[4 5 6]] [p='a' q=~[1 2 3]]}\n\n> `(list @ud)`(~(get ja j) 'a')\n~[1 2 3]\n\n> `(list @ud)`(~(get ja j) 'b')\n~[4 5 6]\n\n> `(list @ud)`(~(get ja j) 'c')\n~\n```\n\n---\n\n### `++add:ja`\n\nPrepend to list\n\nAdds `c` to the head of the list at key `b` in jar `a`. If `b` does not exist in `a`, a new key-value pair is added with a list containing `c`.\n\n#### Accepts\n\n`a` is a `jar`, and is the sample of `+ja`.\n\n`b` is a noun of the same type as the keys in `a`.\n\n`c` is a noun of the same type the lists in `a` contain.\n\n#### Produces\n\nA `jar`.\n\n#### Source\n\n```hoon\n++  add\n  |*  [b=* c=*]\n  =+  d=(get b)\n  (~(put by a) b [c d])\n```\n\n#### Examples\n\n```\n> =j `(jar @t @ud)`(malt ~[['a' `(list @ud)`~[1 2 3]] ['b' `(list @ud)`~[4 5 6]]])\n> j\n{[p='b' q=~[4 5 6]] [p='a' q=~[1 2 3]]}\n\n> `(jar @t @ud)`(~(add ja j) 'b' 7)\n{[p='b' q=~[7 4 5 6]] [p='a' q=~[1 2 3]]}\n\n> `(jar @t @ud)`(~(add ja j) 'c' 8)\n{[p='b' q=~[4 5 6]] [p='a' q=~[1 2 3]] [p='c' q=~[8]]}\n```\n\n---\n",
    "ju": "## `++ju`\n\nJug operations\n\nContainer arm for jug operation arms. A `jug` is a `map` of\n`set`s. The contained arms inherit its sample jug, `a`.\n\n#### Accepts\n\n`a` is a `jug`.\n\n#### Produces\n\nA core.\n\n#### Source\n\n```hoon\n++  ju\n  =|  a=(tree (pair * (tree)))  ::  (jug)\n  |@\n```\n\n#### Example\n\n```\n> =j `(jug @t @ud)`(malt ~[['a' (silt ~[1 2 3])] ['b' (silt ~[4 5 6])]])\n> j\n{[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n\n> ~(. ju j)\n<5.cws [a=nlr([p=@t q=nlr(@ud)]) <123.zao 46.hgz 1.pnw %140>]>\n```\n\n---\n\n### `++del:ju`\n\nRemove\n\nProduces jug `a` with value `c` removed from set located at key `b`.\n\n#### Accepts\n\n`a` is a jug, and is the sample of `+ju`.\n\n`b` is a noun of the same type as the keys in `a`.\n\n`c` is a noun of the same type as the sets in `a` contain.\n\n#### Source\n\n```hoon\n++  del\n  |*  [b=* c=*]\n  ^+  a\n  =+  d=(get b)\n  =+  e=(~(del in d) c)\n  ?~  e\n    (~(del by a) b)\n  (~(put by a) b e)\n```\n\n#### Examples\n\n```\n> j\n{[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n\n> `(jug @t @ud)`(~(del ju j) 'b' 6)\n{[p='b' q={5 4}] [p='a' q={1 2 3}]}\n\n> `(jug @t @ud)`(~(del ju j) 'b' 10)\n{[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n\n> `(jug @t @ud)`(~(del ju j) 'c' 10)\n{[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n```\n\n---\n\n### `++gas:ju`\n\nConcatenate\n\nAdd each of the key-value pairs in list `b` to jug `a`. The values in `b` are the type the sets in `a` contain. For keys in `b` that exist in `a`, the values will be added to their sets. For keys in `b` that don't exist in `a`, new keys and sets will be added.\n\n#### Accepts\n\n`a` is a `jug`, and is the sample of `+ju`.\n\n`b` is a `(list [p q])`, where:\n\n- `p` is a noun, the type of the keys in `a`.\n- `q` is a noun, the type the sets in `a` contain.\n\n#### Produces\n\nA `jug`.\n\n#### Source\n\n```hoon\n++  gas\n  |*  b=(list [p=* q=*])\n  =>  .(b `(list _?>(?=([[* ^] ^] a) [p=p q=n.q]:n.a))`b)\n  |-  ^+  a\n  ?~  b\n    a\n  $(b t.b, a (put p.i.b q.i.b))\n```\n\n#### Examples\n\n```\n> =j `(jug @t @ud)`(malt ~[['a' (silt ~[1 2 3])] ['b' (silt ~[4 5 6])]])\n> j\n{[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n\n> `(jug @t @ud)`(~(gas ju j) ~[['a' 10] ['a' 42] ['b' 999] ['c' 7]])\n{[p='b' q={5 6 4 999}] [p='a' q={10 42 1 2 3}] [p='c' q={7}]}\n```\n\n---\n\n### `++get:ju`\n\nRetrieve set\n\nProduces a set retrieved from jug `a` using key `b`.\n\n#### Accepts\n\n`a` is a jug, and the sample of `+ju`.\n\n`b` is key, a noun of the same type as the keys in `a`.\n\n#### Produces\n\nA `set`.\n\n#### Source\n\n```hoon\n++  get\n  |*  b=*\n  =+  c=(~(get by a) b)\n  ?~(c ~ u.c)\n```\n\n#### Examples\n\n```\n> =j `(jug @t @ud)`(malt ~[['a' (silt ~[1 2 3])] ['b' (silt ~[4 5 6])]])\n> j\n{[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n\n> `(set @ud)`(~(get ju j) 'a')\n{1 2 3}\n\n> `(set @ud)`(~(get ju j) 'b')\n{5 6 4}\n\n> `(set @ud)`(~(get ju j) 'c')\n{}\n```\n\n---\n\n### `++has:ju`\n\nCheck contents\n\nComputes whether a value `c` exists within the set located at key `b`\nwith jug `a`, producing a flag.\n\n#### Accepts\n\n`a` is a `jug`, and the sample of `+ju`.\n\n`b` is a noun of the same type as the keys in `a`.\n\n`c` is a noun of the same type as the sets in `a` contain.\n\n#### Produces\n\nA `?`.\n\n#### Source\n\n```hoon\n++  has\n  |*  [b=* c=*]\n  ^-  ?\n  (~(has in (get b)) c)\n```\n\n#### Examples\n\n```\n> =j `(jug @t @ud)`(malt ~[['a' (silt ~[1 2 3])] ['b' (silt ~[4 5 6])]])\n> j\n{[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n\n> (~(has ju j) 'b' 5)\n%.y\n\n> (~(has ju j) 'b' 10)\n%.n\n\n> (~(has ju j) 'c' 10)\n%.n\n```\n\n---\n\n### `++put:ju`\n\nAdd key-set pair\n\nProduces jug `a` with `c` added to the set located at key `b`. If `b` isn't a key in `a`, it will be added and a new set created containing `c`.\n\n#### Accepts\n\n`a` is a `jug`.\n\n`b` is a noun, the type of the keys in `a`.\n\n`c` is a noun, the type the sets in `a` contain.\n\n#### Produces\n\nA `jug`.\n\n#### Source\n\n```hoon\n++  put\n  |*  [b=* c=*]\n  ^+  a\n  =+  d=(get b)\n  (~(put by a) b (~(put in d) c))\n```\n\n#### Examples\n\n```\n> j\n{[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n\n> `(jug @t @ud)`(~(put ju j) 'c' 5)\n{[p='b' q={5 6 4}] [p='a' q={1 2 3}] [p='c' q={5}]}\n\n> `(jug @t @ud)`(~(put ju j) 'a' 4)\n{[p='b' q={5 6 4}] [p='a' q={1 2 3 4}]}\n\n> `(jug @t @ud)`(~(put ju j) 'a' 1)\n{[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n```\n\n---\n",
    "to": "## `++to`\n\nQueue operations\n\nContainer arm for queue operation arms. The contained arms inherit `a`, its\nsample queue.\n\n#### Accepts\n\n`a` is a tree.\n\n#### Source\n\n```hoon\n++  to\n  =|  a=(tree)  ::  (qeu)\n  |@\n```\n\n#### Discussion\n\n`tree` is the generic tree-shape mold. Maps, sets, and queues all share that\nshape, but they put their elements in different places and have different\ninterfaces. `to` is the interface core for `qeu`; it's not generic across all\nthe different containers that use `tree`.\n\n---\n\n### `+apt:to`\n\nCheck correctness\n\nTest whether queue `a` is correctly ordered, producing a flag.\n\n#### Accepts\n\n`a` is a `que`.\n\n#### Produces\n\nA `?`.\n\n#### Source\n\n```hoon\n++  apt\n  |-  ^-  ?\n  ?~  a  &\n  ?&  ?~(l.a & ?&((mor n.a n.l.a) $(a l.a)))\n      ?~(r.a & ?&((mor n.a n.r.a) $(a r.a)))\n  ==\n```\n\n#### Examples\n\n```\n> =bad `(qeu @ud)`[1 ~ 2 ~ 3 ~ ~]\n\n> ~(apt to bad)\n%.n\n```\n\n```\n> =good `(qeu @ud)`(~(gas to `(qeu @ud)`~) ~[1 2 3])\n\n> ~(apt to good)\n%.y\n```\n\n---\n\n### `++bal:to`\n\nBalance\n\nVertically rebalances queue `a`.\n\n#### Accepts\n\n`a` is a `qeu`.\n\n#### Produces\n\nA `qeu`.\n\n#### Source\n\n```hoon\n++  bal\n  |-  ^+  a\n  ?~  a  ~\n  ?.  |(?=(~ l.a) (mor n.a n.l.a))\n    $(a l.a(r $(a a(l r.l.a))))\n  ?.  |(?=(~ r.a) (mor n.a n.r.a))\n    $(a r.a(l $(a a(r l.r.a))))\n  a\n```\n\n#### Examples\n\n```\n> =a `(qeu @ud)`[1 ~ 2 ~ 3 ~ ~]\n> a\n{1 2 3}\n> `*`a\n[1 0 2 0 3 0 0]\n> ~(apt to a)\n%.n\n\n> =z `(qeu @ud)`~(bal to a)\n> z\n{1 2 3}\n> `*`z\n[2 [1 0 0] 3 0 0]\n> ~(apt to z)\n%.y\n```\n\n---\n\n### `++dep:to`\n\nMaximum Depth\n\nProduces the maximum depth of leaves (`r.a` and `l.a`) in queue `a`.\n\n#### Accepts\n\n`a` is a queue.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  dep\n  |-  ^-  @\n  ?~  a  0\n  +((max $(a l.a) $(a r.a)))\n```\n\n#### Examples\n\n```\n> =a (~(gas to `(qeu @)`~) `(list @)`[1 2 3 4 5 6 7 ~])\n> ~(dep to a)\n4\n\n> =a (~(gas to `(qeu @)`~) `(list @)`[1 2 3 4 ~])\n> ~(dep to a)\n3\n\n> =a (~(gas to `(qeu @)`~) `(list @)`[1 2 ~])\n> ~(dep to a)\n2\n\n> ~(dep to `(qeu tape)`[\"a\" ~ \"b\" ~ \"c\" ~ \"d\" ~ \"e\" ~ \"f\" ~ \"g\" ~ ~])\n7\n\n> ~(dep to ~(bal to `(qeu tape)`[\"a\" ~ \"b\" ~ \"c\" ~ \"d\" ~ \"e\" ~ \"f\" ~ \"g\" ~ ~]))\n4\n```\n\n---\n\n### `++gas:to`\n\nPush list\n\nPush all elements of list `b` into the queue `a`.\n\n#### Accepts\n\n`a` is a queue, and is the sample of `+to`.\n\n`b` is a list.\n\n#### Produces\n\nA queue.\n\n#### Source\n\n```hoon\n++  gas\n  |=  b=(list _?>(?=(^ a) n.a))\n  |-  ^+  a\n  ?~(b a $(b t.b, a (put i.b)))\n```\n\n#### Examples\n\n```\n> `(qeu)`(~(gas to `(qeu @)`~) [1 2 3 ~])\n{3 2 1}\n\n> =a (~(gas to `(qeu @)`~) [1 2 3 ~])\n> =b [4 5 6 ~]\n> `(qeu)`(~(gas to a) b)\n{6 5 4 3 2 1}\n```\n\n---\n\n### `++get:to`\n\nHead-tail pair\n\nProduces the head and tail queue of `a`.\n\n#### Accepts\n\n`a` is a queue.\n\n#### Produces\n\nA cell of the last element in `a` along with the rest of queue `a`.\n\n#### Source\n\n```hoon\n++  get\n  |-  ^+  ?>(?=(^ a) [p=n.a q=*(tree _n.a)])\n  ?~  a\n    !!\n  ?~  r.a\n    [n.a l.a]\n  =+  b=$(a r.a)\n  :-  p.b\n  ?:  |(?=(~ q.b) (mor n.a n.q.b))\n    a(r q.b)\n  a(n n.q.b, l a(r l.q.b), r r.q.b)\n```\n\n#### Examples\n\n```\n> =s (~(gas to *(tree @)) `(list @)`~[1 2 3])\n> ~(get to s)\n[n=2 l={3} r={1}]\n\n> ~(get to ~)\n! exit\n```\n\n---\n\n### `++nap:to`\n\nRemove head\n\nRemoves the head of queue `a`, producing the resulting queue.\n\n#### Accepts\n\n`a` is a queue.\n\n#### Produces\n\nA queue.\n\n#### Source\n\n```hoon\n++  nap\n  ?>  ?=(^ a)\n  ?:  =(~ l.a)  r.a\n  =+  b=get(a l.a)\n  bal(n.a p.b, l.a q.b)\n```\n\n#### Examples\n\n```\n> =a (~(gas to `(qeu @)`~) `(list @)`[1 2 3 4 5 6 ~])\n> -.a\nn=6\n\n> =b ~(nap to a)\n> -.b\nn=2\n\n> a\n[n=6 l={} r={5 4 3 2 1}]\n\n> b\n[n=2 l=[n=4 l={5} r={3}] r=[n=1 l={} r={}]]\n\n> `(qeu)`b\n{5 4 3 2 1}\n\n> `(qeu)`a\n{6 5 4 3 2 1}\n```\n\n---\n\n### `++nip:to`\n\nRemoves the root of queue `a`, producing the resulting queue.\n\n#### Accepts\n\n`a` is a queue.\n\n#### Produces\n\nA queue.\n\n#### Source\n\n```hoon\n++  nip\n  |-  ^+  a\n  ?~  a  ~\n  ?~  l.a  r.a\n  ?~  r.a  l.a\n  ?:  (mor n.l.a n.r.a)\n    l.a(r $(l.a r.l.a))\n  r.a(l $(r.a l.r.a))\n```\n\n#### Examples\n\n```\n> =a (~(gas to `(qeu @)`~) `(list @)`[1 2 3 4 5 6 ~])\n> a\n[n=6 l={} r={5 4 3 2 1}]\n\n> ~(nip to a)\n[n=2 l=[n=4 l={5} r={3}] r=[n=1 l={} r={}]]\n```\n\n---\n\n### `++put:to`\n\nInsert\n\nAccept noun `b` and adds to queue `a` as the head, producing the\nresulting queue.\n\n#### Accepts\n\n`a` is a queue, and is the sample of `+to`.\n\n`b` is a noun.\n\n#### Produces\n\nA queue.\n\n#### Source\n\n```hoon\n++  put\n  |*  b=*\n  |-  ^+  a\n  ?~  a\n    [b ~ ~]\n  bal(l.a $(a l.a))\n```\n\n#### Examples\n\n```\n> =a (~(gas to `(qeu @)`~) `(list @)`[3 1 2 4 5 6 ~])\n> `(qeu)`(~(put to a) 7)\n{7 6 5 4 2 1 3}\n```\n\n---\n\n### `++tap:to`\n\nQueue to list\n\nProduces queue `a` as a list from front to back.\n\n#### Accepts\n\n`a` is a queue.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  tap\n  =+  b=`(list _?>(?=(^ a) n.a))`~\n  |-  ^+  b\n  =+  0                                   ::  hack for jet match\n  ?~  a\n    b\n  $(a r.a, b [n.a $(a l.a)])\n```\n\n#### Examples\n\n```\n> =a (~(gas to `(qeu @)`~) [3 1 2 4 5 6 ~])\n> `*`a\n[6 0 2 [4 [5 0 0] 0] 1 0 3 0 0]\n\n> ~(tap to a)\n~[3 1 2 4 5 6]\n```\n\n---\n\n### `++top:to`\n\nProduce head\n\nProduces the head of queue `a` as a `unit`.\n\n#### Accepts\n\n`a` is a queue.\n\n#### Produces\n\nA unit.\n\n#### Source\n\n```hoon\n++  top\n  |-  ^-  (unit _?>(?=(^ a) n.a))\n  ?~  a  ~\n  ?~(r.a [~ n.a] $(a r.a))\n```\n\n#### Examples\n\n```\n> =a (~(gas to `(qeu @)`~) `(list @)`[1 2 3 4 5 6 ~])\n> ~(top to a)\n[~ u=1]\n```\n\n#### Discussion\n\nAn empty queue has no head.\n\n---\n",
    "malt": "## `++malt`\n\nMap from list\n\nProduces a map from a list `a`.\n\n#### Accepts\n\n`a` is a list.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n++  malt                                                ::  map from list\n  |*  a=(list)\n  (molt `(list [p=_-<.a q=_->.a])`a)\n```\n\n#### Examples\n\n```\n    > (malt [['ok' 'no'] ['a' 'b'] ['x' 'y'] ~])\n    [n=[p='x' q='y'] l={[p='a' q='b'] [p='ok' q='no']} r={}]\n\n    > (malt ~[[1 2 3] [4 5 6] [7 8 9]])\n    [n=[p=1 q=[2 3]] l={[p=4 q=[5 6]] [p=7 q=[8 9]]} r={}]\n```\n\n---\n",
    "molt": "## `++molt`\n\nMap from pair list\n\nProduces a map from a list of pairs `a`.\n\n#### Accepts\n\n`a` is a list of pairs.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n    ++  molt\n      |*  a=(list (pair))\n      (~(gas by `(tree [p=_p.i.-.a q=_q.i.-.a})`~) a)\n```\n\n#### Examples\n\n```\n    > =a `(list (pair))`[[1 2] [4 3] [11 0] ~]\n    > a\n    > ~[[p=1 q=2] [p=4 q=3] [p=11 q=0]]\n\n    > (molt a)\n    [n=[p=11 q=0] l={[p=4 q=3] [p=1 q=2]} r={}]\n```\n\n#### Discussion\n\nOnly used internally as a helper to `malt`.\n\n---\n",
    "silt": "## `++silt`\n\nSet from list\n\nProduces a set from a list `a`.\n\n#### Accepts\n\n`a` is a list.\n\n#### Produces\n\nA set.\n\n#### Source\n\n```hoon\n    ++  silt\n      |*  a=(list)\n      =+  b=*(tree _?>(?=(^ a) i.a))\n      (~(gas in b) a)\n```\n\n#### Examples\n\n```\n    > (silt `(list @t)`['c' 'hoon' 'javascript' 'python' ~])\n    [n='javascript' l={} r={'python' 'hoon' 'c'}]\n```\n\n---\n",
    "ly": "## `++ly`\n\nList from raw noun\n\nTakes a null-terminated noun and produces a `list`.\n\n#### Accepts\n\n`a` is a null-terminated noun.\n\n#### Produces\n\nA `list`.\n\n#### Source\n\n```hoon\n    ++  ly\n      le:nl\n```\n\n#### Examples\n\n```\n    > (ly [1 2 3 ~])\n    ~[1 2 3]\n\n    > (ly \"abc\")\n    ~['a' 'b' 'c']\n```\n\n#### Discussion\n\n`ly` is an alias for `le:nl`.\n\n---\n",
    "my": "## `++my`\n\nMap from raw noun\n\nTakes a null-terminated noun and produces a `map.`\n\n#### Accepts\n\n`a` is a noun composed of ordered pairs and terminated with `~`.\n\n#### Produces\n\nA `map`.\n\n#### Source\n\n```hoon\n    ++  my\n      my:nl\n```\n\n#### Examples\n\n```\n    > (my [['a' 1] ['b' 2] ~])\n    [n=[p='b' q=2] l={[p='a' q=1]} r={}]\n```\n\n#### Discussion\n\n`my` is an alias for `my:nl`.\n\n---\n",
    "sy": "## `++sy`\n\nSet from raw noun\n\nTakes a null-terminated noun and produces a `set`.\n\n#### Accepts\n\n`a` is a null-terminated noun.\n\n#### Produces\n\nA `set`.\n\n#### Source\n\n```hoon\n    ++  sy\n      si:nl\n```\n\n#### Examples\n\n```\n    > (sy [1 2 3 ~])\n    [n=2 l={1 3} r={}]\n\n    > (sy (ly [1 2 3 ~]))\n    [n=2 l={1 3} r={}]\n\n    > (sy \"abc\")\n    [n='b' l={'a' 'c'} r={}]\n```\n\n#### Discussion\n\n`sy` is an alias for `si:nl`.\n\n---\n",
    "nl": "## `++nl`\n\nNoun-to-container operations\n\nCore whose arms contain functions that create various typed nouns from raw\nnouns.\n\n#### Source\n\n```hoon\n    ++  nl\n      |%\n```\n\n---\n\n### `++le:nl`\n\nConstruct list\n\nTakes a null-terminated noun and produces a `list`.\n\n#### Accepts\n\n`a` is a null-terminated noun.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  le\n  |*  a=(list)\n  ^+  =<  $\n    |@  ++  $  ?:(*? ~ [i=(snag 0 a) t=$])\n    --\n  a\n```\n\n#### Examples\n\n```\n    > (le:nl [1 2 3 ~])\n    ~[1 2 3]\n\n    > (le:nl \"abc\")\n    ~['a' 'b' 'c']\n```\n\n---\n\n### `++my:nl`\n\nConstruct map\n\nTakes a null-terminated noun and produces a `map` of the same type of the `p`\nand `q` passed in.\n\n#### Accepts\n\n`a` is a noun composed of ordered pairs and terminated with `~`.\n\n#### Produces\n\nA map.\n\n#### Source\n\n```hoon\n++  my\n  |*  a=(list (pair))\n  =>  .(a ^+((le a) a))\n  (~(gas by `(map _p.i.-.a _q.i.-.a)`~) a)\n```\n\n#### Examples\n\n```\n    > (my:nl [['a' 1] ['b' 2] ~])\n    [n=[p='b' q=2] l={[p='a' q=1]} r={}]\n```\n\n---\n\n### `++si:nl`\n\nConstruct set\n\nTakes a null-terminated noun and produces a `set`.\n\n#### Accepts\n\n`a` is a null-terminated noun.\n\n#### Produces\n\nA set.\n\n#### Source\n\n```hoon\n++  si\n  |*  a=(list)\n  =>  .(a ^+((le a) a))\n  (~(gas in `(set _i.-.a)`~) a)\n```\n\n#### Examples\n\n```\n    > (si:nl `(list [@t *])`[['a' 1] ['b' [2 3]] ~])\n    [n=['b' [2 3]] l={['a' 1]} r={}]\n```\n\n---\n\n### `++snag:nl`\n\nIndex\n\nProduces the element at the index `a` of null-terminated noun `b` and failing if\nthe noun is null. Lists are 0-indexed.\n\n#### Accepts\n\n`a` is a noun.\n\n`b` is a null-terminated noun.\n\n#### Produces\n\nA noun.\n\n#### Sources\n\n```hoon\n++  snag\n  |*  [a=@ b=(list)]\n  ?~  b\n    ~_  leaf+\"snag-fail\"\n    !!\n  ?:  =(0 a)  i.b\n  $(b t.b, a (dec a))\n```\n\n#### Examples\n\n```\n    > =b [[2 3] [1 4] ~]\n    > (snag:nl 0 b)\n    [2 3]\n\n    > (snag:nl 2 b)\n    ! snag-fail\n    ! exit\n```\n\n---\n\n### `++weld:nl`\n\nConcatenate\n\nProduces a list that is the concatenation of null-terminated nouns `a` and `b`.\n\n#### Accepts\n\n`a` is a null-terminated noun.\n\n`b` is a null-terminated noun.\n\n#### Produces\n\nA list.\n\n#### Source\n\n```hoon\n++  weld\n  |*  [a=(list) b=(list)]\n  =>  .(a ^+((le a) a), b ^+((le b) b))\n  =+  42\n  |-\n  ?~  a  b\n  [i=i.a t=$(a t.a)]\n```\n\n#### Examples\n\n```\n    > =b [[2 3] [1 4] ~]\n\n    > (weld:nl b [8 9 ~])\n    [i=[2 3] t=[i=[1 4] t=~[8 9]]]\n```\n\n---\n",
    "aftr": "## `++aftr`\n\nPair after\n\n`+aftr` first takes gate `a`, producing a wet gate. The new wet gate then takes `b`, producing the inverted pair of `[b a]`. This is the inverted version of [+fore](#fore).\n\n#### Accepts\n\n`a` is a gate, and the sample of `+aftr`.\n\n`b` is a gate, and the sample of `(aftr a)`.\n\n#### Produces\n\n`(pair b a)`.\n\n#### Source\n\n```hoon\n++  aftr  |*(a=$-(* *) |*(b=$-(* *) (pair b a)))\n```\n\n#### Examples\n\n```\n> =a (aftr @ud)\n> `(a @t)`['foo' 42]\n[p='foo' q=42]\n```\n\n---\n",
    "cork": "## `++cork`\n\nCompose forward\n\nCall gate `a`, then call gate `b` with its product.\n\nThis is a wet gate that takes two gates and produces a new gate.\n\nThis is the inverse of [`++corl`](#corl).\n\n#### Accepts\n\n`a` is a gate.\n\n`b` is a gate.\n\n#### Source\n\n```hoon\n++  cork  |*([a=$-(* *) b=$-(* *)] (corl b a))\n```\n\n#### Examples\n\n```\n> ((cork dec |=(a=@ [a a])) 20)\n[19 19]\n\n> ((cork dec some) 20)\n[~ u=19]\n```\n\n---\n",
    "corl": "## `++corl`\n\nCompose backward\n\nCall gate `b`, then call gate `a` with its product.\n\nThis is a wet gate that takes two gates and produces a new gate.\n\nThis is the inverse of [`++cork`](#cork).\n\n#### Accepts\n\n`a` is a gate.\n\n`b` is a gate.\n\n#### Source\n\n```hoon\n++  corl\n  |*  [a=$-(* *) b=$-(* *)]\n  =<  +:|.((a (b)))      ::  type check\n  =+  c=+<.b\n  |@  ++  $  (a (b c))\n  --\n```\n\n#### Examples\n\n```\n> ((corl |=(a=@ [a a]) dec) 20)\n[19 19]\n\n> ((corl some dec) 20)\n[~ u=19]\n```\n\n---\n",
    "curr": "## `++curr` {% #curry %}\n\nRight curry\n\nRight-curry a gate, binding the tail of its sample\n\n#### Accepts\n\n`a` is a gate.\n\n`c` is a noun.\n\n#### Produces\n\nA gate.\n\n#### Source\n\n```hoon\n++  curr\n  |*  [a=$-(^ *) c=*]\n  =+  b=+<+.a\n  |@  ++  $  (a b c)\n  --\n```\n\n#### Examples\n\n```\n    > =tep (curr scan sym)\n    > `@t`(tep \"asd\")\n    'asd'\n\n    > `@t`(tep \"lek-om\")\n    'lek-om'\n```\n\n---\n",
    "cury": "## `++cury`\n\nCurry left\n\nCurry a gate, binding the head of its sample\n\n#### Accepts\n\n`a` is a gate.\n\n`b` is a noun.\n\n#### Produces\n\nA gate.\n\n#### Source\n\n```hoon\n++  cury\n  |*  [a=$-(^ *) b=*]\n  =+  c=+<+.a\n  |@  ++  $  (a b c)\n  --\n```\n\n#### Examples\n\n```\n    > =mol (cury add 2)\n    > (mol 4)\n    6\n\n    > (mol 7)\n    9\n```\n\n---\n",
    "fore": "## `++fore`\n\nPair before\n\n`+fore` first takes gate `a`, producing a wet gate. The new wet gate then takes `b`, producing the pair of `[a b]`.\n\n#### Accepts\n\n`a` is a gate, and is the sample of `+fore`.\n\n`b` is a gate, and is the sample of `(fore a)`.\n\n#### Produces\n\n`(pair a b)`.\n\n#### Source\n\n```hoon\n++  fore  |*(a=$-(* *) |*(b=$-(* *) (pair a b)))\n```\n\n#### Examples\n\n```\n> =a (fore @ud)\n> `(a @t)`[42 'foo']\n[p=42 q='foo']\n```\n\n---\n",
    "head": "## `++head`\n\nGet head\n\nProduces the head of a cell.\n\n#### Accepts\n\nA cell.\n\n#### Produces\n\nA noun.\n\n#### Source\n\n```hoon\n++  head  |*(^ ,:+<-)\n```\n\n#### Examples\n\n```\n> (head [1 2])\n1\n\n> (head [[1 1] 2])\n[1 1]\n\n> (head \"hello\")\n'h'\n```\n\n---\n",
    "same": "## `++same`\n\nIdentity\n\nProduces the same value that it was given.\n\n#### Accepts\n\nA noun.\n\n#### Produces\n\nA noun.\n\n#### Source\n\n```hoon\n++  same  |*(* +<)\n```\n\n#### Examples\n\n```\n> (same [1 2])\n[1 2]\n\n> (same [[1 1] 2])\n[[1 1] 2]\n\n> (same \"hello\")\n\"hello\"\n```\n\n---\n",
    "succ": "## `++succ`\n\nSuccessor\n\nIncrement an atom.\n\n#### Accepts\n\nAn `atom`.\n\n#### Produces\n\nAn `atom`.\n\n#### Source\n\n```hoon\n++  succ  |=(@ +(+<))\n```\n\n#### Examples\n\n```\n> (succ 1)\n2\n```\n\n---\n",
    "tail": "## `++tail`\n\nGet tail\n\nProduces the tail of a cell.\n\n#### Accepts\n\nA cell.\n\n#### Produces\n\nA noun.\n\n#### Source\n\n```hoon\n++  tail  |*(^ ,:+<+)\n```\n\n#### Examples\n\n```\n    > (tail [1 2])\n    2\n\n    > (tail [[1 1] 2])\n    2\n\n    > (tail \"hello\")\n    \"ello\"\n```\n\n---\n",
    "test": "## `++test`\n\nTest for equality\n\nChecks if `a` and `b` are equal, producing a flag.\n\n#### Accepts\n\n`a` is a noun.\n\n`b` is a noun.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  test  |=(^ =(+<- +<+))\n```\n\n#### Examples\n\n```\n    > (test 1 1)\n    %.y\n\n    > (test [2 0] 2)\n    %.n\n\n    > (test \"hello\" 'hello')\n    %.n\n\n    > (test \"hello\" ['h' 'e' 'l' 'l' 'o' ~])\n    %.y\n```\n\n---\n",
    "lead": "## `++lead`\n\nPut head\n\n`(lead a)` produces a wet gate, then `((lead a) b)` produces `[a b]`.\n\n#### Accepts\n\n`a` is a noun, and is the sample of `+lead`.\n\n`b` is a noun, and is the sample of `((lead a) b)`\n\n#### Produces\n\nA cell of `[a b]`.\n\n#### Source\n\n```hoon\n++  lead  |*(* |*(* [+>+< +<]))\n```\n\n#### Examples\n\n```\n> =a (lead 'foo')\n> (a 'bar')\n['foo' 'bar']\n```\n\n---\n",
    "late": "## `++late`\n\nPut tail\n\n`(late a)` produces a wet gate, then `((late a) b)` produces the inverted cell `[b a]`. This is the inverted version of [+lead](#lead).\n\n#### Accepts\n\n`a` is a noun, and is the sample of `+late`.\n\n`b` is a noun, and is the sample of `(late a)`.\n\n#### Produces\n\nA cell of `[b a]`.\n\n#### Source\n\n```hoon\n++  late  |*(* |*(* [+< +>+<]))\n```\n\n#### Examples\n\n```\n> =a (late 'foo')\n> (a 'bar')\n['bar' 'foo']\n```\n\n---\n",
    "jar": "## `++jar`\n\nMold generator. A `jar` is a `map` of `list`.\n\nProduces the mold of a map from `key` to lists of `value`.\n\n#### Accepts\n\n`key` is a `mold`, and is the type of the map key\n\n`value` is a `mold`, and is the type of items in the lists. The lists are the values in the map.\n\n#### Produces\n\nA `mold`.\n\n#### Source\n\n```hoon\n++  jar  |$  [key value]  (map key (list value))\n```\n\n#### Examples\n\n```\n> `(jar @t @ud)`(malt ~[['foo' ~[1 2 3]] ['bar' ~[4 5 6]]])\n{[p='bar' q=~[4 5 6]] [p='foo' q=~[1 2 3]]}\n```\n\n#### Discussion\n\nSee also: [`ja`](/reference/hoon/stdlib/2j#ja), [`by`](/reference/hoon/stdlib/2i), [`map`](#map), [lists](/reference/hoon/stdlib/2b)\n\n---\n",
    "jug": "## `++jug`\n\nMold generator. A `jug` is a `map` of `set`.\n\nProduces the mold of a map from `key` to sets of `value`.\n\n#### Accepts\n\n`key` is a `mold`, and is the type of the map key.\n\n`value` is a `mold`, and is the type of items in the sets. The sets are the values in the map.\n\n#### Produces\n\nA `mold`.\n\n#### Source\n\n```hoon\n++  jug  |$  [key value]  (map key (set value))\n```\n\n#### Examples\n\n```\n> `(jug @t @ud)`(malt ~[['foo' (silt ~[1 2 3])] ['bar' (silt ~[4 5 6])]])\n{[p='bar' q={5 6 4}] [p='foo' q={1 2 3}]}\n```\n\n#### Discussion\n\nSee also: [`ju`](/reference/hoon/stdlib/2j#ju), [`by`](/reference/hoon/stdlib/2i), [`map`](#map), [`set`](#set)\n\n---\n",
    "map": "## `++map`\n\nMap\n\nMold generator. A `map` is a [treap](https://en.wikipedia.org/wiki/Treap) of\nkey-value pairs.\n\nProduces the mold of a map from `key` to `value`.\n\n#### Accepts\n\n`key` is a `mold`.\n\n`value` is a `mold`.\n\n#### Produces\n\nA `mold`.\n\n#### Source\n\n```hoon\n++  map\n  |$  [key value]\n  $|  (tree (pair key value))\n  |=(a=(tree (pair)) ?:(=(~ a) & ~(apt by a)))\n```\n\n#### Examples\n\n```\n> ? *(map @t @ud)\n  nlr([p=@t q=@ud])\n{}\n```\n\n```\n> `(map @t @ud)`(malt ~[['foo' 1] ['bar' 2] ['baz' 3]])\n{[p='bar' q=2] [p='baz' q=3] [p='foo' q=1]}\n```\n\n#### Discussion\n\nSee also: [`by`](/reference/hoon/stdlib/2i)\n\n---\n",
    "qeu": "## `++qeu`\n\nQueue\n\nMold generator. An ordered [treap](http://en.wikipedia.org/wiki/Treap) of\nitems.\n\nProduces the mold of a queue of `item`.\n\n#### Accepts\n\n`item` is a `mold`.\n\n#### Produces\n\nA `mold`.\n\n#### Source\n\n```hoon\n++  qeu\n  |$  [item]\n  $|  (tree item)\n  |=(a=(tree) ?:(=(~ a) & ~(apt to a)))\n```\n\n#### Examples\n\n```\n> `(qeu @ud)`(~(gas to *(qeu @ud)) ~[1 2 3 4 5])\n{5 4 3 2 1}\n```\n\n#### Discussion\n\nSee also: [`+to`](/reference/hoon/stdlib/2k#to)\n\n---\n",
    "set": "## `++set`\n\nSet\n\nMold generator. A `set` is an unordered [treap](http://en.wikipedia.org/wiki/Treap) of\nitems.\n\nProduces the mold of a set of `item`.\n\n#### Accepts\n\n`item` is a `mold`.\n\n#### Produces\n\nA `mold`.\n\n#### Source\n\n```hoon\n++  set\n  |$  [item]\n  $|  (tree item)\n  |=(a=(tree) ?:(=(~ a) & ~(apt in a)))\n```\n\n#### Examples\n\n```\n> `(set @ud)`(silt ~[1 2 3 4 5])\n{5 1 2 3 4}\n```\n\n#### Discussion\n\nSee also: [`+in`](/reference/hoon/stdlib/2h)\n\n---\n",
    "cue": "## `++cue` {% #cue %}\n\nUnpack atom to noun\n\nProduces a noun unpacked from atom `a`. The inverse of [+jam](#jam).\n\n#### Accepts\n\n`a` is an atom.\n\n#### Produces\n\nA noun.\n\n#### Source\n\n```hoon\n++  cue\n  ~/  %cue\n  |=  a=@\n  ^-  *\n  =+  b=0\n  =+  m=`(map @ *)`~\n  =<  q\n  |-  ^-  [p=@ q=* r=(map @ *)]\n  ?:  =(0 (cut 0 [b 1] a))\n    =+  c=(rub +(b) a)\n    [+(p.c) q.c (~(put by m) b q.c)]\n  =+  c=(add 2 b)\n  ?:  =(0 (cut 0 [+(b) 1] a))\n    =+  u=$(b c)\n    =+  v=$(b (add p.u c), m r.u)\n    =+  w=[q.u q.v]\n    [(add 2 (add p.u p.v)) w (~(put by r.v) b w)]\n  =+  d=(rub c a)\n  [(add 2 p.d) (need (~(get by m) q.d)) m]\n```\n\n#### Examples\n\n```\n> (jam [1 2 3])\n3.426.417\n\n> (cue 3.426.417)\n[1 2 3]\n```\n\n---\n",
    "jam": "## `++jam` {% #jam %}\n\nPack noun to atom\n\nProduces an atom packed from noun `a`. The inverse of [+cue](#cue).\n\n#### Accepts\n\n`a` is a noun.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  jam\n  ~/  %jam\n  |=  a=*\n  ^-  @\n  =+  b=0\n  =+  m=`(map * @)`~\n  =<  q\n  |-  ^-  [p=@ q=@ r=(map * @)]\n  =+  c=(~(get by m) a)\n  ?~  c\n    =>  .(m (~(put by m) a b))\n    ?:  ?=(@ a)\n      =+  d=(mat a)\n      [(add 1 p.d) (lsh 0 q.d) m]\n    =>  .(b (add 2 b))\n    =+  d=$(a -.a)\n    =+  e=$(a +.a, b (add b p.d), m r.d)\n    [(add 2 (add p.d p.e)) (mix 1 (lsh [0 2] (cat 0 q.d q.e))) r.e]\n  ?:  ?&(?=(@ a) (lte (met 0 a) (met 0 u.c)))\n    =+  d=(mat a)\n    [(add 1 p.d) (lsh 0 q.d) m]\n  =+  d=(mat u.c)\n  [(add 2 p.d) (mix 3 (lsh [0 2] q.d)) m]\n```\n\n#### Examples\n\n```\n> (jam 1)\n12\n\n> (cue 12)\n1\n```\n\n```\n> (jam [1 1])\n817\n\n> (cue 817)\n[1 1]\n```\n\n```\n> (jam [~ u=19])\n39.689\n\n> (cue 39.689)\n[0 19]\n```\n\n---\n",
    "mat": "## `++mat`\n\nLength-encode\n\nProduces a cell whose tail `q` is atom `a` with a bit representation of\nits length prepended to it (as the least significant bits). The head `p`\nis the length of `q` in bits.\n\n#### Accepts\n\n`a` is an atom.\n\n#### Produces\n\nA cell of two atoms, `p` and `q`.\n\n#### Source\n\n```hoon\n++  mat\n  ~/  %mat\n  |=  a=@\n  ^-  [p=@ q=@]\n  ?:  =(0 a)\n    [1 1]\n  =+  b=(met 0 a)\n  =+  c=(met 0 b)\n  :-  (add (add c c) b)\n  (cat 0 (bex c) (mix (end [0 (dec c)] b) (lsh [0 (dec c)] a)))\n```\n\n#### Examples\n\n```\n> (mat 0xaaa)\n[p=20 q=699.024]\n\n> (met 0 q:(mat 0xaaa))\n20\n\n> `@ub`q:(mat 0xaaa)\n0b1010.1010.1010.1001.0000\n\n> =a =-(~&(- -) `@ub`0xaaa)\n0b1010.1010.1010\n\n> =b =-(~&(- -) `@ub`(xeb a))\n0b1100\n\n> =b =-(~&(- -) `@ub`(met 0 a))\n0b1100\n\n> =c =-(~&(- -) (xeb b))\n4\n\n> [`@ub`a `@ub`(end 0 (dec c) b) `@ub`(bex c)]\n[0b1010.1010.1010 0b100 0b1.0000]\n```\n\n#### Discussion\n\n`mat` is only used internally as a helper to [`jam`](#jam).\n\n---\n",
    "rub": "## `++rub`\n\nLength-decode\n\nThe inverse of `mat`. Accepts a cell of index `a` and a bitstring `b`\nand produces the cell whose tail `q` is the decoded atom at index `a`\nand whose head is the length of the encoded atom `q`, by which the\noffset `a` is advanced.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is a bitstring as an atom.\n\n#### Produces\n\nA cell of two atoms, `p` and `q`.\n\n#### Source\n\n```hoon\n++  rub\n  ~/  %rub\n  |=  [a=@ b=@]\n  ^-  [p=@ q=@]\n  =+  ^=  c\n      =+  [c=0 m=(met 0 b)]\n      |-  ?<  (gth c m)\n      ?.  =(0 (cut 0 [(add a c) 1] b))\n        c\n      $(c +(c))\n  ?:  =(0 c)\n    [1 0]\n  =+  d=(add a +(c))\n  =+  e=(add (bex (dec c)) (cut 0 [d (dec c)] b))\n  [(add (add c c) e) (cut 0 [(add d (dec c)) e] b)]\n```\n\n#### Examples\n\n```\n> `@ub`(jam 0xaaa)\n0b1.0101.0101.0101.0010.0000\n\n> (rub 1 0b1.0101.0101.0101.0010.0000)\n[p=20 q=2.730]\n\n> `@ux`q:(rub 1 0b1.0101.0101.0101.0010.0000)\n0xaaa\n```\n\n#### Discussion\n\n`rub` is only used internally as a helper to [`cue`](#cue).\n\n---\n",
    "axis": "## `+$axis`\n\nTree address\n\nA Nock axis inside a noun. After the leading 1, in binary, a `1` signfies\nright and `0` left.\n\n#### Source\n\n```hoon\n+$  axis  @\n```\n\n#### Examples\n\n```\n> =axis `axis`7\n> axis\n7\n> `@ub`axis\n0b111\n\n> =noun [[4 5] [6 14 15]]\n\n> .*(noun [0 axis])\n[14 15]\n```\n\n---\n",
    "bean": "## `+$bean`\n\nBoolean\n\n`0`, `&`, or `%.y` are true, and `1`, `|`, and `%.n` are false.\n\nNote 1 is false and 0 is true. This is sometimes referred to as \"loobean\".\n\n#### Source\n\n```hoon\n+$  bean  ?\n```\n\n#### Examples\n\n```\n> *bean\n%.y\n```\n\n```\n> `bean`&\n%.y\n```\n\n```\n> `bean`|\n%.n\n```\n\n---\n",
    "flag": "## `+$flag`\n\nBoolean\n\nSame as [$bean](#bean).\n\n#### Source\n\n```hoon\n+$  flag  ?\n```\n\n---\n",
    "char": "## `+$char`\n\nCharacter\n\nA single `@t` character.\n\n#### Source\n\n```hoon\n+$  char  @t\n```\n\n#### Examples\n\n```\n> *char\n''\n```\n\n```\n> `char`'a'\n'a'\n```\n\n---\n",
    "cord": "## `+$cord`\n\nUTF-8 text\n\nOne of Hoon's two string types (the other being `tape`). A cord is an\natom of UTF-8 text.\n\n#### Source\n\n```hoon\n+$  cord  @t\n```\n\n#### Examples\n\n```\n> *cord\n''\n\n> `@ux`'foobar'\n0x7261.626f.6f66\n\n> `@t`97\n'a'\n\n> `@`'urbit'\n499.984.265.845\n\n> `@t`499.984.265.845\n'urbit'\n```\n\n#### Discussion\n\nAura `@t` designates a Unicode atom, little-endian: the first character\nin the text is the least-significant byte.\n\n[`trip`](/reference/hoon/stdlib/4b#trip) converts from `cord` to `tape`, and [`crip`](/reference/hoon/stdlib/4b#crip) converts\nfrom `tape` to `cord`.\n\n---\n",
    "byts": "## `+$byts`\n\nbytes, LSB first\n\nAn atom `dat` with its byte-length specified in `wid`. This is to handle leading zeros that are typically ignored.\n\n#### Source\n\n```hoon\n+$  byts  [wid=@ud dat=@]\n```\n\n#### Examples\n\n```\n> *byts\n[wid=0 dat=0]\n```\n\n```\n> =a `byts`[4 2]\n> a\n[wid=4 dat=2]\n\n> `@ux`(rev 3 a)\n0x200.0000\n```\n\n---\n",
    "date": "## `+$date`\n\nParsed date\n\nA boolean designating AD or BC, a year atom, a month atom, and a `tarp`,\nwhich is a day atom and a time.\n\n#### Source\n\n```hoon\n+$  date  [[a=? y=@ud] m=@ud t=tarp]\n```\n\n#### Examples\n\n```\n> *date\n[[a=%.y y=0] m=0 t=[d=0 h=0 m=0 s=0 f=~]]\n\n> `date`(yore ~2014.6.6..21.09.15..0a16)\n[[a=%.y y=2.014] m=6 t=[d=6 h=21 m=9 s=15 f=~[0xa16]]]\n\n> now\n~2018.5.25..17.55.15..9ad8\n```\n\n#### Discussion\n\nSee also: [`year`](/reference/hoon/stdlib/3c#year), [`yore`](/reference/hoon/stdlib/3c#yore)\n\n---\n",
    "knot": "## `+$knot`\n\nASCII text\n\nAn atom type that only permits ASCII characters.\n\n#### Source\n\n```hoon\n+$  knot  @ta\n```\n\n#### Examples\n\n```\n> *knot\n~.\n\n> `@ta`105\n~.i\n```\n\n---\n",
    "noun": "## `+$noun`\n\nAny noun\n\n#### Source\n\n```hoon\n+$  noun  *\n```\n\n#### Examples\n\n```\n> *noun\n0\n```\n\n```\n> `noun`'foo'\n7.303.014\n```\n\n```\n> `noun`\"foo\"\n[102 111 111 0]\n```\n\n---\n",
    "path": "## `+$path`\n\nLike unix path\n\nA path is a list of [`$knot`](#knot).\n\n#### Source\n\n```hoon\n+$  path  (list knot)\n```\n\n#### Examples\n\n```\n> *path\n/\n```\n\n```\n> `path`\"foo\"\n/f/o/o\n```\n\n```\n> `path`[~.foo ~.bar ~.baz ~]\n/foo/bar/baz\n```\n\n---\n",
    "stud": "## `+$stud`\n\nStandard name\n\n#### Source\n\n```hoon\n+$  stud                    ::  standard name\n          $@  mark=@tas     ::  auth=urbit\n          $:  auth=@tas     ::  standards authority\n              type=path     ::  standard label\n          ==                ::\n```\n\n---\n",
    "tang": "## `+$tang`\n\nBottom-first error\n\nA list of [`tank`](#tank)s. It's for printing types and bottom-up printing of stack\ntraces.\n\n#### Source\n\n```hoon\n+$  tang  (list tank)\n```\n\n#### Examples\n\n```\n> *tang\n~\n```\n\n```\n> %-  %-  slog\n      ^-  tang\n      :~  'foo'\n          leaf+\"bar\"\n          [%palm [\"|\" \"(\" \"!\" \")\"] leaf+\"foo\" leaf+\"bar\" leaf+\"baz\" ~]\n          [%rose [\" \" \"[\" \"]\"] leaf+\"foo\" leaf+\"bar\" leaf+\"baz\" ~]\n      ==\nfoo\nbar\n(!foo|bar|baz)\n[foo bar baz]\n  ~\n~\n```\n\n---\n",
    "tank": "## `+$tank`\n\nFormatted print tree\n\nA `tank` is one of four cases:\n\n- just a `cord`.\n- `%leaf` is just a `tape`.\n- `%palm` is a list of `tank` delimited by the strings in `p`, with back-steps at new lines.\n- `%rose` is a list of `tank` delimited by the strings in `p` without back-steps at new lines.\n\n#### Source\n\n```hoon\n+$  tank\n  $~  leaf/~\n  $@  cord\n  $%  [%leaf p=tape]\n      [%palm p=(qual tape tape tape tape) q=(list tank)]\n      [%rose p=(trel tape tape tape) q=(list tank)]\n  ==\n```\n\n#### Examples\n\n```\n> *tank\n[%leaf p=\"\"]\n```\n\n```\n> ~(ram re 'foobar')\n\"foobar\"\n```\n\n```\n> ~(ram re leaf+\"foo\")\n\"foo\"\n```\n\n```\n> ~(ram re [%palm [\"|\" \"(\" \"!\" \")\"] leaf+\"foo\" leaf+\"bar\" leaf+\"baz\" ~])\n\"(!foo|bar|baz)\"\n```\n\n```\n> ~(ram re [%rose [\" \" \"[\" \"]\"] leaf+\"foo\" leaf+\"bar\" leaf+\"baz\" ~])\n\"[foo bar baz]\"\n```\n\n---\n",
    "tape": "## `+$tape`\n\nList of characters\n\nOne of Hoon's two string types, the other being [`+cord`](#cord). A tape is a list of `@tD`.\n\n#### Source\n\n```hoon\n+$  tape  (list @tD)\n```\n\n#### Examples\n\n```\n> *tape\n\"\"\n\n> `tape`\"foobar\"\n\"foobar\"\n\n>`(list @t)`\"foobar\"\n<|f o o b a r|>\n\n>`(list @tD)`\"foobar\"\n\"foobar\"\n\n> `(list @)`\"foobar\"\n~[102 111 111 98 97 114]\n```\n\n---\n",
    "tour": "## `+$tour`\n\nUTF-32 clusters\n\nA `tour` is a list of UTF-32 characters.\n\n#### Source\n\n```hoon\n+$  tour  (list @c)\n```\n\n#### Examples\n\n```\n> *tour\n~\n```\n\n```\n> `tour`(tuba \"foobar\")\n~[~-f ~-o ~-o ~-b ~-a ~-r]\n```\n\n---\n",
    "tarp": "## `+$tarp`\n\nParsed time\n\nThe time component of a `date`: day, hour, minute, second and a list of `@ux`\nfor precision.\n\n#### Source\n\n```hoon\n+$  tarp  [d=@ud h=@ud m=@ud s=@ud f=(list @ux)]\n```\n\n#### Examples\n\n```\n> *tarp\n[d=0 h=0 m=0 s=0 f=~]\n\n> (yell now)\n[d=106.751.991.821.625 h=22 m=58 s=10 f=~[0x44ff]]\n\n> `tarp`(yell ~2014.6.6..21.09.15..0a16)\n[d=106.751.991.820.172 h=21 m=9 s=15 f=~[0xa16]]\n\n> (yell ~d20)\n[d=20 h=0 m=0 s=0 f=~]\n```\n\n---\n",
    "term": "## `+$term`\n\nHoon constant\n\nA restricted text atom for Hoon constants. The only characters permitted are\nlowercase ASCII letters, `-`, and `0-9`, the latter two of which cannot be the\nfirst character. The syntax for `@tas` is the text itself, always preceded by\n`%`. The empty `@tas` has a\nspecial syntax, `$`.\n\n#### Source\n\n```hoon\n+$  term  @tas\n```\n\n#### Examples\n\n```\n> *term\n%$\n\n> *%term\n%term\n\n> %dead-fish9\n%dead-fish9\n\n> -:!>(%dead-fish9)\n#t/%dead-fish9\n\n> -:!>(`@tas`%dead-fish9)\n#t/@tas\n```\n\n---\n",
    "wain": "## `+$wain`\n\nList of strings\n\nA list of `cord`s. A `wain` is used instead of a single `cord` with `\\n`.\n\n#### Source\n\n```hoon\n+$  wain  (list cord)\n```\n\n#### Examples\n\n```\n> *wain\n<||>\n\n> `wain`/som/del/rok\n<|som del rok|>\n```\n\n---\n",
    "wall": "## `+$wall`\n\nList of list of characters\n\nA list of `tape`s. `wall` is used instead of a single `tape` with `\\n`.\n\n#### Source\n\n```hoon\n+$  wall  (list tape)\n```\n\n#### Examples\n\n```\n    > *wall\n    <<>>\n\n    > `wall`(wash [0 20] leaf+<(bex 256)>)\n    <<\n      \"\\\\/115.792.089.237.\\\\/\"\n      \"  316.195.423.570.\"\n      \"  985.008.687.907.\"\n      \"  853.269.984.665.\"\n      \"  640.564.039.457.\"\n      \"  584.007.913.129.\"\n      \"  639.936\"\n      \"\\\\/                \\\\/\"\n    >>\n```\n\n---\n",
    "egcd": "## `++egcd`\n\nExtended Euclidean algorithm\n\nProduces `d`, the [greatest common\ndivisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) of `a` and `b`.\nAlso produces `u` and `v` such that `au + bv = GCD(a, b)`.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is an atom.\n\n#### Produces\n\n`d`, the greatest common divisor, is an atom.\n\n`u`, the coefficient of `a`, is a signed integer.\n\n`v`, the coefficient of `b`, is a signed integer.\n\n#### Source\n\n```hoon\n++  egcd\n  |=  [a=@ b=@]\n  =+  si\n  =+  [c=(sun a) d=(sun b)]\n  =+  [u=[c=(sun 1) d=--0] v=[c=--0 d=(sun 1)]]\n  |-  ^-  [d=@ u=@s v=@s]\n  ?:  =(--0 c)\n    [(abs d) d.u d.v]\n  =+  q=(fra d c)\n  %=  $\n    c  (dif d (pro q c))\n    d  c\n    u  [(dif d.u (pro q c.u)) c.u]\n    v  [(dif d.v (pro q c.v)) c.v]\n  ==\n```\n\n#### Examples\n\n```\n> (egcd 11 2)\n[d=1 u=--1 v=-5]\n```\n\n---\n",
    "fo": "## `++fo`\n\nModulo prime\n\nContainer `door` for modular arithmetic functions.\n\n#### Accepts\n\n`a` is an atom\n\n#### Source\n\n```hoon\n++  fo\n  ^|\n  |_  a=@\n```\n\n---\n\n### `++dif:fo`\n\nSubtraction\n\nProduces the difference between atoms `b` and `c`, with `a` as the modular base.\n\n#### Accepts\n\n`a` is an atom, and is the sample of `+fo`.\n\n`b` is an atom.\n\n`c` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  dif\n  |=  [b=@ c=@]\n  (sit (sub (add a b) (sit c)))\n```\n\n#### Examples\n\n```\n> (~(dif fo 6) 1 2)\n5\n\n> (~(dif fo 21) 11 45)\n8\n```\n\n---\n\n### `++exp:fo`\n\nExponent\n\nProduces the power of `c` raised to the `b`, with `a` as the modular base.\n\n#### Accepts\n\n`a` is an atom, and is the sample of `+fo`.\n\n`b` is an atom.\n\n`c` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  exp\n  |=  [b=@ c=@]\n  ?:  =(0 b)\n    1\n  =+  d=$(b (rsh 0 b))\n  =+  e=(pro d d)\n  ?:(=(0 (end 0 b)) e (pro c e))\n```\n\n#### Examples\n\n```\n    > (~(exp fo 5) 8 2)\n    1\n\n    > (~(exp fo 95) 8 2)\n    66\n\n    > (~(exp fo 195) 8 2)\n    61\n\n    > (~(exp fo 995) 8 2)\n    256\n```\n\n---\n\n### `++fra:fo`\n\nDivide\n\nProduces the quotient of `b` divided by `c`, with `a` as the modular base.\n\n#### Accepts\n\n`a` is an atom, and is the sample of `+fo`.\n\n`b` is an atom.\n\n`c` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  fra\n  |=  [b=@ c=@]\n  (pro b (inv c))\n```\n\n#### Examples\n\n```\n> (~(fra fo 2) 8 2)\n0\n\n> (~(fra fo 3) 8 2)\n1\n\n> (~(fra fo 4) 8 2)\n0\n\n> (~(fra fo 5) 8 2)\n4\n```\n\n---\n\n### `++inv:fo`\n\nInverse\n\nProduces an atom by taking the signed modulus of `a` with the coefficient `u`;\n`u` is produced by taking the [`+egcd`](#egcd) of `a` and `b`.\n\n#### Accepts\n\n`a` is an atom, and is the sample of `+fo`.\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  inv\n  |=  b=@\n  =+  c=(dul:si u:(egcd b a) a)\n  c\n```\n\n#### Examples\n\n```\n> (~(inv fo 11) 2)\n6\n\n> (~(inv fo 71) 255)\n22\n\n> (~(inv fo 79) 255)\n22\n\n> (~(inv fo 78) 255)\n67\n\n> (~(inv fo 70) 255)\n67\n```\n\n---\n\n### `++pro:fo`\n\nMultiplication\n\nProduces the multiplication of `b` and `c` modulo `a`.\n\n#### Accepts\n\n`a` is an atom, and is the sample of `+fo`.\n\n`b` is an atom.\n\n`c` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  pro\n  |=  [b=@ c=@]\n  (sit (mul b c))\n```\n\n#### Examples\n\n```\n> (~(pro fo 3) 11 4)\n2\n\n> (mod 44 3)\n2\n```\n\n---\n\n### `++sit:fo`\n\nModulus\n\nProduces the remainder of `b` modulo `a`.\n\n#### Accepts\n\n`a` is an atom, and is the sample of `+fo`.\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  sit\n  |=  b=@\n  (mod b a)\n```\n\n#### Examples\n\n```\n> (~(sit fo 3) 14)\n2\n```\n\n---\n\n### `++sum:fo`\n\nModular sum\n\nProduces the remainder of `(b + c) mod a`.\n\n#### Accepts\n\n`a` is an atom, and is the sample of `+fo`.\n\n`b` is an atom.\n\n`c` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  sum\n  |=  [b=@ c=@]\n  (sit (add b c))\n```\n\n#### Examples\n\n```\n> (~(sum fo 3) 14 3)\n2\n\n> (mod 17 3)\n2\n```\n\n---\n",
    "si": "## `++si`\n\nSigned integer\n\nContainer core for signed integer functions.\n\n#### Source\n\n```hoon\n++  si\n  ^?\n  |%\n```\n\n#### Discussion\n\nThe signed-integer type is represented by the `@s` aura. Positive integers are\nprepended with a `--`, and negative integers are prepended with a `-`. For\nexample, `--1` represents positive one, and `-1` represents negative one.\n\n[ZigZag encoding](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#signed-ints)\nis used to convert atoms to signed integers. Positive signed\nintegers correspond to even atoms of twice their absolute value, and negative\nsigned integers correspond to odd atoms of twice their absolute value minus\none. For example:\n\n```\n> `@`--4\n8\n> `@s`8\n--4\n```\n\n```\n> `@`-4\n7\n> `@s`7\n-4\n```\n\n---\n\n### `++abs:si`\n\nAbsolute value\n\nProduces the absolute value of signed integer `a`.\n\n#### Accepts\n\n`a` is a signed integer.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  abs  |=(a=@s (add (end 0 a) (rsh 0 a)))\n```\n\n#### Examples\n\n```\n> (abs:si -11)\n11\n\n> (abs:si --520)\n520\n```\n\n---\n\n### `++dif:si`\n\nSubtraction\n\nProduces the difference of `a` minus `b`.\n\n#### Accepts\n\n`a` is a signed integer.\n\n`b` is a signed integer.\n\n#### Produces\n\nA signed integer.\n\n#### Source\n\n```hoon\n++  dif  |=  [a=@s b=@s]\n         (sum a (new !(syn b) (abs b)))\n```\n\n#### Examples\n\n```\n> (dif:si --3 -2)\n--5\n\n> (dif:si -3 --2)\n-5\n```\n\n---\n\n### `++dul:si`\n\nModulus\n\nProduces the remainder of `b` modulo `a`.\n\n#### Examples\n\n`a` is a signed integer.\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  dul  |=  [a=@s b=@]\n         =+(c=(old a) ?:(-.c (mod +.c b) (sub b +.c)))\n```\n\n#### Examples\n\n```\n> `@s`(dul:si -1 --5)\n-5\n\n> `@`--5\n10\n> `@s`(dul:si -1 10)\n-5\n\n> `@s`(dul:si -11 -61)\n--55\n```\n\n---\n\n### `++fra:si`\n\nDivide\n\nProduces the quotient of `b` divided by `c`.\n\n#### Accepts\n\n`a` is a signed integer.\n\n`b` is a signed integer.\n\n#### Produces\n\nA signed atom.\n\n#### Source\n\n```hoon\n++  fra  |=  [a=@s b=@s]\n         (new =(0 (mix (syn a) (syn b))) (div (abs a) (abs b)))\n```\n\n#### Examples\n\n```\n> (fra:si -1 -1)\n--1\n\n> (fra:si -11 --2)\n-5\n\n> (fra:si -0 -1)\n--0\n```\n\n---\n\n### `++new:si`\n\nAtom to `@s`\n\nProduces a signed integer from an atom `b`. The product's sign is determined\nby the value of flag `a`: `&` will result in a prepending `--`, and `|` will\nresult in a prepending `-`.\n\n#### Accepts\n\n`a` is a flag.\n\n`b` is an atom.\n\n#### Produces\n\nA signed integer.\n\n#### Source\n\n```hoon\n++  new  |=  [a=? b=@]\n         `@s`?:(a (mul 2 b) ?:(=(0 b) 0 +((mul 2 (dec b)))))\n```\n\n#### Examples\n\n```\n> (new:si | 2)\n-2\n\n> (new:si & 2)\n--2\n\n> (new:si & -2)\n--3\n\n> (new:si & --2)\n--4\n```\n\n---\n\n### `++old:si`\n\nSign and absolute value\n\nProduces a cell composed of a `%.y` or `%.n`, depending on whether `a` is\npositive or negative, and the absolute value of `a`.\n\n#### Accepts\n\n`a` is a signed integer.\n\n#### Produces\n\nA cell composed of a `?` and an atom.\n\n#### Source\n\n```hoon\n      ++  old  |=(a=@s [(syn a) (abs a)])\n```\n\n```hoon\n++  old  |=(a=@s [(syn a) (abs a)])\n```\n\n#### Examples\n\n```\n> (old:si -2)\n[%.n 2]\n\n> (old:si --2)\n[%.y 2]\n```\n\n---\n\n### `++pro:si`\n\nMultiplication\n\nProduces a signed integer by multiplying `a` and `b`.\n\n#### Accepts\n\n`a` is an unsigned integer.\n\n`b` is an unsigned integer.\n\n#### Source\n\n```hoon\n++  pro  |=  [a=@s b=@s]\n         (new =(0 (mix (syn a) (syn b))) (mul (abs a) (abs b)))\n```\n\n#### Examples\n\n```\n> (pro:si -3 -3)\n--9\n\n> (pro:si -3 --3)\n-9\n```\n\n---\n\n### `++rem:si`\n\nRemainder\n\nProduces a signed integer that is the remainder of `a` divided by `b`.\n\n#### Accepts\n\n`a` is a signed integer.\n\n`b` is a signed integer.\n\n#### Produces\n\nA signed integer.\n\n#### Source\n\n```hoon\n++  rem  |=([a=@s b=@s] (dif a (pro b (fra a b))))\n```\n\n#### Examples\n\n```\n> (rem:si -17 -3)\n-2\n\n> (rem:si --17 -3)\n--2\n\n> (rem:si -17 --3)\n-2\n\n> (rem:si --17 --3)\n--2\n```\n\n---\n\n### `++sum:si`\n\nAddition\n\nProduces an atom by adding `a` and `b`.\n\n#### Accepts\n\n`a` is a signed integer.\n\n`b` is a signed integer.\n\n#### Produces\n\nA signed integer.\n\n#### Source\n\n```hoon\n++  sum  |=  [a=@s b=@s]\n         =+  [c=(old a) d=(old b)]\n         ?:  -.c\n           ?:  -.d\n             (new & (add +.c +.d))\n           ?:  (gte +.c +.d)\n             (new & (sub +.c +.d))\n           (new | (sub +.d +.c))\n         ?:  -.d\n           ?:  (gte +.c +.d)\n             (new | (sub +.c +.d))\n           (new & (sub +.d +.c))\n         (new | (add +.c +.d))\n```\n\n#### Examples\n\n```\n> (sum:si -11 --2)\n-9\n\n> (sum:si --2 --2)\n--4\n```\n\n---\n\n### `++sun:si`\n\n`@u` to `@s`\n\nMultiplies the unsigned integer `a` by two, producing an atom.\n\n#### Accepts\n\n`a` is an unsigned integer.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  sun  |=(a=@u (mul 2 a))\n```\n\n#### Examples\n\n```\n> (sun:si 90)\n180\n\n> (sun:si --90)\n360\n> `@u`--90\n180\n\n> (sun:si --89)\n356\n> `@u`--89\n178\n\n> (sun:si -89)\n354\n> `@u`-89\n177\n```\n\n---\n\n### `++syn:si`\n\nSign test\n\nTests whether signed atom `a` is positive or negative. `%.y` is produced if `a`\nis positive, and `%.n` is produced if `a` is negative.\n\n#### Accepts\n\n`a` is a signed integer.\n\n#### Produces\n\nA `?`.\n\n#### Source\n\n```hoon\n++  syn  |=(a=@s =(0 (end 0 a)))\n```\n\n#### Examples\n\n```\n> (syn:si -2)\n%.n\n\n> (syn:si --2)\n%.y\n```\n\n---\n\n### `++cmp:si`\n\nCompare\n\nCompares `a` and `b` to see which is greater. If `a` is greater than `b`, `--1`\nis produced. If `b` is greater than `a`, `-1` is produced. If `a` and `b` are\nequal, `--0` is produced.\n\n#### Accepts\n\n`a` is a signed integer.\n\n`b` is a signed integer.\n\n#### Produces\n\nA signed integer.\n\n#### Source\n\n```hoon\n++  cmp  |=  [a=@s b=@s]\n         ^-  @s\n         ?:  =(a b)\n           --0\n         ?:  (syn a)\n           ?:  (syn b)\n             ?:  (gth a b)\n               --1\n             -1\n           --1\n        ?:  (syn b)\n          -1\n        ?:  (gth a b)\n          -1\n        --1\n```\n\n#### Examples\n\n```\n> (cmp:si -2 --1)\n-1\n\n> (cmp:si -2 --1)\n-1\n\n> (cmp:si --2 --1)\n--1\n\n> (cmp:si --2 --2)\n--0\n\n> (cmp:si --2 --5)\n-1\n```\n\n---\n",
    "fn": "## `++fn`\n\nFloat\n\nA mold for the floating-point arithmetic using the base of two, the formula is\n`(-1)^s * a * 2^e`.\n\nProduces either a float (`%f`), an infinity of other sign (`%i`),\nor not-a-number (`%n`). `s` refers to sign, the `flag`s `&` or `|`; `e` to\nexponent, a signed decimal; and `a` to the significand, an unsigned integer.\n\n#### Source\n\n```hoon\n++  fn\n  $%  [%f s=? e=@s a=@u]\n      [%i s=?]\n      [%n ~]\n  ==\n```\n\n#### Examples\n\n```\n> *fn\n[%n ~]\n\n> (add:fl [%f & --33 2] [%f | --23 2])\n[%f s=%.y e=-79 a=10.374.452.512.267.829.421.849.019.032.797.184]\n\n> (add:fl [%i &] [%i &])\n[%i s=%.y]\n\n> (add:fl [%n ~] [%i |])\n[%n ~]\n\n> (sun:fl 961.193.554.848.514.048.973.893.027.381.506.219.443)\n[%f s=%.y e=--17 a=7.333.324.850.834.000.007.430.214.137.126.970]\n```\n\n---\n",
    "dn": "## `++dn`\n\nDecimal float\n\nA mold for the floating-point arithmetic using the base of 10; the formula is\n`(-1)^s * a *10^e`.\n\nValid values are a float (`%d`), an infinity (`%i`), or a not-a-number (`%n`).\n`s` refers to sign, the `flag`s `&` or `|`; `e` to exponent, a signed decimal;\nand `a` to the significand, an unsigned integer.\n\n```hoon\n++  dn\n  $%  [%d s=? e=@s a=@u]\n      [%i s=?]\n      [%n ~]\n  ==\n```\n\n#### Examples\n\n```\n> `dn`[%d & --0 17.163.091.968]\n[%d s=%.y e=--0 a=17.163.091.968]\n\n> `dn`[%i s=%.y]\n[%i s=%.y]\n\n> `dn`[%n ~]\n[%n ~]\n```\n\n---\n",
    "rn": "## `++rn`\n\nParsed decimal float\n\nA mold for the floating-point arithmetic using the base of 10; the formula is\n`(-1)^s * a *10^e`.\n\nProduces either a parsed float (`%d`), infinity of either sign (`%i`), or\nnot-a-number (`%n`).\n\n#### Source\n\n```hoon\n++  rn\n  $%  [%d a=? b=[c=@ [d=@ e=@] f=? i=@]]\n      [%i a=?]\n      [%n ~]\n  ==\n```\n\n#### Examples\n\n```\n> `rn`[%d | [2 [3 4] | 17.163]]\n[%d a=%.n b=[c=2 [d=3 e=4] f=%.n i=17.163]]\n```\n\n---\n",
    "fl": "## `++fl`\n\nArbitrary-precision floating-point\n\nContainer arm for floating-point arithmetic functions.\n\n- Precision (`p`): number of bits in the significand; must be at least 2.\n  Default is 113.\n- Minimum exponent (`v`): minimum value of e. Default is -16.494.\n- Width (`w`): Max value of `e` minus min value of `e`. 0 is for fixed-point.\n  Default is 32.765.\n- Rounding mode (`r`): Possible modes are nearest (`%n`), up (`%u`),\n  down (`%d`), to zero (`%z`), and away from zero (`%a`). Default value is `%n`.\n- Behavior (`d`): return denormals (`%d`), flush denormals to zero (`%z`),\n  infinite exponent range (`%i`). Default value is `%d`.\n\n#### Source\n\n```hoon\n++  fl\n  =/  [[p=@u v=@s w=@u] r=$?(%n %u %d %z %a) d=$?(%d %f %i)]\n    [[113 -16.494 32.765] %n %d]\n  =>\n    ~%  %cofl  +>  ~\n    |%\n```\n\n---\n\n### `^rou:fl`\n\nRound\n\nRounds `a` to a the nearest float that can be represented with a 113-bit\nsignificand. There is no term to sign the significand, meaning that a positive\nsign will always be produced.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  rou\n  |=  [a=[e=@s a=@u]]  ^-  fn  (rau a &)\n```\n\n#### Examples\n\n```\n> =a 10.161.487.211.429.486.882.397.572.894.294.017.777\n> (^rou:fl [--12 a])\n[%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]\n\n> (^rou:fl [--12 (add a 1)])\n[%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]\n\n> (^rou:fl [--12 (add a 300)])\n[%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]\n\n> (^rou:fl [--12 (add a 1.000)])\n[%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.003]\n```\n\n---\n\n### `++rau:fl`\n\nVarious roundings\n\nRounds `a` based on what the state of of `r` in the core contained in `fl`. `t`\nis a sticky bit that represents a value less than ULP(a) = 2^(e.a) when passed\nto `lug:fl`.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n`t` is a `flag`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  rau\n  |=  [a=[e=@s a=@u] t=?]  ^-  fn\n  ?-  r\n    %z  (lug %fl a t)  %d  (lug %fl a t)\n    %a  (lug %ce a t)  %u  (lug %ce a t)\n    %n  (lug %ne a t)\n  ==\n```\n\n#### Examples\n\n```\n> (rau:fl [-18 342.602.577] &)\n[%f s=%.y e=-102 a=6.626.897.619.228.945.634.459.505.846.648.832]\n```\n\n#### Discussion\n\nSee [`lug:fl`](#lugfl) for possible rounding operations.\n\n---\n\n### `^add:fl`\n\nAdd\n\nProduces the sum of `a` and `b`. `e` is used to choose between an exact result\n(any-sized significand) or a rounded result (113-bit significand).\n\nThere is no term to sign the significands, so a positive sign will always be\nproduced.\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`\n\n`e` is a `flag`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  add\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u] e=?]  ^-  fn\n  =+  q=(dif:si e.a e.b)\n  |-  ?.  (syn:si q)  $(b a, a b, q +(q))\n  ?:  e\n    [%f & e.b (^add (lsh [0 (abs:si q)] a.a) a.b)]\n  =+  [ma=(met 0 a.a) mb=(met 0 a.b)]\n  =+  ^=  w  %+  dif:si  e.a  %-  sun:si\n    ?:  (gth prc ma)  (^sub prc ma)  0\n  =+  ^=  x  %+  sum:si  e.b  (sun:si mb)\n  ?:  =((cmp:si w x) --1)\n    ?-  r\n      %z  (lug %fl a &)  %d  (lug %fl a &)\n      %a  (lug %lg a &)  %u  (lug %lg a &)\n      %n  (lug %na a &)\n    ==\n  (rou [e.b (^add (lsh [0 (abs:si q)] a.a) a.b)])\n```\n\n#### Examples\n\n```\n> (^add:fl [--33 2.718] [--23 11] %.y)\n[%f s=%.y e=--23 a=2.783.243]\n\n> (^add:fl [--33 2.718] [--23 11] %.n)\n[%f s=%.y e=-68 a=6.890.975.897.521.519.304.902.126.405.156.864]\n```\n\n---\n\n### `^sub:fl`\n\nSubtract\n\nProduces the difference of `a` minus `b.` `e` is used to choose between an exact\nresult (any-sized significand) or a rounded result (113-bit significand).\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n`b` is a cell of a signed integer and an unsigned integer.\n\n`e` is a `flag`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  sub\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u] e=?]  ^-  fn\n  =+  q=(dif:si e.a e.b)\n  |-  ?.  (syn:si q)\n    (fli $(b a, a b, q +(q), r swr))\n  =+  [ma=(met 0 a.a) mb=(met 0 a.b)]\n  =+  ^=  w  %+  dif:si  e.a  %-  sun:si\n    ?:  (gth prc ma)  (^sub prc ma)  0\n  =+  ^=  x  %+  sum:si  e.b  (sun:si +(mb))\n  ?:  &(!e =((cmp:si w x) --1))\n    ?-  r\n      %z  (lug %sm a &)  %d  (lug %sm a &)\n      %a  (lug %ce a &)  %u  (lug %ce a &)\n      %n  (lug %nt a &)\n    ==\n  =+  j=(lsh [0 (abs:si q)] a.a)\n  |-  ?.  (gte j a.b)\n    (fli $(a.b j, j a.b, r swr))\n  =+  i=(^sub j a.b)\n  ?~  i  [%f & zer]\n  ?:  e  [%f & e.b i]  (rou [e.b i])\n```\n\n#### Examples\n\n```\n> (^sub:fl [--33 2.718] [--23 11] %.y)\n[%f s=%.y e=--23 a=2.783.221]\n\n> (^sub:fl [--33 2.718] [--63 11] %.y)\n[%f s=%.n e=--33 a=11.811.157.346]\n```\n\n---\n\n### `^mul:fl`\n\nMultiply\n\nProduces the product of `a` multiplied by `b`. There is no term to sign the\nsignificands, so a positive sign will always be produced.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n`b` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  mul\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]  ^-  fn\n  (rou (sum:si e.a e.b) (^mul a.a a.b))\n```\n\n#### Examples\n\n```\n> (^mul:fl [--3 2.718] [--23 11])\n[%f s=%.y e=-72 a=9.475.054.411.405.900.661.487.108.108.582.912]\n```\n\n---\n\n### `^div:fl`\n\nDivide\n\nProduces the quotient of `a` divided by `b`. There is no term to sign the\nsignificands, so a positive sign will always be produced.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n`b` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  div\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]  ^-  fn\n  =+  [ma=(met 0 a.a) mb=(met 0 a.b)]\n  =+  v=(dif:si (sun:si ma) (sun:si +((^add mb prc))))\n  =.  a  ?:  (syn:si v)  a\n  a(e (sum:si v e.a), a (lsh [0 (abs:si v)] a.a))\n  =+  [j=(dif:si e.a e.b) q=(dvr a.a a.b)]\n  (rau [j p.q] =(q.q 0))\n```\n\n#### Examples\n\n```\n> (^div:fl [--13 2.718] [--23 11])\n[%f s=%.y e=-115 a=10.023.198.055.040.952.765.870.659.817.343.907]\n```\n\n---\n\n### `^sqt:fl`\n\nSquare root\n\nProduces the square root of `a`.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  sqt\n  |=  [a=[e=@s a=@u]]  ^-  fn\n  =.  a\n    =+  [w=(met 0 a.a) x=(^mul +(prc) 2)]\n    =+  ?:((^lth w x) (^sub x w) 0)\n    =+  ?:  =((dis - 1) (dis (abs:si e.a) 1))  -\n      (^add - 1)\n    a(e (dif:si e.a (sun:si -)), a (lsh [0 -] a.a))\n  =+  [y=(^sqt a.a) z=(fra:si e.a --2)]\n  (rau [z p.y] =(q.y 0))\n```\n\n#### Examples\n\n```\n> (^sqt:fl [-18 342.602.577])\n[%f s=%.y e=-107 a=5.865.903.143.604.945.574.132.671.852.050.553]\n```\n\n---\n\n### `^lth:fl`\n\nLess than\n\nTests if `a` is less than `b`.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n`b` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nAn `flag`.\n\n#### Source\n\n```hoon\n++  lth\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]  ^-  ?\n  ?:  =(e.a e.b)  (^lth a.a a.b)\n  =+  c=(cmp:si (ibl a) (ibl b))\n  ?:  =(c -1)  &  ?:  =(c --1)  |\n  ?:  =((cmp:si e.a e.b) -1)\n    (^lth (rsh [0 (abs:si (dif:si e.a e.b))] a.a) a.b)\n  (^lth (lsh [0 (abs:si (dif:si e.a e.b))] a.a) a.b)\n```\n\n#### Examples\n\n```\n> (^lth:fl [-4 684] [--0 35])\n%.n\n\n> (^lth:fl [-4 684] [--0 90])\n%.y\n```\n\n---\n\n### `^equ:fl`\n\nEquals\n\nTests if `a` is equal to `b`.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n`b` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  equ\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]  ^-  ?\n  ?.  =((ibl a) (ibl b))  |\n  ?:  =((cmp:si e.a e.b) -1)\n    =((lsh [0 (abs:si (dif:si e.a e.b))] a.b) a.a)\n  =((lsh [0 (abs:si (dif:si e.a e.b))] a.a) a.b)\n```\n\n#### Examples\n\n```\n> (^equ:fl [-4 480] [-0 50])\n%.n\n\n> (^equ:fl [-4 480] [-0 30])\n%.y\n```\n\n---\n\n### `++ibl:fl`\n\nInteger binary logarithm\n\nProduces the lowest power to which the number 2 must be raised to obtain `a` or\ngreater.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nA signed integer.\n\n#### Source\n\n```hoon\n++  ibl\n  |=  [a=[e=@s a=@u]]  ^-  @s\n  (sum:si (sun:si (dec (met 0 a.a))) e.a)\n```\n\n#### Examples\n\n```\n> (ibl:fl [-18 342.602.577])\n--10\n```\n\n---\n\n### `++uni:fl`\n\nChange representation to odd\n\nProduces another representation of the floating point `a` where the significand\nis odd. Every floating-point number has a unique representation of this kind. If\nthe significand of `a` is already odd, nothing changes.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nA cell of a signed integer and an unsigned integer.\n\n#### Source\n\n```hoon\n++  uni\n  |=  [a=[e=@s a=@u]]\n  |-  ?:  =((end 0 a.a) 1)  a\n  $(a.a (rsh 0 a.a), e.a (sum:si e.a --1))\n```\n\n#### Examples\n\n```\n> (uni:fl [-8 342.602.578])\n[e=-7 a=171.301.289]\n\n> (uni:fl [-8 342.602.577])\n[e=-8 a=342.602.577]\n```\n\n---\n\n### `++xpd:fl`\n\nExpand\n\nProduces the fully precise form of `a`, or the denormalized form of `a`.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nA cell of a signed integer and an unsigned integer.\n\n#### Sources\n\n```hoon\n++  xpd\n  |=  [a=[e=@s a=@u]]\n  =+  ma=(met 0 a.a)\n  ?:  (gte ma prc)  a\n  =+  ?:  =(den %i)  (^sub prc ma)\n      =+  ^=  q\n        =+  w=(dif:si e.a emn)\n        ?:  (syn:si w)  (abs:si w)  0\n      (min q (^sub prc ma))\n  a(e (dif:si e.a (sun:si -)), a (lsh [0 -] a.a))\n```\n\n#### Examples\n\n```\n> (xpd:fl [--3 12])\n[e=-106 a=7.788.445.287.802.241.442.795.744.493.830.144]\n\n> (xpd:fl [-8 342.602.577])\n[e=-92 a=6.626.897.619.228.945.634.459.505.846.648.832]\n\n> (xpd:fl [-92 6.626.897.619.228.945.634.459.505.846.648.832])\n[e=-92 a=6.626.897.619.228.945.634.459.505.846.648.832]\n```\n\n---\n\n### `++lug:fl`\n\nCentral rounding mechanism\n\nPerforms various rounding operations on `a`. An operation is chosen based on the\nvalue selected for `t`. `s` is a sticky bit that represents a value less than\nULP(a) = 2^(e.a)\n\nPossible rounding operations:\n\n- Floor (`%fl`)\n- Ceiling (`%ce`)\n- Smaller (`%sm`)\n- Larger (`%lg`)\n- Nearest (`%ne`) -- Rounds ties away from 0 if the number is even, rounds\n  toward 0 if the number is odd.\n\n#### Accepts\n\n`t` is one of the following: `%fl`, `%ce`, `%sm`, `%lg`, `%ne`, `%na`, or `%nt`.\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n`s` is a flag.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  lug\n  ~/  %lug\n  |=  [t=$?(%fl %ce %sm %lg %ne %na %nt) a=[e=@s a=@u] s=?]  ^-  fn\n  ?<  =(a.a 0)\n  =-\n    ?.  =(den %f)  -                                ::  flush denormals\n    ?.  ?=([%f *] -)  -\n    ?:  =((met 0 ->+>) prc)  -  [%f & zer]\n  ::\n  =+  m=(met 0 a.a)\n  ?>  |(s (gth m prc))                              ::  require precision\n  =+  ^=  q  %+  max\n      ?:  (gth m prc)  (^sub m prc)  0              ::  reduce precision\n    %-  abs:si  ?:  =(den %i)  --0                  ::  enforce min. exp\n    ?:  =((cmp:si e.a emn) -1)  (dif:si emn e.a)  --0\n  =^  b  a  :-  (end [0 q] a.a)\n    a(e (sum:si e.a (sun:si q)), a (rsh [0 q] a.a))\n  ::\n  ?~  a.a\n    ?<  =(den %i)\n    ?-  t\n      %fl  [%f & zer]\n      %sm  [%f & zer]\n      %ce  [%f & spd]\n      %lg  [%f & spd]\n      %ne  ?:  s  [%f & ?:((lte b (bex (dec q))) zer spd)]\n           [%f & ?:((^lth b (bex (dec q))) zer spd)]\n      %nt  ?:  s  [%f & ?:((lte b (bex (dec q))) zer spd)]\n           [%f & ?:((^lth b (bex (dec q))) zer spd)]\n      %na  [%f & ?:((^lth b (bex (dec q))) zer spd)]\n    ==\n  ::\n  =.  a  (xpd a)\n  ::\n  =.  a\n    ?-  t\n      %fl  a\n      %lg  a(a +(a.a))\n      %sm  ?.  &(=(b 0) s)  a\n           ?:  &(=(e.a emn) !=(den %i))  a(a (dec a.a))\n           =+  y=(dec (^mul a.a 2))\n           ?.  (lte (met 0 y) prc)  a(a (dec a.a))\n           [(dif:si e.a --1) y]\n      %ce  ?:  &(=(b 0) s)  a  a(a +(a.a))\n      %ne  ?~  b  a\n           =+  y=(bex (dec q))\n           ?:  &(=(b y) s)                          ::  round halfs to even\n             ?~  (dis a.a 1)  a  a(a +(a.a))\n           ?:  (^lth b y)  a  a(a +(a.a))\n      %na  ?~  b  a\n           =+  y=(bex (dec q))\n           ?:  (^lth b y)  a  a(a +(a.a))\n      %nt  ?~  b  a\n           =+  y=(bex (dec q))\n           ?:  =(b y)  ?:  s  a  a(a +(a.a))\n           ?:  (^lth b y)  a  a(a +(a.a))\n    ==\n  ::\n  =.  a  ?.  =((met 0 a.a) +(prc))  a\n    a(a (rsh 0 a.a), e (sum:si e.a --1))\n  ?~  a.a  [%f & zer]\n  ::\n  ?:  =(den %i)  [%f & a]\n  ?:  =((cmp:si emx e.a) -1)  [%i &]  [%f & a]      ::  enforce max. exp\n```\n\n---\n\n### `^drg:fl`\n\nGet printable decimal\n\nProduces the decimal form of `a` using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nA cell of a signed integer and an unsigned integer.\n\n#### Source\n\n```hoon\n++  drg                                             ::  dragon4; get\n  ~/  %drg                                          ::  printable decimal;\n  |=  [a=[e=@s a=@u]]  ^-  [@s @u]                  ::  guaranteed accurate\n  ?<  =(a.a 0)                                      ::  for rounded floats\n  =.  a  (xpd a)\n  =+  r=(lsh [0 ?:((syn:si e.a) (abs:si e.a) 0)] a.a)\n  =+  s=(lsh [0 ?.((syn:si e.a) (abs:si e.a) 0)] 1)\n  =+  mn=(lsh [0 ?:((syn:si e.a) (abs:si e.a) 0)] 1)\n  =+  mp=mn\n  =>  ?.\n        ?&  =(a.a (bex (dec prc)))                  ::  if next smallest\n            |(!=(e.a emn) =(den %i))                ::  float is half ULP,\n        ==                                          ::  tighten lower bound\n      .\n    %=  .\n      mp  (lsh 0 mp)\n      r  (lsh 0 r)\n      s  (lsh 0 s)\n    ==\n  =+  [k=--0 q=(^div (^add s 9) 10)]\n  |-  ?:  (^lth r q)\n    %=  $\n      k  (dif:si k --1)\n      r  (^mul r 10)\n      mn  (^mul mn 10)\n      mp  (^mul mp 10)\n    ==\n  |-  ?:  (gte (^add (^mul r 2) mp) (^mul s 2))\n    $(s (^mul s 10), k (sum:si k --1))\n  =+  [u=0 o=0]\n  |-                                                ::  r/s+o = a*10^-k\n  =+  v=(dvr (^mul r 10) s)\n  =>  %=  .\n      k  (dif:si k --1)\n      u  p.v\n      r  q.v\n      mn  (^mul mn 10)\n      mp  (^mul mp 10)\n    ==\n  =+  l=(^lth (^mul r 2) mn)                        ::  in lower bound\n  =+  ^=  h                                         ::  in upper bound\n    ?|  (^lth (^mul s 2) mp)\n        (gth (^mul r 2) (^sub (^mul s 2) mp))\n    ==\n  ?:  &(!l !h)\n    $(o (^add (^mul o 10) u))\n  =+  q=&(h |(!l (gth (^mul r 2) s)))\n  =.  o  (^add (^mul o 10) ?:(q +(u) u))\n  [k o]\n```\n\n#### Examples\n\n```\n> (sun:fl 218.116)\n[%f s=%.y e=-95 a=8.640.464.947.480.640.129.276.716.135.743.488]\n> (^drg:fl [e=-95 a=8.640.464.947.480.640.129.276.716.135.743.488])\n[--0 218.116]\n\n> (sun:fl 102.057.673.128.349)\n[%f s=%.y e=-66 a=7.530.527.107.827.833.883.675.587.233.447.936]\n> (^drg:fl [e=-66 a=7.530.527.107.827.833.883.675.587.233.447.936])\n[--0 102.057.673.128.349]\n```\n\n---\n\n### `^toj:fl`\n\nRound to integer\n\nRounds float `a` to the nearest decimal float with an exponent of 0.\n\n#### Accepts\n\n`a` is a cell of a signed integer and an unsigned integer.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  toj\n  |=  [a=[e=@s a=@u]]  ^-  fn\n  ?.  =((cmp:si e.a --0) -1)  [%f & a]\n  =+  x=(abs:si e.a)\n  =+  y=(rsh [0 x] a.a)\n  ?:  |(=(r %d) =(r %z))  [%f & --0 y]\n  =+  z=(end [0 x] a.a)\n  ?:  |(=(r %u) =(r %a))  [%f & --0 ?~(z y +(y))]\n  =+  i=(bex (dec x))\n  ?:  &(=(z i) =((dis y 1) 0))  [%f & --0 y]\n  ?:  (^lth z i)  [%f & --0 y]  [%f & --0 +(y)]\n```\n\n#### Examples\n\n```\n> (^toj:fl [-11 7.530.107.827.833.587])\n[%f s=%.y e=--0 a=3.676.810.462.809]\n\n> (^toj:fl [-11 7.530.107.827.833.589])\n[%f s=%.y e=--0 a=3.676.810.462.809]\n```\n\n---\n\n### `++ned:fl`\n\nRequire float\n\nProduces `a` if `a` is a is of floating-point representation. If `a` is another\ncase of `fn`, such as infinity or not-a-number, a crash is produced.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nA cell of a signed integer and an unsigned integer.\n\n#### Source\n\n```hoon\n++  ned\n  |=  [a=fn]  ^-  [%f s=? e=@s a=@u]\n  ?:  ?=([%f *] a)  a\n  ~_  leaf+\"need-float\"\n  !!\n```\n\n#### Examples\n\n```\n> (ned:fl [%f s=%.y e=-11 a=7.530.107.827.833.587])\n[%f s=%.y e=-11 a=7.530.107.827.833.587]\n\n> (ned:fl [%n ~])\n! need-float\n! exit\n\n> (ned:fl [%i |])\n! need-float\n! exit\n```\n\n---\n\n### `++shf:fl`\n\nShift power\n\nMultiplies `a` by 2 to the `b` power without rounding. This results in shifting\nthe exponent term by `b`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is a signed integer.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  shf\n  |=  [a=fn b=@s]\n  ?:  |(?=([%n *] a) ?=([%i *] a))  a\n  a(e (sum:si e.a b))\n```\n\n#### Examples\n\n```\n> (shf:fl [[%f & -2 7] --2])\n[%f s=%.y e=--0 a=7]\n\n> (shf:fl [[%f & -2 7] -2])\n[%f s=%.y e=-4 a=7]\n\n> (shf:fl [%f & -11 7.530.107.827.833.587] --5)\n[%f s=%.y e=-6 a=7.530.107.827.833.587]\n```\n\n---\n\n### `++fli:fl`\n\nFlip sign\n\nProduces `a` with its signed changed from positive to negative, or vice versa.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  fli\n  |=  [a=fn]  ^-  fn\n  ?-(-.a %f a(s !s.a), %i a(s !s.a), %n a)\n```\n\n#### Examples\n\n```\n> (fli:fl [%f %.y -2 7])\n[%f s=%.n e=-2 a=7]\n\n> (fli:fl [%f %.n --2 30.617])\n[%f s=%.y e=--2 a=30.617]\n\n> (fli:fl [%f | --2 30.617])\n[%f s=%.y e=--2 a=30.617]\n```\n\n---\n\n### `++swr:fl`\n\nSwitch rounding\n\nSwitches the rounding mode of `r:fl`.\n\n#### Source\n\n```hoon\n++  swr  ?+(r r %d %u, %u %d)\n```\n\n#### Examples\n\n```\n> r:fl\n%n\n> swr:fl\n%n\n\n> =new-fl fl                              ::  new fl core with changed state\n> =new-fl new-fl(r %u)\n> swr:new-fl\n%d\n```\n\n---\n\n### `++prc:fl`\n\nForce precision of 2 or greater\n\nProduces `p`, the core's precision, if `p` is greater than or equal to 2.\nOtherwise, a crash is produced.\n\n#### Source\n\n```hoon\n++  prc  ?>((gth p 1) p)\n```\n\n#### Examples\n\n```\n> prc:fl\n113\n\n> =new-fl fl\n> =new-fl new-fl(p 1)\n> prc:new-fl\n! exit\n\n> =new-fl new-fl(p 2)\n> prc:new-fl\n2\n```\n\n---\n\n### `++den:fl`\n\nBehavior\n\nProduces `d:fl`. Denormalizes if `d:fl` is `%d`. Flushes denormals to zero if\n`d:fl` is `%f`.\n\n- Denormalizes if `d:fl` is `%d`.\n- Flushes denormals to zero if `d:fl` is `%f`.\n- Infinite exponent range if `%d` is `%i`.\n\nThe default value of `d` is `%d`.\n\n#### Source\n\n```hoon\n++  den  d\n```\n\n#### Examples\n\n```\n> den:fl\n%d\n\n> =new-fl fl\n> =new-fl new-fl(d %f)\n> den:new-fl\n%f\n```\n\n---\n\n### `++emn:fl`\n\nMinimum exponent\n\nProduces `v:fl`, the minimum exponent. The default minimum exponent is -16.494.\n\n#### Source\n\n```hoon\n++  emn  v\n```\n\n#### Examples\n\n```\n> emn:fl\n-16.494\n```\n\n---\n\n### `++emx:fl`\n\nMaximum exponent\n\nReturns the maximum exponent of `fl`. The default maximum exponent is --16.271.\n\n#### Source\n\n```hoon\n++  emx  (sum:si emn (sun:si w))\n```\n\n#### Examples\n\n```\n> emx:fl\n--16.271\n\n> `@u`emx:fl\n32.542\n```\n\n---\n\n### `++spd:fl`\n\nSmallest denormal\n\nProduces the smallest possible denormalized float.\n\n#### Source\n\n```hoon\n++  spd  [e=emn a=1]\n```\n\n#### Examples\n\n```\n> spd:fl\n[e=-16.494 a=1]\n```\n\n---\n\n### `++spn:fl`\n\nSmallest normal\n\nProduces the smallest representable normal float.\n\n#### Source\n\n```hoon\n++  spn  [e=emn a=(bex (dec prc))]\n```\n\n#### Examples\n\n```\n> spn:fl\n[e=-16.494 a=5.192.296.858.534.827.628.530.496.329.220.096]\n```\n\n---\n\n### `++lfn:fl`\n\nLargest normal\n\nProduces the largest representable normal float.\n\n#### Source\n\n```hoon\n++  lfn  [e=emx a=(fil 0 prc 1)]\n```\n\n#### Examples\n\n```\n> lfn:fl\n[e=--16.271 a=10.384.593.717.069.655.257.060.992.658.440.191]\n```\n\n---\n\n### `++lfe:fl`\n\nMaximum\n\nProduces the sum of `emx:fl` plus `prc:fl`.\n\n#### Source\n\n```hoon\n++  lfe  (sum:si emx (sun:si prc))\n```\n\n#### Examples\n\n```\n> lfe:fl\n--16.384\n```\n\n---\n\n### `++zer:fl`\n\nZero\n\nProduces zero represented as a float.\n\n#### Source\n\n```hoon\n++  zer  [e=--0 a=0]\n```\n\n#### Examples\n\n```\n> zer:fl\n[e=--0 a=0]\n```\n\n---\n\n### `++rou:fl`\n\nRound\n\nRounds `a`. The way in which `a` is rounded depends on the value of `r:fl`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produes\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  rou\n  |=  [a=fn]  ^-  fn\n  ?.  ?=([%f *] a)  a\n  ?~  a.a  [%f s.a zer]\n  ?:  s.a  (^rou +>.a)\n  =.(r swr (fli (^rou +>.a)))\n```\n\n#### Examples\n\n```\n> =a 10.161.487.211.429.486.882.397.572.894.294.017.777\n> (rou:fl [%f & --12 a])\n[%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]\n\n> (rou:fl [%f & --12 (add a 1)])\n[%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]\n\n> (rou:fl [%f & --12 (add a 300)])\n[%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]\n\n> (rou:fl [%f & --12 (add a 1.000)])\n[%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.003]\n```\n\n---\n\n### `++syn:fl`\n\nGet sign\n\nProduces the sign of `a`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produes\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  syn\n  |=  [a=fn]  ^-  ?\n  ?-(-.a %f s.a, %i s.a, %n &)\n```\n\n#### Examples\n\n```\n> (syn:fl (sun:fl 106))\n%.y\n\n> (syn:fl [%f | --0 106])\n%.n\n```\n\n---\n\n### `++abs:fl`\n\nAbsolute value\n\nProduces the absolute value of `a`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produes\n\nAn `fn`.\n\n#### Sources\n\n```hoon\n++  abs\n  |=  [a=fn]  ^-  fn\n  ?:  ?=([%f *] a)  [%f & e.a a.a]\n  ?:  ?=([%i *] a)  [%i &]  [%n ~]\n```\n\n#### Examples\n\n```\n> (abs:fl [%f | --0 106])\n[%f s=%.y e=--0 a=106]\n\n> (abs:fl [%f & --0 106])\n[%f s=%.y e=--0 a=106]\n```\n\n---\n\n### `++add:fl`\n\nAdd\n\nProduces the sum of `a` plus `b`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  add\n  |=  [a=fn b=fn]  ^-  fn\n  ?:  |(?=([%n *] a) ?=([%n *] b))  [%n ~]\n  ?:  |(?=([%i *] a) ?=([%i *] b))\n    ?:  &(?=([%i *] a) ?=([%i *] b))\n      ?:  =(a b)  a  [%n ~]\n    ?:  ?=([%i *] a)  a  b\n  ?:  |(=(a.a 0) =(a.b 0))\n    ?.  &(=(a.a 0) =(a.b 0))  %-  rou  ?~(a.a b a)\n    [%f ?:(=(r %d) &(s.a s.b) |(s.a s.b)) zer]\n  %-  |=  [a=fn]\n      ?.  ?=([%f *] a)  a\n      ?.  =(a.a 0)  a\n      [%f !=(r %d) zer]\n  ?:  =(s.a s.b)\n    ?:  s.a  (^add +>.a +>.b |)\n    =.(r swr (fli (^add +>.a +>.b |)))\n  ?:  s.a  (^sub +>.a +>.b |)\n  (^sub +>.b +>.a |)\n```\n\n#### Examples\n\n```\n> (add:fl [%f & --0 106] [%f | --3 55])\n[%f s=%.n e=-104 a=6.774.324.807.619.657.921.598.381.929.529.344]\n```\n\n---\n\n### `++ead:fl`\n\nExact add\n\nProduces the exact sum of `a` plus `b`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  ead\n  |=  [a=fn b=fn]  ^-  fn\n  ?:  |(?=([%n *] a) ?=([%n *] b))  [%n ~]\n  ?:  |(?=([%i *] a) ?=([%i *] b))\n    ?:  &(?=([%i *] a) ?=([%i *] b))\n      ?:  =(a b)  a  [%n ~]\n    ?:  ?=([%i *] a)  a  b\n  ?:  |(=(a.a 0) =(a.b 0))\n    ?.  &(=(a.a 0) =(a.b 0))  ?~(a.a b a)\n    [%f ?:(=(r %d) &(s.a s.b) |(s.a s.b)) zer]\n  %-  |=  [a=fn]\n      ?.  ?=([%f *] a)  a\n      ?.  =(a.a 0)  a\n      [%f !=(r %d) zer]\n  ?:  =(s.a s.b)\n    ?:  s.a  (^add +>.a +>.b &)\n    (fli (^add +>.a +>.b &))\n  ?:  s.a  (^sub +>.a +>.b &)\n  (^sub +>.b +>.a &)\n```\n\n#### Examples\n\n```\n> (ead:fl [%f & --0 106] [%f | --3 55])\n[%f s=%.n e=--0 a=334]\n```\n\n---\n\n### `++sub:fl`\n\nSubtract\n\nProduces the difference of `a` minus `b`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  sub\n  |=  [a=fn b=fn]  ^-  fn  (add a (fli b))\n```\n\n#### Examples\n\n```\n> (sub:fl [%f & --13 2.718] [%f & --23 11])\n[%f s=%.n e=-86 a=5.416.671.014.775.224.232.595.412.796.571.648]\n```\n\n---\n\n### `++mul:fl`\n\nMultiply\n\nProduces the product of `a` multiplied by `b`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  mul\n  |=  [a=fn b=fn]  ^-  fn\n  ?:  |(?=([%n *] a) ?=([%n *] b))  [%n ~]\n  ?:  ?=([%i *] a)\n    ?:  ?=([%i *] b)\n      [%i =(s.a s.b)]\n    ?:  =(a.b 0)  [%n ~]  [%i =(s.a s.b)]\n  ?:  ?=([%i *] b)\n    ?:  =(a.a 0)  [%n ~]  [%i =(s.a s.b)]\n  ?:  |(=(a.a 0) =(a.b 0))  [%f =(s.a s.b) zer]\n  ?:  =(s.a s.b)  (^mul +>.a +>.b)\n  =.(r swr (fli (^mul +>.a +>.b)))\n```\n\n---\n\n### `++emu:fl`\n\nExact multiply\n\nProduces the exact product of `a` multiplied by `b`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Examples\n\n```hoon\n++  emu\n  |=  [a=fn b=fn]  ^-  fn\n  ?:  |(?=([%n *] a) ?=([%n *] b))  [%n ~]\n  ?:  ?=([%i *] a)\n    ?:  ?=([%i *] b)\n      [%i =(s.a s.b)]\n    ?:  =(a.b 0)  [%n ~]  [%i =(s.a s.b)]\n  ?:  ?=([%i *] b)\n    ?:  =(a.a 0)  [%n ~]  [%i =(s.a s.b)]\n  ?:  |(=(a.a 0) =(a.b 0))  [%f =(s.a s.b) zer]\n  [%f =(s.a s.b) (sum:si e.a e.b) (^^mul a.a a.b)]\n```\n\n---\n\n### `++div:fl`\n\nDivide\n\nProduces the quotient of `a` divided by `b`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  div\n  |=  [a=fn b=fn]  ^-  fn\n  ?:  |(?=([%n *] a) ?=([%n *] b))  [%n ~]\n  ?:  ?=([%i *] a)\n    ?:  ?=([%i *] b)  [%n ~]  [%i =(s.a s.b)]\n  ?:  ?=([%i *] b)  [%f =(s.a s.b) zer]\n  ?:  =(a.a 0)  ?:  =(a.b 0)  [%n ~]  [%f =(s.a s.b) zer]\n  ?:  =(a.b 0)  [%i =(s.a s.b)]\n  ?:  =(s.a s.b)  (^div +>.a +>.b)\n  =.(r swr (fli (^div +>.a +>.b)))\n```\n\n---\n\n### `++fma:fl`\n\nFused multiply-add\n\nProduces the sum of `c` plus the product of `a` multiplied by `b`;\n`(a * b) + c`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n`c` is an `fn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  fma\n  |=  [a=fn b=fn c=fn]  ^-  fn\n  (add (emu a b) c)\n```\n\n#### Examples\n\n```\n> (fma:fl [%f & --13 2.718] [%f & --23 11] [%f & --13 2.718])\n[%f s=%.y e=-62 a=9.475.054.514.089.037.465.004.673.635.188.736]=\n```\n\n---\n\n### `++sqt:fl`\n\nSquare root\n\nProduces the square root of `a`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  sqt\n  |=  [a=fn]  ^-  fn\n  ?:  ?=([%n *] a)  [%n ~]\n  ?:  ?=([%i *] a)  ?:(s.a a [%n ~])\n  ?~  a.a  [%f s.a zer]\n  ?:  s.a  (^sqt +>.a)  [%n ~]\n```\n\n#### Examples\n\n```\n> (sqt:fl [%f s=%.y e=-18 a=342.602.577])\n[%f s=%.y e=-107 a=5.865.903.143.604.945.574.132.671.852.050.553]\n```\n\n---\n\n### `++inv:fl`\n\nInverse\n\nProduces the inverse of `a` by dividing `1` by `a`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  inv\n  |=  [a=fn]  ^-  fn\n  (div [%f & --0 1] a)\n```\n\n#### Examples\n\n```\n> (inv:fl [%f s=%.y e=--0 a=10])\n[%f s=%.y e=-116 a=8.307.674.973.655.724.205.648.794.126.752.154]\n> (drg:fl [%f s=%.y e=-116 a=8.307.674.973.655.724.205.648.794.126.752.154])\n[%d s=%.y e=-1 a=1]\n\n> (inv:fl [%f s=%.y e=--1 a=10])\n[%f s=%.y e=-117 a=8.307.674.973.655.724.205.648.794.126.752.154]\n> (drg:fl [%f s=%.y e=-117 a=8.307.674.973.655.724.205.648.794.126.752.154])\n[%d s=%.y e=-2 a=5]\n\n> (inv:fl [%f s=%.y e=--2 a=10])\n[%f s=%.y e=-118 a=8.307.674.973.655.724.205.648.794.126.752.154]\n> (drg:fl [%f s=%.y e=-118 a=8.307.674.973.655.724.205.648.794.126.752.154])\n[%d s=%.y e=-3 a=25]\n```\n\n---\n\n### `++sun:fl`\n\nUnsigned integer to float\n\nProduces `a` in floating-point representation.\n\n#### Accepts\n\n`a` is an unsigned integer.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  sun\n  |=  [a=@u]  ^-  fn\n  (rou [%f & --0 a])\n```\n\n#### Examples\n\n```\n> (sun:fl 0)\n[%f s=%.y e=--0 a=0]\n\n> (sun:fl 5.048.729)\n[%f s=%.y e=-90 a=6.250.023.776.601.238.669.911.180.544.311.296]\n\n> (sun:fl -100)\n! exit\n```\n\n---\n\n### `++san:fl`\n\nSigned integer to float\n\nProduces the floating-point representation of `a`, a signed integer.\n\n#### Accepts\n\n`a` is a signed integer.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  san\n  |=  [a=@s]  ^-  fn\n  =+  b=(old:si a)\n  (rou [%f -.b --0 +.b])\n```\n\n#### Examples\n\n```\n> (san:fl --100)\n[%f s=%.y e=-106 a=8.112.963.841.460.668.169.578.900.514.406.400]\n\n> (san:fl -100)\n[%f s=%.n e=-106 a=8.112.963.841.460.668.169.578.900.514.406.400]\n```\n\n---\n\n### `++lth:fl`\n\nLess than\n\nTests if `a` is less than `b`. Returns `~` in the event of `a` or `b` being a\nNaN (`[%n ~]`).\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nA `unit` of `flag`.\n\n#### Source\n\n```hoon\n++  lth\n  |=  [a=fn b=fn]  ^-  (unit ?)\n  ?:  |(?=([%n *] a) ?=([%n *] b))  ~  :-  ~\n  ?:  =(a b)  |\n  ?:  ?=([%i *] a)  !s.a  ?:  ?=([%i *] b)  s.b\n  ?:  |(=(a.a 0) =(a.b 0))\n    ?:  &(=(a.a 0) =(a.b 0))  |\n    ?:  =(a.a 0)  s.b  !s.a\n  ?:  !=(s.a s.b)  s.b\n  ?:  s.a  (^lth +>.a +>.b)  (^lth +>.b +>.a)\n```\n\n#### Examples\n\n```\n> (lth:fl (sun:fl 116) (sun:fl 4.820))\n[~ u=%.y]\n\n> (lth:fl (sun:fl 218.116) (sun:fl 4.820))\n[~ u=%.n]\n\n> (lth:fl (sun:fl 218.116) [%n ~])\n~\n```\n\n---\n\n### `++lte:fl`\n\nLess than or equal\n\nTests whether `a` is less than or equal to `b`. Returns `~` in the event of `a`\nor `b` being a NaN (`[%n ~]`).\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nA `unit` of `flag`.\n\n#### Source\n\n```hoon\n++  lte\n  |=  [a=fn b=fn]  ^-  (unit ?)\n  %+  bind  (lth b a)  |=  a=?  !a\n```\n\n#### Examples\n\n```\n> (lte:fl (sun:fl 102) [%f %.y -5 973.655.724])\n[~ u=%.y]\n\n> (lte:fl (sun:fl 102) [%f %.y -24 973.655.724])\n[~ u=%.n]\n\n> (lte:fl [%f %.y --2 25] (sun:fl 100))\n[~ u=%.y]\n\n> (lte:fl [%f %.y --2 25] [%f %.y --3 2])\n[~ u=%.n]\n\n> (lte:fl [%f %.y --2 25] [%n ~])\n~\n```\n\n---\n\n### `++equ:fl`\n\nEquals\n\nTests if `a` is equal to `b`. Returns `~` in the event of `a` or `b` being a NaN\n(`[%n ~]`).\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nAn `unit` of `flag`.\n\n#### Source\n\n```hoon\n++  equ\n  |=  [a=fn b=fn]  ^-  (unit ?)\n  ?:  |(?=([%n *] a) ?=([%n *] b))  ~  :-  ~\n  ?:  =(a b)  &\n  ?:  |(?=([%i *] a) ?=([%i *] b))  |\n  ?:  |(=(a.a 0) =(a.b 0))\n    ?:  &(=(a.a 0) =(a.b 0))  &  |\n  ?:  |(=(e.a e.b) !=(s.a s.b))  |\n  (^equ +>.a +>.b)\n```\n\n#### Examples\n\n```\n> (equ:fl [%f %.y --2 25] (sun:fl 100))\n[~ u=%.y]\n\n> (equ:fl [%f %.y --2 25] (sun:fl 101))\n[~ u=%.n]\n```\n\n---\n\n### `++gte:fl`\n\nGreater or equal than\n\nTests whether `a` is greater than or equal to `b`. Returns `~` in the event of\n`a` or `b` being a NaN (`[%n ~]`).\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nAn `unit` of `flag`.\n\n#### Source\n\n```hoon\n++  gte\n  |=  [a=fn b=fn]  ^-  (unit ?)  (lte b a)\n```\n\n#### Examples\n\n```\n> (gte:fl [%f %.y --2 25] (sun:fl 100))\n[~ u=%.y]\n\n> (gth:fl [%f %.y --6 73.989] [%f %.y --5 919.599])\n[~ u=%.n]\n\n> (gth:fl [%f %.y --6 73.989] [%n ~])\n~\n```\n\n---\n\n### `++gth:fl`\n\nGreater than\n\nTests whether `a` is greater than `b`. Returns `~` in the event of `a` or `b`\nbeing a NaN (`[%n ~]`).\n\n#### Accepts\n\n`a` is an `fn`.\n\n`b` is an `fn`.\n\n#### Produces\n\nAn `unit` of `flag`.\n\n#### Source\n\n```hoon\n++  gth\n  |=  [a=fn b=fn]  ^-  (unit ?)  (lth b a)\n```\n\n#### Examples\n\n```\n> (gth:fl [%f %.y --2 25] (sun:fl 100))\n[~ u=%.n]\n\n> (gth:fl [%f %.y --6 73.989] [%f %.y --5 119.599])\n[~ u=%.y]\n```\n\n---\n\n### `++drg:fl`\n\nFloat to decimal\n\nProduces the decimal form of `a` using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nA `dn`.\n\n#### Source\n\n```hoon\n++  drg\n  |=  [a=fn]  ^-  dn\n  ?:  ?=([%n *] a)  [%n ~]\n  ?:  ?=([%i *] a)  [%i s.a]\n  ?~  a.a  [%d s.a --0 0]\n  [%d s.a (^drg +>.a)]\n```\n\n#### Examples\n\n```\n> (drg:fl [%f | --6 73.989])\n[%d s=%.n e=--0 a=4.735.296]\n```\n\n---\n\n### `++grd:fl`\n\nDecimal to float\n\nConverts decimal `a` to `fn`.\n\n#### Accepts\n\n`a` is a `dn`.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  grd\n  |=  [a=dn]  ^-  fn\n  ?:  ?=([%n *] a)  [%n ~]\n  ?:  ?=([%i *] a)  [%i s.a]\n  =>  .(r %n)\n  =+  q=(abs:si e.a)\n  ?:  (syn:si e.a)\n    (mul [%f s.a --0 a.a] [%f & e.a (pow 5 q)])\n  (div [%f s.a --0 a.a] [%f & (sun:si q) (pow 5 q)])\n```\n\n#### Examples\n\n```\n> (grd:fl [%d s=%.n e=--0 a=73.989])\n[%f s=%.n e=-96 a=5.862.012.516.267.904.074.208.723.341.410.304]\n\n> (grd:fl [%d s=%.n e=--0 a=100])\n[%f s=%.n e=-106 a=8.112.963.841.460.668.169.578.900.514.406.400]\n```\n\n---\n\n### `++toi:fl`\n\nRound to signed integer\n\nRounds `a` to the nearest signed integer.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nA `unit` of `@s`.\n\n#### Source\n\n```hoon\n++  toi\n  |=  [a=fn]  ^-  (unit @s)\n  =+  b=(toj a)\n  ?.  ?=([%f *] b)  ~  :-  ~\n  =+  c=(^^mul (bex (abs:si e.b)) a.b)\n  (new:si s.b c)\n```\n\n#### Examples\n\n```\n> (toi:fl [%f s=%.y e=-78 a=8.112.963.841.460.668.169.578.900.514.406.400])\n[~ u=--26.843.545.600]\n```\n\n---\n\n### `++toj:fl`\n\nRound to integer fn\n\nRounds `a` to the nearest decimal integer.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nA `unit` of `@s`.\n\n#### Source\n\n```hoon\n++  toj\n  |=  [a=fn]  ^-  fn\n  ?.  ?=([%f *] a)  a\n  ?~  a.a  [%f s.a zer]\n  ?:  s.a  (^toj +>.a)\n  =.(r swr (fli (^toj +>.a)))\n```\n\n#### Examples\n\n```\n> (toj:fl [%f s=%.y e=-78 a=8.112.963.841.460.668.169.578.900.514.406.400])\n[%f s=%.y e=--0 a=26.843.545.600]\n\n> (toj:fl [%f s=%.y e=-78 a=8.112.963.841.460.668.169.578.900.514])\n[%f s=%.y e=--0 a=26.844]\n\n> (toj:fl [%f s=%.y e=-78 a=8.112.963.841.460])\n[%f s=%.y e=--0 a=0]\n\n> (toj:fl [%f s=%.y e=-9 a=9.002])\n[%f s=%.y e=--0 a=16]\n```\n\n---\n",
    "ff": "## `++ff`\n\nIEEE-754 Formatting\n\nContainer core for IEEE-754 formatting operations.\n\n- `w` is width: The number of bits in the exponent field.\n- `p` is precision: The number of bits in the significand field.\n- `w` is bias: Added to exponent when storing.\n- `r` is rounding mode: Possible modes are nearest (`%n`), up (`%u`),\n  down (`%d`), to zero (`%z`), and away from zero (`%a`). Default value is `%a`.\n\n#### Source\n\n```hoon\n++  ff\n  |_  [[w=@u p=@u b=@s] r=$?(%n %u %d %z %a)]\n```\n\n#### Examples\n\n```\n> =ffcore ~(. ff [8 8 0] %n)\n> ffcore\n<24.ull [[[@ud @ud @ud] r=%n] <51.qbt 123.ppa 46.hgz 1.pnw %140>]>\n```\n\n---\n\n#### Discussion\n\n`++ff` has no use outside of the functionality provided to other cores: `++rd`,\n`++rs`, `++rq`, and `++rh`. It's not intended to be used directly; it's just\nmeant to power those cores.\n\n---\n\n### `++sb:ff`\n\nSign bit\n\nProduces the sign bit of `++ff`.\n\n#### Source\n\n```hoon\n++  sb  (bex (^add w p))\n```\n\n#### Examples\n\n```\n> sb:ff\n1\n```\n\n---\n\n### `++me:ff`\n\nMinimum exponent\n\nProduces the minimum possible exponent of `ff`.\n\n#### Source\n\n```hoon\n++  me  (dif:si (dif:si --1 b) (sun:si p))\n```\n\n#### Examples\n\n```\n> me:ff\n--1\n```\n\n---\n\n### `++pa:ff`\n\nInitialize `fl`\n\nInstantiates the core `fl`, giving values to its samples based on the\nconfiguration of the `ff` core.\n\n#### Source\n\n```hoon\n++  pa\n  %*(. fl p +(p), v me, w (^sub (bex w) 3), d %d, r r)\n```\n\n#### Examples\n\n```\n> ~(pa ff [11 52 --1.023] %n)\n< 23.qzd\n  28.btz\n  { {{p/@ v/@s w/@} r/?($n $u $a $d $z) d/$d}\n    <54.tyv 119.wim 31.ohr 1.jmk $143>\n  }\n>\n```\n\n#### Discussion\n\n`++pa` exists exclusively for internal use of `++ff`, and `++ff` exists for\ninternal use in other cores.\n\n---\n\n### `++sea:ff`\n\n`@r` to `fn`\n\nConverts `a` from `@r` to `fn`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `unit` of `@s`.\n\n#### Source\n\n```hoon\n++  sea\n  |=  [a=@r]  ^-  fn\n  =+  [f=(cut 0 [0 p] a) e=(cut 0 [p w] a)]\n  =+  s=(sig a)\n  ?:  =(e 0)\n    ?:  =(f 0)  [%f s --0 0]  [%f s me f]\n  ?:  =(e (fil 0 w 1))\n    ?:  =(f 0)  [%i s]  [%n ~]\n  =+  q=:(sum:si (sun:si e) me -1)\n  =+  r=(^add f (bex p))\n  [%f s q r]\n```\n\n#### Examples\n\n```\n> (sea:ff `@r`0x8)\n[%f s=%.y e=--0 a=0]\n```\n\n---\n\n### `++bit:ff`\n\n`fn` to `@r`, rounding\n\nConverts `a` from `fn` to `@r` and applies rounding.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nA `@r`.\n\n#### Source\n\n```hoon\n++  bit  |=  [a=fn]  (bif (rou:pa a))\n```\n\n#### Examples\n\n```\n> (bit:ma:rd [%f | -6 202])\n0xc009400000000000\n```\n\n---\n\n### `++bif:ff`\n\n`fn` to `@r`, no rounding\n\nConverts `a` from `fn` to `@r`. No rounding is applied.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  bif\n  |=  [a=fn]  ^-  @r\n  ?:  ?=([%i *] a)\n    =+  q=(lsh [0 p] (fil 0 w 1))\n    ?:  s.a  q  (^add q sb)\n  ?:  ?=([%n *] a)  (lsh [0 (dec p)] (fil 0 +(w) 1))\n  ?~  a.a  ?:  s.a  `@r`0  sb\n  =+  ma=(met 0 a.a)\n  ?.  =(ma +(p))\n    ?>  =(e.a me)\n    ?>  (^lth ma +(p))\n    ?:  s.a  `@r`a.a  (^add a.a sb)\n  =+  q=(sum:si (dif:si e.a me) --1)\n  =+  r=(^add (lsh [0 p] (abs:si q)) (end [0 p] a.a))\n  ?:  s.a  r  (^add r sb)\n```\n\n#### Examples\n\n```\n> (bif:ma:rd *fn)\n0x7ff8000000000000\n```\n\n---\n\n### `++sig:ff`\n\nGet sign\n\nProduces the sign of `a`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  sig\n  |=  [a=@r]  ^-  ?\n  =(0 (cut 0 [(^add p w) 1] a))\n```\n\n#### Examples\n\n```\n> (sig:ff `@r`5)\n%.n\n```\n\n---\n\n### `++exp:ff`\n\nGet exponent\n\nProduces the exponent of `a`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n#### Produces\n\nA signed integer.\n\n#### Source\n\n```hoon\n++  exp\n  |=  [a=@r]  ^-  @s\n  (dif:si (sun:si (cut 0 [p w] a)) b)\n```\n\n#### Examples\n\n```\n> (exp:ff `@r`5)\n--0\n```\n\n---\n\n### `++add:ff`\n\nAdd\n\nProduces the sum of `a` plus `b`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n`b` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `@r`, an IEEE float.\n\n#### Source\n\n```hoon\n++  add\n  |=  [a=@r b=@r]\n  (bif (add:pa (sea a) (sea b)))\n```\n\n#### Examples\n\n```\n> (add:ma:rd `@r`5 `@r`11)\n0x10\n```\n\n---\n\n### `++sub:ff`\n\nSub\n\nProduces the sum of `a` plus `b`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n`b` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `@r`, an IEEE float.\n\n#### Source\n\n```hoon\n++  sub\n  |=  [a=@r b=@r]\n  (bif (sub:pa (sea a) (sea b)))\n```\n\n#### Examples\n\n```\n> (sub:ma:rd `@r`5 `@r`11)\n0x8000000000000006\n```\n\n---\n\n### `++mul:ff`\n\nMultiply\n\nProduces the product of `a` multiplied by `b`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n`b` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `@r`, an IEEE float.\n\n#### Multiply\n\n```hoon\n++  mul\n  |=  [a=@r b=@r]\n  (bif (mul:pa (sea a) (sea b)))\n```\n\n#### Examples\n\n```\n> (mul:ma:rd `@r`11 `@r`2)\n0x0\n```\n\n---\n\n### `++div:ff`\n\nDivide\n\nProduces the quotient of `a` divided by `b`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n`b` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `@r`, an IEEE float.\n\n#### Source\n\n```hoon\n++  div\n  |=  [a=@r b=@r]\n  (bif (div:pa (sea a) (sea b)))\n```\n\n#### Examples\n\n```\n> (div:ma:rd `@r`175 `@r`26)\n0x401aec4ec4ec4ec4\n```\n\n---\n\n### `++fma:ff`\n\nFused multiply-add\n\nProduces the sum of `c` plus the product of `a` multiplied by `b`;\n`(a * b) + c`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n`b` is a `@r`, an IEEE float.\n\n`c` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `@r`, an IEEE float.\n\n#### Source\n\n```hoon\n++  fma\n  |=  [a=@r b=@r c=@r]\n  (bif (fma:pa (sea a) (sea b) (sea c)))\n```\n\n#### Examples\n\n```\n> (fma:ma:rd `@r`175 `@r`26 `@r`100)\n0x64\n```\n\n---\n\n### `++sqt:ff`\n\nSquare root\n\nProduces the square root of `a`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `@r`, an IEEE float.\n\n#### Source\n\n```hoon\n++  sqt\n  |=  [a=@r]\n  (bif (sqt:pa (sea a)))\n```\n\n#### Examples\n\n```\n> (sqt:ma:rd `@r`175)\n0x1e9a751f9447b724\n```\n\n---\n\n### `++lth:ff`\n\nLess than\n\nTests whether `a` is less than `b`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n`b` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  lth\n  |=  [a=@r b=@r]  (fall (lth:pa (sea a) (sea b)) |)\n```\n\n#### Examples\n\n```\n> (lth:ma:rd `@rd`1 `@rd`2)\n%.y\n\n> (lth:ma:rd `@rd`10 `@rd`2)\n%.n\n```\n\n---\n\n### `++lte:ff`\n\nLess than or equal to\n\nTests whether `a` is less than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n`b` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  lte\n  |=  [a=@r b=@r]  (fall (lte:pa (sea a) (sea b)) |)\n```\n\n#### Examples\n\n```\n> (lte:ma:rd `@rd`10 `@rd`2)\n%.n\n\n> (lte:ma:rd `@rd`10 `@rd`10)\n%.y\n```\n\n---\n\n### `++equ:ff`\n\nEquals\n\nTests whether `a` is equal to `b`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n`b` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  equ\n  |=  [a=@r b=@r]  (fall (equ:pa (sea a) (sea b)) |)\n```\n\n#### Examples\n\n```\n> (equ:ma:rd `@rd`10 `@rd`2)\n%.n\n\n> (equ:ma:rd `@rd`10 `@rd`10)\n%.y\n```\n\n---\n\n### `++gte:ff`\n\nGreater or equal than\n\nTests whether `a` is greater than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n`b` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  gte\n  |=  [a=@r b=@r]  (fall (gte:pa (sea a) (sea b)) |)\n```\n\n#### Examples\n\n```\n> (gte:ma:rd `@rd`10 `@rd`10)\n%.y\n\n> (gte:ma:rd `@rd`10 `@rd`11)\n%.n\n```\n\n---\n\n### `++gth:ff`\n\nGreater than\n\nTests whether `a` is greater than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n`b` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  gth\n  |=  [a=@r b=@r]  (fall (gth:pa (sea a) (sea b)) |)\n```\n\n#### Examples\n\n```\n> (gth:ma:rd `@rd`10 `@rd`10)\n%.n\n\n> (gth:ma:rd `@rd`10 `@rd`9)\n%.y\n```\n\n---\n\n### `++sun:ff`\n\nUnsigned integer to `@r`\n\nConverts `a` from an unsigned integer (`@u`) to `@r`.\n\n#### Accepts\n\n`a` is `@u`, unsigned integer.\n\n#### Produces\n\nA `@r`, an IEEE float.\n\n#### Source\n\n```hoon\n++  sun\n  |=  [a=@u]  (bit [%f & --0 a])\n```\n\n#### Examples\n\n```\n> (sun:ma:rd 658.149.282)\n0x41c39d47d1000000\n```\n\n---\n\n### `++san:ff`\n\nSigned integer to `@r`\n\nConverts `a` from a signed integer to `@r`.\n\n#### Accepts\n\n`a` is `@s`, a signed integer\n\n#### Produces\n\nA `@r`, an IEEE float.\n\n#### Source\n\n```hoon\n++  san\n  |=  [a=@s]  (bit [%f (syn:si a) --0 (abs:si a)])\n```\n\n#### Examples\n\n```\n> (san:ma:rd --10)\n0x4024000000000000\n```\n\n---\n\n### `++toi:ff`\n\nRound to integer\n\nRounds `a` to the nearest signed integer.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `flag` of `@s`.\n\n#### Source\n\n```hoon\n++  toi\n  |=  [a=@r]  (toi:pa (sea a))\n```\n\n#### Examples\n\n```\n> (toi:ma:rd `@r`0x4af)\n[~ u=--0]\n```\n\n---\n\n### `++drg:ff`\n\n`@r` to decimal float\n\nConverts `a` from `@r` to `dn` using the Dragon4 algorithm.\n\n#### Accepts\n\n`a` is a `@r`, an IEEE float.\n\n#### Produces\n\nA `dn`.\n\n#### Source\n\n```hoon\n++  drg\n  |=  [a=@r]  (drg:pa (sea a))\n```\n\n#### Examples\n\n```\n> (drg:ma:rd `@r`0x41c0)\n[%d s=%.y e=-323 a=8.316]\n\n> (drg:ma:rd (sun:ma:rd 658.149.282))\n[%d s=%.y e=--0 a=658.149.282]\n```\n\n---\n\n### `++grd:ff`\n\nDecimal float to `@r`\n\nConverts `a` from `dn` to `@r`.\n\n#### Accepts\n\n`a` is a `dn`.\n\n#### Produces\n\nA `@r`, an IEEE float.\n\n#### Source\n\n```hoon\n++  grd\n  |=  [a=dn]  (bif (grd:pa a))\n```\n\n#### Examples\n\n```\n> (grd:ma:rd [%d s=%.y e=--0 a=658.149.282])\n0x41c39d47d1000000\n```\n\n---\n",
    "rlyd": "## `++rlyd`\n\nPrep `@rd` for print\n\nConverts `a` from a double-precision binary float to decimal64.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n#### Produces\n\nA `dn`.\n\n#### Source\n\n```hoon\n++  rlyd  |=  a=@rd  ^-  dn  (drg:rd a)\n```\n\n#### Examples\n\n```\n> (rlyd .~2.4703e-320)\n[%d s=%.y e=-324 a=24.703]\n```\n\n---\n",
    "rlys": "## `++rlys`\n\nPrep @rs for print\n\nConverts `a` from a single-precision binary float to decimal32.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n#### Produces\n\nA `dn`.\n\n#### Source\n\n```hoon\n++  rlys  |=  a=@rs  ^-  dn  (drg:rs a)\n```\n\n#### Examples\n\n```\n> (rlys .1.681557e-39)\n[%d s=%.y e=-45 a=1.681.557]\n```\n\n---\n",
    "rlyh": "## `++rlyh`\n\nPrep `@rh` for print\n\nConverts `a` from a half-precision binary float to decimal16.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n#### Produces\n\nA `dn`.\n\n#### Source\n\n```hoon\n++  rlyh  |=  a=@rh  ^-  dn  (drg:rh a)\n```\n\n#### Examples\n\n```\n> (rlyh .~~3e1)\n[%d s=%.y e=--1 a=3]\n```\n\n---\n",
    "rlyq": "## `++rlyq`\n\nPrep `@rq` for print\n\nConverts `a` from a quad-precision binary float to decimal128.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n#### Produces\n\nA `dn`.\n\n#### Source\n\n```hoon\n++  rlyq  |=  a=@rq  ^-  dn  (drg:rq a)\n```\n\n#### Examples\n\n```\n> (rlyq .~~~2.2628017865927756787440310766086816e-4343)\n[%d s=%.y e=-4.377 a=22.628.017.865.927.756.787.440.310.766.086.816]\n```\n\n---\n",
    "ryld": "## `++ryld`\n\nFinish parsing `@rd`\n\nConverts `a` from a decimal float to a double-precision binary float.\n\n#### Accepts\n\n`a` is a `dn`.\n\n#### Produces\n\nA a `@rd`, a double-precision float.\n\n#### Source\n\n```hoon\n++  ryld  |=  a=dn  ^-  @rd  (grd:rd a)\n```\n\n#### Examples\n\n```\n> (ryld [%d s=%.y e=-324 a=24.703])\n.~2.4703e-320\n```\n\n---\n",
    "ryls": "## `++ryls`\n\nFinish parsing `@rs`\n\nConverts `a` from a decimal float to a single-precision binary float.\n\n#### Accepts\n\n`a` is a `dn`.\n\n#### Produces\n\nA a `@rs`, a single-precision float.\n\n#### Source\n\n```hoon\n++  ryls  |=  a=dn  ^-  @rs  (grd:rs a)\n```\n\n#### Examples\n\n```\n> (ryls [%d s=%.y e=-324 a=24.703])\n.0\n\n> (ryls [%d s=%.y e=-32 a=24.703])\n.2.4703e-28\n```\n\n---\n",
    "rylh": "## `++rylh`\n\nFinish parsing `@rh`\n\nConverts `a` from a decimal float to a half-precision binary float.\n\n#### Accepts\n\n`a` is a `dn`.\n\n#### Produces\n\nA a `@rh`, a half-precision float.\n\n#### Source\n\n```hoon\n++  rylh  |=  a=dn  ^-  @rh  (grd:rh a)\n```\n\n#### Examples\n\n```\n> (rylh [%d s=%.y e=--1 a=703])\n.~~7.032e3\n\n> (rylh [%d s=%.y e=--3 a=56])\n.~~5.6e4\n\n> (rylh [%d s=%.y e=--4 a=56])\n.~~inf\n```\n\n---\n",
    "rylq": "## `++rylq`\n\nFinish parsing `@rq`\n\nConverts `a` from a decimal float to a quad-precision binary float.\n\n#### Accepts\n\n`a` is a `dn`.\n\n#### Produces\n\nA a `@rq`, a quad-precision float.\n\n#### Source\n\n```hoon\n++  rylq  |=  a=dn  ^-  @rq  (grd:rq a)\n```\n\n#### Examples\n\n```\n> (rylq [%d s=%.y e=-324 a=24.703])\n.~~~2.4703e-320\n```\n\n---\n",
    "rd": "## `++rd`\n\nDouble-precision fp\n\nA container core for operations related to double-precision binary floats.\n\n`++rd` has four rounding modes: round to nearest (`%n`), round up (`%u`), round\ndown (`%d`), and round to zero (`%z`). The default rounding mode is `%z`. If\nyou need a different rounding mode, you'd do something like `=/  rd-n  ~(. rd\n%n)` and then call the arms of your modified version instead.\n\n#### Source\n\n```hoon\n++  rd\n  ^|\n  ~%  %rd  +>  ~\n  |_  r=$?(%n %u %d %z)\n```\n\n---\n\n### `++ma:rd`\n\nInitialize `ff`\n\nInstantiates the core `ff`, giving values to its samples based on the\nconfiguration of the `rd` core. **This arm is used internally by `++rd`, you\nwould not normally call this directly.**\n\n#### Source\n\n```hoon\n++  ma\n  %*(. ff w 11, p 52, b --1.023, r r)\n```\n\n#### Examples\n\n```\n> ~(ma rd %n)\n< 24.ltg\n  {{{w/@ud p/@ud b/@sd} r/?($n $u $d $z)} <54.tyv 119.wim 31.ohr 1.jmk $143>}\n>\n```\n\n---\n\n### `++sea:rd`\n\n`@rd` to `fn`\n\nConverts `a` from a double-precision binary float to `fn`.\n\n#### Source\n\n```hoon\n++  sea\n  |=  [a=@rd]  (sea:ma a)\n```\n\n#### Examples\n\n```\n> (sea:rd .~4.94066e-319)\n[%f s=%.y e=-1.074 a=100.000]\n```\n\n---\n\n### `++bit:rd`\n\n`fn` to `@rd`\n\nConverts `a` from `fn` to a double-precision binary float.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nA `@rd`, a double-precision float.\n\n#### Source\n\n```hoon\n++  bit\n  |=  [a=fn]  ^-  @rd  (bit:ma a)\n```\n\n#### Examples\n\n```\n> (bit:rd [%f s=%.y e=-1.074 a=100.000])\n.~4.94066e-319\n```\n\n---\n\n### `++add:rd`\n\nAdd\n\nProduces the sum of `a` plus `b`.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n`b` is a `@rd`, a double-precision float.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  add  ~/  %add\n  |=  [a=@rd b=@rd]  ^-  @rd\n  ~_  leaf+\"rd-fail\"\n  (add:ma a b)\n```\n\n#### Examples\n\n```\n> (add:rd .~3.94066e12 .~9.2846e11)\n.~4.86912e12\n```\n\n---\n\n### `++sub:rd`\n\nSubtract\n\nProduces the difference of `a` minus `b`.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n`b` is a `@rd`, a double-precision float.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  sub  ~/  %sub\n  |=  [a=@rd b=@rd]  ^-  @rd\n  ~_  leaf+\"rd-fail\"\n  (sub:ma a b)\n```\n\n#### Examples\n\n```\n> (sub:rd .~7.94069e2 .~1.2846e3)\n.~-4.9053099999999995e2\n```\n\n---\n\n### `++mul:rd`\n\nMultiply\n\nProduces the product of `a` times `b`.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n`b` is a `@rd`, a double-precision float.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  mul  ~/  %mul\n  |=  [a=@rd b=@rd]  ^-  @rd\n  ~_  leaf+\"rd-fail\"\n  (mul:ma a b)\n```\n\n#### Examples\n\n```\n> (mul:rd .~7.94069e2 .~1.2246e3)\n.~9.724168973999998e5\n```\n\n---\n\n### `++div:rd`\n\nDivide\n\nProduces the quotient of `a` divided by `b`.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n`b` is a `@rd`.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  div  ~/  %div\n  |=  [a=@rd b=@rd]  ^-  @rd\n  ~_  leaf+\"rd-fail\"\n  (div:ma a b)\n```\n\n#### Examples\n\n```\n> (div:rd .~7.94099e2 .~1.2246e3)\n.~6.484558223093255e-1\n```\n\n---\n\n### `++fma:rd`\n\nFused multiply-add\n\nProduces the sum of `c` plus the product of `a` multiplied by `b`;\n`(a * b) + c`.\n\n#### Accepts\n\n`a` is a `@rd`, an IEEE float.\n\n`b` is a `@rd`.\n\n`c` is a `@rd`.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  fma  ~/  %fma\n  |=  [a=@rd b=@rd c=@rd]  ^-  @rd\n  ~_  leaf+\"rd-fail\"\n  (fma:ma a b c)\n```\n\n#### Examples\n\n```\n> (fma:rd .~7.94099e2 .~1.2246e3 .~3.94066e3)\n.~9.763942954e5\n```\n\n---\n\n### `++sqt:rd`\n\nSquare root\n\nProduces the square root of `a`.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  sqt  ~/  %sqt\n  |=  [a=@rd]  ^-  @rd  ~_  leaf+\"rd-fail\"\n  (sqt:ma a)\n```\n\n#### Examples\n\n```\n> (sqt:rd .~3.94066e3)\n.~6.2774676422901614e1\n```\n\n---\n\n### `++lth:rd`\n\nLess than\n\nTest whether `a` is less than `b`.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n`b` is a `@rd`, a double-precision float.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  lth  ~/  %lth\n  |=  [a=@rd b=@rd]\n  ~_  leaf+\"rd-fail\"\n  (lth:ma a b)\n```\n\n#### Examples\n\n```\n> (lth:rd .~7.94099e2 .~1.2246e3)\n%.y\n\n> (lth:rd .~7.94099e2 .~1.2246e2)\n%.n\n\n> (lth:rd .~1.2246e2 .~1.2246e2)\n%.n\n```\n\n---\n\n### `++lte:rd`\n\nLess than or equal\n\nTest whether `a` is less than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n`b` is a `@rd`, a double-precision float.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  lte  ~/  %lte\n  |=  [a=@rd b=@rd]\n  ~_  leaf+\"rd-fail\"\n  (lte:ma a b)\n```\n\n#### Examples\n\n```\n> (lte:rd .~7.94099e2 .~1.2246e3)\n%.y\n\n> (lte:rd .~7.94099e2 .~1.2246e2)\n%.n\n\n> (lte:rd .~1.2246e2 .~1.2246e2)\n%.y\n```\n\n---\n\n### `++equ:rd`\n\nEquals\n\nTest whether `a` is equal to `b`.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n`b` is a `@rd`, a double-precision float.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  equ  ~/  %equ\n  |=  [a=@rd b=@rd]\n  ~_  leaf+\"rd-fail\"\n  (equ:ma a b)\n```\n\n#### Examples\n\n```\n> (equ:rd .~7.94099e2 .~1.2246e3)\n%.n\n\n> (equ:rd .~7.94099e2 .~1.2246e2)\n%.n\n\n> (equ:rd .~1.2246e2 .~1.2246e2)\n%.y\n```\n\n---\n\n### `++gte:rd`\n\nGreater than or equal\n\nTest whether `a` is greater than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n`b` is a `@rd`, a double-precision float.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  gte  ~/  %gte\n  |=  [a=@rd b=@rd]\n  ~_  leaf+\"rd-fail\"\n  (gte:ma a b)\n```\n\n#### Examples\n\n```\n> (gte:rd .~7.94099e2 .~1.2246e3)\n%.n\n\n> (gte:rd .~7.94099e2 .~1.2246e2)\n%.y\n\n> (gte:rd .~1.2246e2 .~1.2246e2)\n%.y\n```\n\n---\n\n### `++gth:rd`\n\nGreater than\n\nTest whether `a` is greater `b`.\n\n#### Accepts\n\n`a` is a `@rd`, a double-precision float.\n\n`b` is a `@rd`, a double-precision float.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  gth  ~/  %gth\n  |=  [a=@rd b=@rd]\n  ~_  leaf+\"rd-fail\"\n  (gth:ma a b)\n```\n\n#### Examples\n\n```\n> (gth:rd .~7.94099e2 .~1.2246e3)\n%.n\n\n> (gth:rd .~7.94099e2 .~1.2246e2)\n%.y\n\n> (gth:rd .~1.2246e2 .~1.2246e2)\n%.n\n```\n\n---\n\n### `++sun:rd`\n\nUnsigned integer to `@rd`\n\nConverts an unsigned integer `a` to `@rd`.\n\n#### Accepts\n\n`a` is a `@u`, an unsigned integer.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  sun  |=  [a=@u]  ^-  @rd  (sun:ma a)\n```\n\n#### Examples\n\n```\n> (sun:rd 511)\n.~5.11e2\n```\n\n---\n\n### `++san:rd`\n\nSigned integer to `@rd`\n\nConverts a signed integer `a` to `@rd`.\n\n#### Accepts\n\n`a` is a `@s`, a signed integer.\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  san  |=  [a=@s]  ^-  @rd  (san:ma a)\n```\n\n#### Examples\n\n```\n> (san:rd -511)\n.~-5.11e2\n```\n\n---\n\n### `++sig:rd`\n\nGet sign\n\nProduces the sign of `a`.\n\n#### Accepts\n\n`a` is a `@rd`\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  sig  |=  [a=@rd]  ^-  ?  (sig:ma a)\n```\n\n#### Examples\n\n```\n> (sig:rd .~1.2246e3)\n%.y\n```\n\n---\n\n### `++exp:rd`\n\nGet exponent\n\nProduces the exponent of `a`.\n\n#### Accepts\n\n`a` is a `@rd`\n\n#### Produces\n\nA `@s`.\n\n#### Source\n\n```hoon\n++  exp  |=  [a=@rd]  ^-  @s  (exp:ma a)\n```\n\n#### Examples\n\n```\n> (exp:rd .~1.2246e3)\n--10\n```\n\n---\n\n### `++toi:rd`\n\nRound to integer\n\nRounds `a` to the nearest integer.\n\n#### Accepts\n\n`a` is a `@rd`\n\n#### Produces\n\nA `unit` of `@s`.\n\n#### Source\n\n```hoon\n++  toi  |=  [a=@rd]  ^-  (unit @s)  (toi:ma a)\n```\n\n#### Examples\n\n```\n> (toi:rd .~1.2246e3)\n[~ u=--1.224]\n```\n\n---\n\n### `++drg:rd`\n\n`@rd` to decimal float\n\nProduces the decimal form of `a` using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.\n\n#### Accepts\n\n`a` is a `@rd`\n\n#### Produces\n\nA `dn`.\n\n#### Source\n\n```hoon\n++  drg  |=  [a=@rd]  ^-  dn  (drg:ma a)\n```\n\n#### Examples\n\n```\n> (drg:rd .~1.2246e3)\n[%d s=%.y e=-1 a=12.246]\n```\n\n---\n\n### `++grd:rd`\n\nDecimal float to `@rd`\n\nConverts `a` from decimal float to `@rd`.\n\n#### Accepts\n\n`a` is a `@dn`\n\n#### Produces\n\nA `@rd`.\n\n#### Source\n\n```hoon\n++  grd  |=  [a=dn]  ^-  @rd  (grd:ma a)\n```\n\n#### Examples\n\n```\n> (grd:rd [%d s=%.y e=-1 a=12.246])\n.~1.2246e3\n```\n\n---\n",
    "rs": "## `++rs`\n\nSingle-precision fp\n\nA container core for operations related to single-precision binary floats.\n\n`++rs` has four rounding modes: round to nearest (`%n`), round up (`%u`), round\ndown (`%d`), and round to zero (`%z`). The default rounding mode is `%z`. If\nyou need a different rounding mode, you'd do something like `=/  rs-n  ~(. rs\n%n)` and then call the arms of your modified version instead.\n\n#### Source\n\n```hoon\n++  rs\n  ~%  %rs  +>  ~\n  ^|\n  |_  r=$?(%n %u %d %z)\n```\n\n---\n\n### `++ma:rs`\n\nInitialize `ff`\n\nInstantiates the core `ff`, giving values to its samples based on the\nconfiguration of the `rs` core. **This arm is used internally by `++rs`, you\nwould not normally call this directly.**\n\n#### Source\n\n```hoon\n++  ma\n  %*(. ff w 8, p 23, b --127, r r)\n```\n\n#### Examples\n\n```\n> ~(ma rs %n)\n< 24.ltg\n  {{{w/@ud p/@ud b/@sd} r/?($n $u $d $z)} <54.tyv 119.wim 31.ohr 1.jmk $143>}\n>\n```\n\n---\n\n### `++sea:rs`\n\n`@rs` to `fn`\n\nConverts `a` from `@rs` to `fn`.\n\n#### Accepts\n\n`a` is a `@rs`, an single-precision float.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  sea\n  |=  [a=@rs]  (sea:ma a)\n```\n\n#### Examples\n\n```\n> (sea:rs .1.4e-43)\n[%f s=%.y e=-149 a=100]\n```\n\n---\n\n### `++bit:rs`\n\n`fn` to `@rs`\n\nConverts `a` from `fn` to `@rs`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nA `@rs`, a single-precision float.\n\n#### Source\n\n```hoon\n++  bit\n  |=  [a=fn]  ^-  @rs  (bit:ma a)\n```\n\n#### Examples\n\n```\n> (bit:rs [%f & -2 1.000])\n.2.5e2\n```\n\n---\n\n### `++add:rs`\n\nAdd\n\nProduces the sum of `a` plus `b`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n`b` is a `@rs`.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  add  ~/  %add\n  |=  [a=@rs b=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (add:ma a b)\n```\n\n#### Examples\n\n```\n> (add:rs .2.5e1 .2.5e2)\n.2.75e2\n```\n\n---\n\n### `++sub:rs`\n\nSubtract\n\nSubtracts `a` from `b`.\n\n#### Accepts\n\n`a` is a `@rs`.\n\n`b` is a `@rs`.\n\n#### Source\n\n```hoon\n++  sub  ~/  %sub\n  |=  [a=@rs b=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (sub:ma a b)\n```\n\n#### Examples\n\n```\n> (sub:rs .2.5e1 .2.5e2)\n.-2.25e2\n```\n\n---\n\n### `++mul:rs`\n\nMultiply\n\nProduces the product of `a` multiplied by `b`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n`b` is a `@rs`.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  mul  ~/  %mul\n  |=  [a=@rs b=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (mul:ma a b)\n```\n\n#### Examples\n\n```\n> (mul:rs .2.5e1 .2.5e2)\n.6.25e3\n```\n\n---\n\n### `++div:rs`\n\nDivide\n\nProduces the quotient of `a` divided by `b`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n`b` is a `@rs`.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  div  ~/  %div\n  |=  [a=@rs b=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (div:ma a b)\n```\n\n#### Examples\n\n```\n> (div:rs .4.5e1 .2.2e2)\n.2.0454545e-1\n```\n\n---\n\n### `++fma:rs`\n\nFused multiply-add\n\nProduces the sum of `c` plus the product of `a` multiplied by `b`;\n`(a * b) + c`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n`b` is a `@rs`.\n\n`c` is a `@rs`.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  fma  ~/  %fma\n  |=  [a=@rs b=@rs c=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (fma:ma a b c)\n```\n\n#### Examples\n\n```\n> (fma:rs .2.5e1 .2.5e2 .8.2e1)\n.6.332e3\n```\n\n---\n\n### `++sqt:rs`\n\nSquare root\n\nProduces the square root of `a`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  sqt  ~/  %sqt\n  |=  [a=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (sqt:ma a)\n```\n\n#### Examples\n\n```\n> (sqt:rs .2.5e2)\n.1.5811388e1\n```\n\n---\n\n### `++lth:rs`\n\nLess than\n\nTest whether `a` is less than `b`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n`b` is a `@rs`.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  lth  ~/  %lth\n  |=  [a=@rs b=@rs]\n  ~_  leaf+\"rs-fail\"\n  (lth:ma a b)\n```\n\n#### Examples\n\n```\n> (lth:rs .9.9e1 .1.1e2)\n%.y\n\n> (lth:rs .9.9e1 .9.9e1)\n%.n\n```\n\n---\n\n### `++lte:rs`\n\nLess than or equal\n\nTest whether `a` is less than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n`b` is a `@rs`.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  lte  ~/  %lte\n  |=  [a=@rs b=@rs]\n  ~_  leaf+\"rs-fail\"\n  (lte:ma a b)\n```\n\n#### Examples\n\n```\n> (lte:rs .9.9e1 .1.1e2)\n%.y\n\n> (lte:rs .9.9e1 .9.9e1)\n%.y\n```\n\n---\n\n### `++equ:rs`\n\nEquals\n\nTest whether `a` is equal to `b`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n`b` is a `@rs`.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  equ  ~/  %equ\n  |=  [a=@rs b=@rs]\n  ~_  leaf+\"rs-fail\"\n  (equ:ma a b)\n```\n\n#### Examples\n\n```\n> (equ:rs .9.9e1 .1.1e2)\n%.n\n\n> (equ:rs .9.9e1 .9.9e1)\n%.y\n```\n\n---\n\n### `++gte:rs`\n\nGreater than or equal\n\nTest whether `a` is greater than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n`b` is a `@rs`.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  gte  ~/  %gte\n  |=  [a=@rs b=@rs]\n  ~_  leaf+\"rs-fail\"\n  (gte:ma a b)\n```\n\n#### Examples\n\n```\n> (gte:rs .9.9e1 .9.9e1)\n%.y\n\n> (gte:rs .9.9e1 .9.2e2)\n%.n\n```\n\n---\n\n### `++gth:rs`\n\nGreater than\n\nTest whether `a` is greater than `b`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n`b` is a `@rs`.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  gth  ~/  %gth\n  |=  [a=@rs b=@rs]\n  ~_  leaf+\"rs-fail\"\n  (gth:ma a b)\n```\n\n#### Examples\n\n```\n> (gth:rs .9.9e1 .9.2e2)\n%.n\n\n> (gth:rs .9.9e1 .9.9e1)\n%.n\n\n> (gth:rs .9.9e1 .1.9e1)\n%.y\n```\n\n---\n\n### `++sun:rs`\n\nUnsigned integer to `@rs`\n\nConverts `a` from an unsigned integer to `@rs`.\n\n#### Accepts\n\n`a` is an unsigned integer.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  sun  |=  [a=@u]  ^-  @rs  (sun:ma a)\n```\n\n#### Examples\n\n```\n> (sun:rs 343)\n.3.43e2\n```\n\n---\n\n### `++san:rs`\n\nSigned integer to `@rs`\n\nConverts `a` from a signed integer to `@rs`.\n\n#### Accepts\n\n`a` is a signed integer.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  san  |=  [a=@s]  ^-  @rs  (san:ma a)\n```\n\n#### Examples\n\n```\n> (san:rs -343)\n.-3.43e2'\n```\n\n---\n\n### `++sig:rs`\n\nGet sign\n\nProduces the sign of `a`.\n\n#### Accepts\n\n`a` is a `@rs`.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  sig  |=  [a=@rs]  ^-  ?  (sig:ma a)\n```\n\n#### Examples\n\n```\n> (sig:rs .3.43e2)\n%.y\n\n> (sig:rs .-3.43e2)\n%.n\n```\n\n---\n\n### `++exp:rs`\n\nGet exponent\n\nProduces the exponent of `a`.\n\n#### Accepts\n\n`a` is a `@rs`.\n\n#### Produces\n\nA signed integer.\n\n#### Source\n\n```hoon\n++  exp  |=  [a=@rs]  ^-  @s  (exp:ma a)\n```\n\n#### Examples\n\n```\n> (exp:rs .-3.43e2)\n--8\n```\n\n---\n\n### `++toi:rs`\n\nRound to integer\n\nRounds `a` to the nearest integer.\n\n#### Accepts\n\n`a` is a `@rs`.\n\n#### Produces\n\nA `unit` of `@s`.\n\n#### Source\n\n```hoon\n++  toi  |=  [a=@rs]  ^-  (unit @s)  (toi:ma a)\n```\n\n#### Examples\n\n```\n> (toi:rs .-3.43e2)\n[~ u=-343]\n```\n\n---\n\n### `++drg:rs`\n\n`@rs` to decimal float\n\nProduces the decimal form of `a` using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.\n\n#### Accepts\n\n`a` is a `@rs`\n\n#### Produces\n\nA `dn`.\n\n#### Source\n\n```hoon\n++  drg  |=  [a=@rs]  ^-  dn  (drg:ma a)\n```\n\n#### Examples\n\n```\n> (drg:rs .-3.43e2)\n[%d s=%.n e=--0 a=343]\n```\n\n---\n\n### `++grd:rs`\n\nDecimal float to `@rs`\n\nConverts `a` from `dn` to `@rs`.\n\n#### Accepts\n\n`a` is a `dn`.\n\n#### Produces\n\nA `@rs`.\n\n#### Source\n\n```hoon\n++  grd  |=  [a=dn]  ^-  @rs  (grd:ma a)\n```\n\n#### Examples\n\n```\n> (grd:rs [%d s=%.n e=--0 a=343])\n.-3.43e2\n```\n\n---\n",
    "rq": "## `++rq`\n\nQuadruple-precision fp\n\nA container core for operations related to quadruple-precision binary floats.\n\n`++rq` has four rounding modes: round to nearest (`%n`), round up (`%u`), round\ndown (`%d`), and round to zero (`%z`). The default rounding mode is `%z`. If\nyou need a different rounding mode, you'd do something like `=/  rq-n  ~(. rq\n%n)` and then call the arms of your modified version instead.\n\n#### Source\n\n```hoon\n++  rq\n  ~%  %rq  +>  ~\n  ^|\n  |_  r=$?(%n %u %d %z)\n```\n\n### `++ma:rq`\n\nInitialize `ff`\n\nInstantiates the core `ff`, giving values to its samples based on the\nconfiguration of the `rq` core. **This arm is used internally by `++rq`, you\nwould not normally call this directly.**\n\n#### Source\n\n```hoon\n++  ma\n  %*(. ff w 15, p 112, b --16.383, r r)\n```\n\n---\n\n### `++sea:rq`\n\n`@rq` to `fn`\n\nConverts `a` from `@rq` to `fn`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  sea\n  |=  [a=@rq]  (sea:ma a)\n```\n\n#### Examples\n\n```\n> (sea:rq .~~~1.05102e5)\n[%f s=%.y e=-96 a=8.327.038.336.574.210.409.756.656.268.214.272]\n```\n\n---\n\n### `++bit:rq`\n\n`fn` to `@rq`\n\nConverts `a` from `fn` to `@rq`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nA `@rq`, a quad-precision float.\n\n#### Source\n\n```hoon\n++  bit\n  |=  [a=fn]  ^-  @rq  (bit:ma a)\n```\n\n#### Examples\n\n```\n> (bit:rq [%f s=%.y e=-96 a=8.327.038.336.574.210.409.756.656.268.214.272])\n.~~~1.05102e5\n```\n\n---\n\n### `++add:rq`\n\nAdd\n\nProduces the sum of `a` plus `b`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n`b` is a `@rq`.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  add  ~/  %add\n  |=  [a=@rq b=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (add:ma a b)\n```\n\n#### Examples\n\n```\n> (add:rq .~~~-1.821e5 .~~~1.05102e5)\n.~~~-7.6998e4\n```\n\n---\n\n### `++sub:rq`\n\nSubtract\n\nProduces the difference of `a` minus `b`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n`b` is a `@rq`.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  sub  ~/  %sub\n  |=  [a=@rq b=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (sub:ma a b)\n```\n\n#### Examples\n\n```\n> (sub:rq .~~~1.821e5 .~~~1.05102e5)\n.~~~7.6998e4\n\n> (sub:rq .~~~1.821e5 .~~~-1.05102e5)\n.~~~2.87202e5\n```\n\n---\n\n### `++mul:rq`\n\nMultiply\n\nProduces the product of `a` times `b`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n`b` is a `@rq`.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  mul  ~/  %mul\n  |=  [a=@rq b=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (mul:ma a b)\n```\n\n#### Examples\n\n```\n> (mul:rq .~~~1.821e5 .~~~-1.05102e5)\n.~~~-1.91390742e10\n```\n\n---\n\n### `++div:rq`\n\nDivide\n\nProduces the product of `a` divided by `b`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n`b` is a `@rq`.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  div  ~/  %div\n  |=  [a=@rq b=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (div:ma a b)\n```\n\n#### Examples\n\n```\n> (div:rq .~~~1.821e5 .~~~1.05102e3)\n.~~~1.732602614602957127361991208540275e2\n```\n\n---\n\n### `++fma:rq`\n\nFused multiply-add\n\nProduces the sum of `c` plus the product of `a` multiplied by `b`;\n`(a * b) + c`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n`b` is a `@rq`.\n\n`c` is a `@rq`.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  fma  ~/  %fma\n  |=  [a=@rq b=@rq c=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (fma:ma a b c)\n```\n\n#### Examples\n\n```\n> (fma:rq .~~~1.821e5 .~~~-1.05102e2 .~~~6.2044e7)\n.~~~4.29049258e7\n```\n\n---\n\n### `++sqt:rq`\n\nSquare root\n\nProduces the square root of `a`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  sqt  ~/  %sqt\n  |=  [a=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (sqt:ma a)\n```\n\n#### Examples\n\n```\n> (sqt:rq .~~~6.2044e7)\n.~~~7.876801381271461258959876570289002e3\n```\n\n---\n\n### `++lth:rq`\n\nLess than\n\nTests whether `a` is less than `b`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n`b` is a `@rq`.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  lth  ~/  %lth\n  |=  [a=@rq b=@rq]\n  ~_  leaf+\"rq-fail\"\n  (lth:ma a b)\n```\n\n#### Examples\n\n```\n> (lth:rq .~~~1.2044e7 (mul:rq .~~~9.02e2 .~~~7.114e3))\n%.n\n\n> (lth:rq .~~~1.2044e7 (mul:rq .~~~9.02e3 .~~~7.114e3))\n%.y\n```\n\n---\n\n### `++lte:rq`\n\nLess than or equal\n\nTests whether `a` is less than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n`b` is a `@rq`.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  lte  ~/  %lte\n  |=  [a=@rq b=@rq]\n  ~_  leaf+\"rq-fail\"\n  (lte:ma a b)\n```\n\n#### Examples\n\n```\n> (lte:rq .~~~1.2044e7 (mul:rq .~~~9.02e2 .~~~7.114e3))\n%.n\n\n> (lte:rq .~~~1.2044e7 (mul:rq .~~~9.02e3 .~~~7.114e3))\n%.y\n\n> (lte:rq .~~~1.2044e7 .~~~1.2044e7)\n%.y\n```\n\n---\n\n### `++equ:rq`\n\nEquals\n\nTests whether `a` is equal to `b`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n`b` is a `@rq`.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  equ  ~/  %equ\n  |=  [a=@rq b=@rq]\n  ~_  leaf+\"rq-fail\"\n  (equ:ma a b)\n```\n\n#### Examples\n\n```\n> (equ:rq .~~~1.2044e7 .~~~1.2044e7)\n%.y\n\n> (equ:rq .~~~2.2044e7 .~~~1.2044e7)\n%.n\n```\n\n---\n\n### `++gte:rq`\n\nGreater than or equal\n\nTests whether `a` is greater than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n`b` is a `@rq`.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  gte  ~/  %gte\n  |=  [a=@rq b=@rq]\n  ~_  leaf+\"rq-fail\"\n  (gte:ma a b)\n```\n\n#### Examples\n\n```\n> (gte:rq .~~~1.2044e7 .~~~1.2044e7)\n%.y\n\n> (gte:rq .~~~2.2044e7 .~~~1.2044e7)\n%.y\n\n> (gte:rq .~~~1.2044e7 .~~~2.2044e7)\n%.n\n```\n\n---\n\n### `++gth:rq`\n\nTests whether `a` is greater than `b`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n`b` is a `@rq`.\n\n#### Produces\n\nA `@rq`.\n\n#### Source\n\n```hoon\n++  gth  ~/  %gth\n  |=  [a=@rq b=@rq]\n  ~_  leaf+\"rq-fail\"\n  (gth:ma a b)\n```\n\n#### Examples\n\n```\n> (gth:rq .~~~1.2044e7 .~~~1.2044e7)\n%.n\n\n> (gth:rq .~~~2.2044e7 .~~~1.2044e7)\n%.y\n\n> (gth:rq .~~~1.2044e7 .~~~2.2044e7)\n%.n\n```\n\n---\n\n### `++sun:rq`\n\nUnsigned integer to `@rq`\n\nConverts `a` from an unsigned integer to `@rq`.\n\n#### Accepts\n\n`a` is a `@u`, an unsigned integer.\n\n#### Produces\n\nA `@rq`, a quad-precision float.\n\n#### Source\n\n```hoon\n++  sun  |=  [a=@u]  ^-  @rq  (sun:ma a)\n```\n\n#### Examples\n\n```\n> (sun:rq 205)\n.~~~2.05e2\n```\n\n---\n\n### `++san:rq`\n\nSigned integer to `rq`\n\nConverts `a` from a signed integer to `@rq`.\n\n#### Accepts\n\n`a` is a `@s`, a signed integer.\n\n#### Produces\n\nA `@rq`, a quad-precision float.\n\n#### Source\n\n```hoon\n++  san  |=  [a=@s]  ^-  @rq  (san:ma a)\n```\n\n#### Examples\n\n```\n> (san:rq -205)\n.~~~-2.05e2\n```\n\n---\n\n### `++sig:rq`\n\nGet sign\n\nProduces the sign of `a`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  sig  |=  [a=@rq]  ^-  ?  (sig:ma a)\n```\n\n#### Examples\n\n```\n> (sig:rq .~~~-2.05e2)\n%.n\n```\n\n---\n\n### `++exp:rq`\n\nGet exponent\n\nGets the exponent of `a`.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n#### Produces\n\nA `@s`, a signed integer.\n\n#### Source\n\n```hoon\n++  exp  |=  [a=@rq]  ^-  @s  (exp:ma a)\n```\n\n#### Examples\n\n```\n> (exp:rq .~~~-2.05e2)\n--7\n```\n\n---\n\n### `++toi:rq`\n\nRound to integer\n\nRounds `a` to the nearest integer.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n#### Produces\n\nA `unit` of `@s`.\n\n#### Source\n\n```hoon\n++  toi  |=  [a=@rq]  ^-  (unit @s)  (toi:ma a)\n```\n\n#### Examples\n\n```\n> (toi:rq .~~~-2.085e2)\n[~ u=-208]\n\n> (toi:rq .~~~-2.08e2)\n[~ u=-208]\n```\n\n---\n\n### `++drg:rq`\n\n`@rq` to decimal float\n\nProduces the decimal form of `a` using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.\n\n#### Accepts\n\n`a` is a `@rq`, a quad-precision float.\n\n#### Produces\n\nA `dn`.\n\n#### Source\n\n```hoon\n++  drg  |=  [a=@rq]  ^-  dn  (drg:ma a)\n```\n\n#### Examples\n\n```\n> (drg:rq .~~~-2.085e2)\n[%d s=%.n e=-1 a=2.085]\n\n> (drg:rq .~~~-2.08e2)\n[%d s=%.n e=--0 a=208]\n```\n\n---\n\n### `++grd:rq`\n\nDecimal float to `@rq`\n\nConverts `a` from `dn` to `@rq`.\n\n#### Accepts\n\n`a` is `dn`.\n\n`a` is a `@rq`.\n\n#### Produces\n\nA `@rq`, a quad-precision float.\n\n#### Source\n\n```hoon\n++  grd  |=  [a=dn]  ^-  @rq  (grd:ma a)\n```\n\n#### Examples\n\n```\n> (grd:rq [%d s=%.n e=--0 a=343])\n.~~~-3.43e2\n```\n\n---\n",
    "rh": "## `++rh`\n\nHalf-precision fp\n\nA container core for operations related to half-precision binary floats.\n\n`++rh` has four rounding modes: round to nearest (`%n`), round up (`%u`), round\ndown (`%d`), and round to zero (`%z`). The default rounding mode is `%z`. If\nyou need a different rounding mode, you'd do something like `=/  rh-n  ~(. rh\n%n)` and then call the arms of your modified version instead.\n\n#### Source\n\n```hoon\n++  rh\n  ~%  %rh  +>  ~\n  ^|\n  |_  r=$?(%n %u %d %z)\n```\n\n---\n\n### `++ma:rh`\n\nInitialize `ff`\n\nInstantiates the core `ff`, giving values to its samples based on the\nconfiguration of the `rh` core. **This arm is used internally by `++rh`, you\nwould not normally call this directly.**\n\n#### Source\n\n```hoon\n++  ma\n  %*(. ff w 5, p 10, b --15, r r)\n```\n\n---\n\n### `++sea:rh`\n\n`@rh` to `fn`\n\nConverts `a` from `@rh` to `fn`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n#### Produces\n\nAn `fn`.\n\n#### Source\n\n```hoon\n++  sea\n  |=  [a=@rh]  (sea:ma a)\n```\n\n#### Examples\n\n```\n> (sea:rh .~~1.22e-5)\n[%f s=%.y e=-24 a=205]\n```\n\n---\n\n### `++bit:rh`\n\n`fn` to `@rh`\n\nConverts `a` from `fn` to `@rh`.\n\n#### Accepts\n\n`a` is an `fn`.\n\n#### Produces\n\nA `@rh`, a half-precision float.\n\n#### Source\n\n```hoon\n++  bit\n  |=  [a=fn]  ^-  @rh  (bit:ma a)\n```\n\n#### Examples\n\n```\n> (bit:rh [%f s=%.y e=-24 a=205])\n.~~1.22e-5\n```\n\n---\n\n### `++add:rh`\n\nProduces the sum of `a` plus `b`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n`b` is a `@rh`.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  add  ~/  %add\n  |=  [a=@rh b=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (add:ma a b)\n```\n\n#### Examples\n\n```\n> (add:rh .~~1.82e2 .~~1.02e2)\n.~~2.84e2\n```\n\n---\n\n### `++sub:rh`\n\nSubtract\n\nProduces the difference of `a` minus `b`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n`b` is a `@rh`.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  sub  ~/  %sub\n  |=  [a=@rh b=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (sub:ma a b)\n```\n\n#### Examples\n\n```\n> (sub:rh .~~1.821e2 .~~1.051e2)\n.~~7.7e1\n\n> (sub:rh .~~1.821e2 .~~6.051e2)\n.~~-4.228e2\n```\n\n---\n\n### `++mul:rh`\n\nMultiply\n\nProduces the product of `a` times `b`.\n\n#### Accepts\n\n`a` is a `@rh`, a quad-precision float.\n\n`b` is a `@rh`.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  mul  ~/  %mul\n  |=  [a=@rh b=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (mul:ma a b)\n```\n\n#### Examples\n\n```\n> (mul:rh .~~1.821e1 .~~-1.05102e2)\n.~~-1.913e3\n```\n\n---\n\n### `++div:rh`\n\nDivide\n\nProduces the product of `a` divided by `b`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n`b` is a `@rh`.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  div  ~/  %div\n  |=  [a=@rh b=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (div:ma a b)\n```\n\n#### examples\n\n```\n> (div:rh .~~1.821e3 .~~1.05102e2)\n.~~1.731e1\n```\n\n---\n\n### `++fma:rh`\n\nFused multiply-add\n\nProduces the sum of `c` plus the product of `a` multiplied by `b`;\n`(a * b) + c`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n`b` is a `@rh`.\n\n`c` is a `@rh`.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  fma  ~/  %fma\n  |=  [a=@rh b=@rh c=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (fma:ma a b c)\n```\n\n#### Examples\n\n```\n> (fma:rh .~~1.821e4 .~~-1.05102e2 .~~6.2044e3)\n.~~-6.55e4\n```\n\n---\n\n### `++sqt:rh`\n\nSquare root\n\nProduces the square root of `a`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  sqt  ~/  %sqt\n  |=  [a=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (sqt:ma a)\n```\n\n#### Example\n\n```hoon\n> (sqt:rh .~~6.24e4)\n.~~2.498e2\n```\n\n---\n\n### `++lth:rh`\n\nLess than\n\nTests whether `a` is less than `b`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n`b` is a `@rh`.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  lth  ~/  %lth\n  |=  [a=@rh b=@rh]\n  ~_  leaf+\"rh-fail\"\n  (lth:ma a b)\n```\n\n#### Examples\n\n```\n> (lth:rh .~~1.2e5 (mul:rh .~~9.02e2 .~~7.114e2))\n%.n\n\n> (lth:rh .~~1.2e3 (mul:rh .~~9.02e1 .~~7.114e2))\n%.y\n```\n\n---\n\n### `++lte:rh`\n\nLess than or equal\n\nTests whether `a` is less than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n`b` is a `@rh`.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  lte  ~/  %lte\n  |=  [a=@rh b=@rh]\n  ~_  leaf+\"rh-fail\"\n  (lte:ma a b)\n```\n\n#### Examples\n\n```\n> (lte:rh .~~1.2e5 (mul:rh .~~9.02e2 .~~7.114e2))\n%.n\n\n> (lte:rh .~~1.2e3 (mul:rh .~~9.02e1 .~~7.114e2))\n%.y\n\n> (lte:rh .~~1.2e3 .~~1.2e3)\n%.y\n```\n\n---\n\n### `++equ:rh`\n\nEquals\n\nTests whether `a` is equal to `b`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n`b` is a `@rh`.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  equ  ~/  %equ\n  |=  [a=@rh b=@rh]\n  ~_  leaf+\"rh-fail\"\n  (equ:ma a b)\n```\n\n#### Examples\n\n```\n> (equ:rh .~~1.24e4 .~~1.24e4)\n%.y\n\n> (equ:rh .~~2.24e4 .~~1.24e4)\n%.n\n```\n\n---\n\n### `++gte:rh`\n\nGreater than or equal\n\nTests whether `a` is greater than or equal to `b`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n`b` is a `@rh`.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  gte  ~/  %gte\n  |=  [a=@rh b=@rh]\n  ~_  leaf+\"rh-fail\"\n  (gte:ma a b)\n```\n\n#### Examples\n\n```\n> (gte:rh .~~1.24e4 .~~1.24e4)\n%.y\n\n> (gte:rh .~~2.24e4 .~~1.24e4)\n%.y\n\n> (gte:rh .~~1.24e4 .~~2.24e4)\n%.n\n```\n\n---\n\n### `++gth:rh`\n\nTests whether `a` is greater than `b`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n`b` is a `@rh`.\n\n#### Produces\n\nA `@rh`.\n\n#### Source\n\n```hoon\n++  gth  ~/  %gth\n  |=  [a=@rh b=@rh]\n  ~_  leaf+\"rh-fail\"\n  (gth:ma a b)\n```\n\n#### Examples\n\n```\n> (gth:rh .~~1.24e4 .~~1.244e4)\n%.n\n\n> (gth:rh .~~2.24e4 .~~1.24e4)\n%.y\n\n> (gth:rh .~~1.24e4 .~~2.24e4)\n%.n\n```\n\n---\n\n### `++tos:rh`\n\n`@rh` to `@rs`\n\nConverts `@` from `@rh` to `@rs`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n#### Produces\n\nA `@rs`, a single-precision float.\n\n#### Source\n\n```hoon\n++  tos\n  |=  [a=@rh]  (bit:rs (sea a))\n```\n\n#### Examples\n\n```\n> (tos:rh .~~2.5e2)\n.2.5e2\n```\n\n---\n\n### `++fos:rh`\n\n`@rs` to `@rh`\n\nConverts `@` from `@rs` to `@rh`.\n\n#### Accepts\n\n`a` is a `@rs`, a single-precision float.\n\n#### Produces\n\nA `@rh`, a half-precision float.\n\n#### Source\n\n```hoon\n++  fos\n  |=  [a=@rs]  (bit (sea:rs a))\n```\n\n#### Examples\n\n```\n> (fos:rh .2.5e2)\n.~~2.5e2\n```\n\n---\n\n### `++sun:rh`\n\nUnsigned integer to `@rh`\n\nConverts `a` from an unsigned integer to `@rh`.\n\n#### Accepts\n\n`a` is a `@u`, an unsigned integer.\n\n#### Produces\n\nA `@rh`, a half-precision float.\n\n#### Source\n\n```hoon\n++  sun  |=  [a=@u]  ^-  @rh  (sun:ma a)\n```\n\n#### Examples\n\n```\n> (sun:rh 205)\n.~~2.05e2\n```\n\n---\n\n### `++san:rh`\n\nSigned integer to `@rh`\n\nConverts `a` from a signed integer to `@rh`.\n\n#### Accepts\n\n`a` is a `@s`, a signed integer.\n\n#### Produces\n\nA `@rh`, a half-precision float.\n\n#### Source\n\n```hoon\n++  san  |=  [a=@s]  ^-  @rh  (san:ma a)\n```\n\n#### Examples\n\n```\n> (san:rh -205)\n.~~-2.05e2\n```\n\n---\n\n### `++sig:rh`\n\nGet sign\n\nProduces the sign of `a`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n#### Produces\n\nA `flag`.\n\n#### Source\n\n```hoon\n++  sig  |=  [a=@rh]  ^-  ?  (sig:ma a)\n```\n\n#### Examples\n\n```\n> (sig:rh .~~-2.05e2)\n%.n\n```\n\n---\n\n### `++exp:rh`\n\nGet exponent\n\nGets the exponent of `a`.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n#### Produces\n\nA `@s`, a signed integer.\n\n#### Source\n\n```hoon\n++  exp  |=  [a=@rh]  ^-  @s  (exp:ma a)\n```\n\n#### Examples\n\n```\n> (exp:rh .~~-2.05e2)\n--7\n```\n\n---\n\n### `++toi:rh`\n\nRound to integer\n\nRounds `a` to the nearest integer.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n#### Produces\n\nA `unit` of `@s`.\n\n#### Source\n\n```hoon\n++  toi  |=  [a=@rh]  ^-  (unit @s)  (toi:ma a)\n```\n\n#### Examples\n\n```\n> (toi:rh .~~-2.085e2)\n[~ u=-208]\n\n> (toi:rh .~~-2.08e2)\n[~ u=-208]\n```\n\n---\n\n### `++drg:rh`\n\n`@rh` to decimal float\n\nProduces the decimal form of `a` using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.\n\n#### Accepts\n\n`a` is a `@rh`, a half-precision float.\n\n#### Produces\n\nA `dn`.\n\n#### Source\n\n```hoon\n++  drg  |=  [a=@rh]  ^-  dn  (drg:ma a)\n```\n\n#### Examples\n\n```\n> (drg:rh .~~-2.085e2)\n[%d s=%.n e=-1 a=2.085]\n\n> (drg:rh .~~-2.08e2)\n[%d s=%.n e=--0 a=208]\n```\n\n---\n\n### `++grd:rh`\n\nDecimal float to `@rh`\n\nConverts `a` from `dn` to `@rh`.\n\n#### Accepts\n\n`a` is `dn`.\n\n`a` is a `@rh`.\n\n#### Produces\n\nA `@rh`, a a half-precision float.\n\n#### Source\n\n```hoon\n++  grd  |=  [a=dn]  ^-  @rh  (grd:ma a)\n```\n\n#### Examples\n\n```\n> (grd:rh [%d s=%.n e=--0 a=343])\n.~~-3.43e2\n```\n\n---\n",
    "year": "## `++year`\n\nDate to `@da`\n\nAccept a parsed date of form `[[a=? y=@ud] m=@ud t=tarp]` and produce\nits `@da` representation.\n\n#### Accepts\n\n`det` is a `date`\n\n#### Produces\n\nA `@da`.\n\n#### Source\n\n```hoon\n++  year\n  |=  det=date\n  ^-  @da\n  =+  ^=  yer\n      ?:  a.det\n        (add 292.277.024.400 y.det)\n      (sub 292.277.024.400 (dec y.det))\n  =+  day=(yawn yer m.det d.t.det)\n  (yule day h.t.det m.t.det s.t.det f.t.det)\n```\n\n#### Examples\n\n```\n> (year [[a=%.y y=2.014] m=8 t=[d=4 h=20 m=4 s=57 f=~[0xd940]]])\n~2014.8.4..20.04.57..d940\n```\n\n---\n",
    "yore": "## `++yore`\n\nDate from atomic date\n\nProduces a `date` from a `@da`.\n\n#### Accepts\n\n`now` is a time atom, `@da`.\n\n#### Produces\n\nA `date`.\n\n#### Source\n\n```hoon\n++  yore\n  |=  now=@da\n  ^-  date\n  =+  rip=(yell now)\n  =+  ger=(yall d.rip)\n  :-  ?:  (gth y.ger 292.277.024.400)\n        [a=& y=(sub y.ger 292.277.024.400)]\n      [a=| y=+((sub 292.277.024.400 y.ger))]\n  [m.ger d.ger h.rip m.rip s.rip f.rip]\n```\n\n#### Examples\n\n```\n> (yore ~2014.6.6..21.09.15..0a16)\n[[a=%.y y=2.014] m=6 t=[d=6 h=21 m=9 s=15 f=~[0xa16]]]\n```\n\n---\n",
    "yell": "## `++yell`\n\nTarp from atomic date\n\nProduce a [`$tarp`](/reference/hoon/stdlib/2q#tarp) time format from a`@da`.\n\n#### Accepts\n\n`now` is a `@da`.\n\n#### Produces\n\nA `tarp`.\n\n#### Source\n\n```hoon\n++  yell\n  |=  now=@d\n  ^-  tarp\n  =+  sec=(rsh 6 now)\n  =+  ^=  fan\n      =+  [muc=4 raw=(end 6 now)]\n      |-  ^-  (list @ux)\n      ?:  |(=(0 raw) =(0 muc))\n        ~\n      =>  .(muc (dec muc))\n      [(cut 4 [muc 1] raw) $(raw (end [4 muc] raw))]\n  =+  day=(div sec day:yo)\n  =>  .(sec (mod sec day:yo))\n  =+  hor=(div sec hor:yo)\n  =>  .(sec (mod sec hor:yo))\n  =+  mit=(div sec mit:yo)\n  =>  .(sec (mod sec mit:yo))\n  [day hor mit sec fan]\n```\n\n#### Examples\n\n```\n> (yell ~2014.3.20..05.42.53..7456)\n[d=106.751.991.820.094 h=5 m=42 s=53 f=~[0x7456]]\n\n> (yell ~2014.6.9..19.09.40..8b66)\n[d=106.751.991.820.175 h=19 m=9 s=40 f=~[0x8b66]]\n\n> (yell ~1776.7.4)\n[d=106.751.991.733.273 h=0 m=0 s=0 f=~]\n```\n\n---\n",
    "yule": "## `++yule`\n\nDaily time to time atom\n\nAccepts a [`$tarp`](/reference/hoon/stdlib/2q#tarp), a parsed daily time,\nand produces a `@da`.\n\n#### Accepts\n\n`rip` is a `tarp`.\n\n#### Produces\n\nA time atom, `@da`.\n\n#### Source\n\n```hoon\n++  yule\n  |=  rip=tarp\n  ^-  @d\n  =+  ^=  sec  ;:  add\n                 (mul d.rip day:yo)\n                 (mul h.rip hor:yo)\n                 (mul m.rip mit:yo)\n                 s.rip\n               ==\n  =+  ^=  fac  =+  muc=4\n               |-  ^-  @\n               ?~  f.rip\n                 0\n               =>  .(muc (dec muc))\n               (add (lsh [4 muc] i.f.rip) $(f.rip t.f.rip))\n  (con (lsh 6 sec) fac)\n```\n\n#### Examples\n\n```\n> =murica (yell ~1776.7.4)\n\n> murica\n[d=106.751.991.733.273 h=0 m=0 s=0 f=~]\n\n> (yule murica)\n0x8000000b62aaf5800000000000000000\n\n> `@da`(yule murica)\n~1776.7.4\n\n> `@da`(yule (yell ~2014.3.20..05.42.53..7456))\n~2014.3.20..05.42.53..7456\n\n> `tarp`[31 12 30 0 ~]\n[d=31 h=12 m=30 s=0 f=~]\n\n> `@dr`(yule `tarp`[31 12 30 0 ~])\n~d31.h12.m30\n```\n\n---\n",
    "yall": "## `++yall`\n\nTime since beginning of time\n\nProduce the date tuple of `[y=@ud m=@ud d=@ud]` of the year, month, and\nday from a number of days from the beginning of the Gregorian calendar.\n\n#### Accepts\n\n`day` is a `@ud`.\n\n#### Produces\n\nA cell of unsigned decimals.\n\n#### Source\n\n```hoon\n++  yall\n  |=  day=@ud\n  ^-  [y=@ud m=@ud d=@ud]\n  =+  [era=0 cet=0 lep=*?]\n  =>  .(era (div day era:yo), day (mod day era:yo))\n  =>  ^+  .\n      ?:  (lth day +(cet:yo))\n        .(lep &, cet 0)\n      =>  .(lep |, cet 1, day (sub day +(cet:yo)))\n      .(cet (add cet (div day cet:yo)), day (mod day cet:yo))\n  =+  yer=(add (mul 400 era) (mul 100 cet))\n  |-  ^-  [y=@ud m=@ud d=@ud]\n  =+  dis=?:(lep 366 365)\n  ?.  (lth day dis)\n    =+  ner=+(yer)\n    $(yer ner, day (sub day dis), lep =(0 (end [0 2] ner)))\n  |-  ^-  [y=@ud m=@ud d=@ud]\n  =+  [mot=0 cah=?:(lep moy:yo moh:yo)]\n  |-  ^-  [y=@ud m=@ud d=@ud]\n  =+  zis=(snag mot cah)\n  ?:  (lth day zis)\n    [yer +(mot) +(day)]\n  $(mot +(mot), day (sub day zis))\n```\n\n#### Examples\n\n```\n> (yall 198)\n[y=0 m=7 d=17]\n\n> (yall 90.398)\n[y=247 m=7 d=3]\n\n> (yall 0)\n[y=0 m=1 d=1]\n```\n\n---\n",
    "yawn": "## `++yawn`\n\nDays since beginning of time\n\nInverse of `yall`, computes number of days A.D. from y/m/d date as the\ntuple `[yer=@ud mot=@ud day=@ud]`.\n\n#### Accepts\n\n`yer` is an unsigned decimal.\n\n`mon` is an unsigned decimal.\n\n`day` is an unsigned decimal.\n\n#### Produces\n\nAn unsigned decimal.\n\n#### Source\n\n```hoon\n++  yawn\n  |=  [yer=@ud mot=@ud day=@ud]\n  ^-  @ud\n  =>  .(mot (dec mot), day (dec day))\n  =>  ^+  .\n      %=    .\n          day\n        =+  cah=?:((yelp yer) moy:yo moh:yo)\n        |-  ^-  @ud\n        ?:  =(0 mot)\n          day\n        $(mot (dec mot), cah (slag 1 cah), day (add day (snag 0 cah)))\n      ==\n  |-  ^-  @ud\n  ?.  =(0 (mod yer 4))\n    =+  ney=(dec yer)\n    $(yer ney, day (add day ?:((yelp ney) 366 365)))\n  ?.  =(0 (mod yer 100))\n    =+  nef=(sub yer 4)\n    $(yer nef, day (add day ?:((yelp nef) 1.461 1.460)))\n  ?.  =(0 (mod yer 400))\n    =+  nec=(sub yer 100)\n    $(yer nec, day (add day ?:((yelp nec) 36.525 36.524)))\n  (add day (mul (div yer 400) (add 1 (mul 4 36.524))))\n```\n\n#### Examples\n\n```\n> (yawn 2.018 7 4)\n737.244\n\n> (yawn 1.776 7 4)\n648.856\n\n> (yawn 1.990 10 11)\n727.116\n```\n\n---\n",
    "yelp": "## `++yelp`\n\nLeap year?\n\nDetermines whether a year is a leap year. Produces a flag.\n\n#### Accepts\n\n`yer` is an unsigned decimal.\n\n#### Produces\n\nA flag.\n\n#### Source\n\n```hoon\n++  yelp\n  |=  yer=@ud  ^-  ?\n  &(=(0 (mod yer 4)) |(!=(0 (mod yer 100)) =(0 (mod yer 400))))\n```\n\n#### Examples\n\n```\n> (yelp 2.014)\n%.n\n\n> (yelp 2.008)\n%.y\n\n> (yelp 0)\n%.y\n\n> (yelp 14.011)\n%.n\n```\n\n---\n",
    "yo": "## `++yo`\n\nTime constants core\n\nCore whose arms contain constants for interacting with earth time.\n\n#### Source\n\n```hoon\n++  yo\n```\n\n---\n\n### `++cet:yo`\n\nDays in a century\n\nDerived by multiplying the number of days in a year\n(365) by the number of years in a century (100), then adding the number\ndays from leap-years in a century (24).\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  cet  36.524\n```\n\n#### Examples\n\n```\n> cet:yo\n36.524\n\n> (add 365 cet:yo)\n36.889\n\n> (sub (add 24 (mul 100 365)) cet:yo)\n0\n```\n\n---\n\n### `++day:yo`\n\nSeconds in day\n\nThe number of seconds in a day.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  day  86.400\n```\n\n#### Examples\n\n```\n> day:yo\n86.400\n\n> (add 60 day:yo)\n86.460\n```\n\n---\n\n### `++era:yo`\n\nLeap-year period\n\nThe number of days in a 400-year period, arrived at by multiplying `cet` by four\nand adding one. This is done because every 400 years, there is a leap-year where\nthere would otherwise not be.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  era  146.097\n```\n\n#### Examples\n\n```\n> era:yo\n146.097\n\n> (sub era:yo (mul 4 cet:yo))\n1\n```\n\n#### Discussion\n\nA year is a leap-year if:\n\n- it's divisible by 4;\n- **unless** it's divisible by 100;\n- **or** if it's divisible by 400.\n\n---\n\n### `++hor:yo`\n\nSeconds in hour\n\nThe number of seconds in an hour. Derived by multiplying the number of\nseconds in a minute by the minutes in an hour.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  hor  3.600\n```\n\n#### Examples\n\n```\n> hor:yo\n3.600\n\n> (div hor:yo 60)\n60\n```\n\n---\n\n### `++jes:yo`\n\nMaximum 64-bit timestamp\n\nThis is the number of days (starting from 1970) that can be represented in a\n64-bit timestamp. Derived by multiplying `era:yo` by 730,692,561.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  jes  106.751.991.084.417\n```\n\n#### Examples\n\n```\n> jes:yo\n106.751.991.084.417\n```\n\n#### Discussion\n\nThe date is December 4, 292,277,026,596.\n\n---\n\n### `++mit:yo`\n\nSeconds in minute\n\nThe number of seconds in a minute.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  mit  60\n```\n\n#### Examples\n\n```\n> mit:yo\n60\n```\n\n---\n\n### `++moh:yo`\n\nDays in month\n\nThe days in each month of the Gregorian common year. A list of unsigned\ndecimal atoms (Either 28, 30, or 31) denoting the number of days in the\nmonth at the year at that index.\n\n#### Produces\n\nA `list` of `@ud`\n\n#### Source\n\n```hoon\n++  moh  `(list @ud)`[31 28 31 30 31 30 31 31 30 31 30 31 ~]\n```\n\n#### Examples\n\n```\n> moh:yo\n~[31 28 31 30 31 30 31 31 30 31 30 31]\n\n> (snag 4 moh:yo)\n31\n```\n\n---\n\n### `++moy:yo`\n\nDays in months of leap-year\n\nThe days in each month of the Gregorian leap-year. A list of unsigned\ndecimal atoms (Either 29, 30, or 31) denoting the number of days in the\nmonth at the leap-year at that index.\n\n#### Produces\n\nA `list` of `@ud`.\n\n#### Source\n\n```hoon\n++  moy  `(list @ud)`[31 29 31 30 31 30 31 31 30 31 30 31 ~]\n```\n\n#### Examples\n\n```\n> moy:yo\n~[31 29 31 30 31 30 31 31 30 31 30 31]\n\n> (snag 1 moy:yo)\n29\n```\n\n---\n\n### `++qad:yo`\n\nSeconds in 4 years\n\nThe number of seconds in four years. Derived by adding one second to the\nnumber of seconds in four years.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  qad  126.144.001\n```\n\n#### Examples\n\n```\n> qad:yo\n126.144.001\n```\n\n---\n\n### `++yer:yo`\n\nSeconds in year\n\nThe number of seconds in a year. Derived by multiplying the number of\nseconds in a day by 365.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  yer  31.536.000\n```\n\n#### Examples\n\n```\n> yer:yo\n31.536.000\n```\n\n---\n",
    "shad": "## `++shad`\n\nDouble SHA-256\n\nProduces an atom that is twice-hashed with `shax`, the SHA-256 cryptographic\nhash algorithm.\n\n#### Accepts\n\n`ruz` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  shad  |=(ruz=@ (shax (shax ruz)))\n```\n\n#### Examples\n\n```\n> `@uw`(shad 11)\n0w2Rt.J1gzO.JjsQc.0Komy.DYUUO.27koh.QxwE0.Qgwt7.EPGCi\n```\n\n---\n",
    "shaf": "## `++shaf`\n\nHalf SHA-256\n\nProduces a 128-bit atom by performing the [bitwise\nXOR](/reference/hoon/stdlib/2d) on the first and last halves of the 256-bit\nsalted hash `shas`.\n\n#### Accepts\n\n`sal` is an atom.\n\n`ruz` is an atom.\n\n#### Source\n\n```hoon\n++  shaf\n  |=  [sal=@ ruz=@]\n  =+  haz=(shas sal ruz)\n  (mix (end 7 haz) (rsh 7 haz))\n```\n\n#### Examples\n\n```\n> `@uw`(shaf 17 8)\n0wD.DSP0L.WUuQg.-A765.4RY-h\n```\n\n---\n",
    "sham": "## `++sham`\n\n128-bit noun hash\n\nProduces a 128-bit atom by hashing a noun `yux` with the [`+shaf`](#shaf)\nfunction. If that noun is a cell, then it is passed to the\n[`jam`](/reference/hoon/stdlib/2p#jam) function to produce an atom to be\nhashed.\n\n#### Accepts\n\n`yux` is a noun.\n\n#### Produces\n\nA `@uvH`.\n\n#### Source\n\n```hoon\n++  sham\n  |=  yux=*  ^-  @uvH  ^-  @\n  ?@  yux\n    (shaf %mash yux)\n  (shaf %sham (jam yux))\n```\n\n#### Examples\n\n```\n> (sham [2 4])\n0v3.71s52.4bqnp.ki2b8.9hhsp.2ufgg\n\n> (sham \"hello\")\n0v1.hg8mv.t7s3f.u4f8a.q5noe.dvqvh\n```\n\n---\n",
    "shas": "## `++shas`\n\nSalted hash\n\nProduces an atom by using SHA-256 plus a salt input. The [bitwise\nXOR](/reference/hoon/stdlib/2d) is performed on salt `sal` and the product\nof atom `ruz` hashed with SHA-256. The product of that logical operation is then\nitself hashed with SHA-256.\n\n#### Accepts\n\n`sal` is an atom.\n\n`ruz` is an atom.\n\n#### Source\n\n```hoon\n++  shas\n  ~/  %shas\n  |=  [sal=@ ruz=@]\n  (shax (mix sal (shax ruz)))\n```\n\n#### Examples\n\n```\n> `@uw`(shas 1 1)\n0w5hZ.Gim4L.9xKlU.jJJQr.2Bgi~.RHd5s.IwXuV.p43at.ZdsTY\n```\n\n---\n",
    "shax": "## `++shax`\n\nSHA-256\n\nProduces an atom by hashing an atom `ruz` with SHA-256.\n\n#### Sources\n\n```hoon\n++  shax\n  ~/  %shax\n  |=  ruz=@  ^-  @\n  (shay [(met 3 ruz) ruz])\n```\n\n#### Examples\n\n```\n> `@uw`(shax 'foo')\n0waXD.pCa8n.EHVEb.-3p70.JgxcQ.gj0tf.4mr-o.~6~Sx.HJ2oI\n```\n\n---\n",
    "shay": "## `++shay`\n\nSHA-256 with length\n\nProduces an atom by hashing an atom `ruz` with SHA-512. Another atom, `len`, is\nthe byte-length of the theoretical buffer represented by the atom.\n\n#### Accepts\n\n`len` is an atom.\n\n`ruz` is an atom.\n\n#### Source\n\n```hoon\n++  shay\n  ~/  %shay\n  |=  [len=@u ruz=@]  ^-  @\n  =>  .(ruz (cut 3 [0 len] ruz))\n  =+  [few==>(fe .(a 5)) wac=|=([a=@ b=@] (cut 5 [a 1] b))]\n  =+  [sum=sum.few ror=ror.few net=net.few inv=inv.few]\n  =+  ral=(lsh [0 3] len)\n  =+  ^=  ful\n      %+  can  0\n      :~  [ral ruz]\n          [8 128]\n          [(mod (sub 960 (mod (add 8 ral) 512)) 512) 0]\n          [64 (~(net fe 6) ral)]\n      ==\n  =+  lex=(met 9 ful)\n  =+  ^=  kbx  0xc671.78f2.bef9.a3f7.a450.6ceb.90be.fffa.\n                 8cc7.0208.84c8.7814.78a5.636f.748f.82ee.\n                 682e.6ff3.5b9c.ca4f.4ed8.aa4a.391c.0cb3.\n                 34b0.bcb5.2748.774c.1e37.6c08.19a4.c116.\n                 106a.a070.f40e.3585.d699.0624.d192.e819.\n                 c76c.51a3.c24b.8b70.a81a.664b.a2bf.e8a1.\n                 9272.2c85.81c2.c92e.766a.0abb.650a.7354.\n                 5338.0d13.4d2c.6dfc.2e1b.2138.27b7.0a85.\n                 1429.2967.06ca.6351.d5a7.9147.c6e0.0bf3.\n                 bf59.7fc7.b003.27c8.a831.c66d.983e.5152.\n                 76f9.88da.5cb0.a9dc.4a74.84aa.2de9.2c6f.\n                 240c.a1cc.0fc1.9dc6.efbe.4786.e49b.69c1.\n                 c19b.f174.9bdc.06a7.80de.b1fe.72be.5d74.\n                 550c.7dc3.2431.85be.1283.5b01.d807.aa98.\n                 ab1c.5ed5.923f.82a4.59f1.11f1.3956.c25b.\n                 e9b5.dba5.b5c0.fbcf.7137.4491.428a.2f98\n  =+  ^=  hax  0x5be0.cd19.1f83.d9ab.9b05.688c.510e.527f.\n                 a54f.f53a.3c6e.f372.bb67.ae85.6a09.e667\n  =+  i=0\n  |-  ^-  @\n  ?:  =(i lex)\n    (run 5 hax net)\n  =+  ^=  wox\n      =+  dux=(cut 9 [i 1] ful)\n      =+  wox=(run 5 dux net)\n      =+  j=16\n      |-  ^-  @\n      ?:  =(64 j)\n        wox\n      =+  :*  l=(wac (sub j 15) wox)\n              m=(wac (sub j 2) wox)\n              n=(wac (sub j 16) wox)\n              o=(wac (sub j 7) wox)\n          ==\n      =+  x=:(mix (ror 0 7 l) (ror 0 18 l) (rsh [0 3] l))\n      =+  y=:(mix (ror 0 17 m) (ror 0 19 m) (rsh [0 10] m))\n      =+  z=:(sum n x o y)\n      $(wox (con (lsh [5 j] z) wox), j +(j))\n  =+  j=0\n  =+  :*  a=(wac 0 hax)\n          b=(wac 1 hax)\n          c=(wac 2 hax)\n          d=(wac 3 hax)\n          e=(wac 4 hax)\n          f=(wac 5 hax)\n          g=(wac 6 hax)\n          h=(wac 7 hax)\n      ==\n  |-  ^-  @\n  ?:  =(64 j)\n    %=  ^$\n      i  +(i)\n      hax  %+  rep  5\n           :~  (sum a (wac 0 hax))\n               (sum b (wac 1 hax))\n               (sum c (wac 2 hax))\n               (sum d (wac 3 hax))\n               (sum e (wac 4 hax))\n               (sum f (wac 5 hax))\n               (sum g (wac 6 hax))\n               (sum h (wac 7 hax))\n           ==\n    ==\n  =+  l=:(mix (ror 0 2 a) (ror 0 13 a) (ror 0 22 a))    ::  s0\n  =+  m=:(mix (dis a b) (dis a c) (dis b c))            ::  maj\n  =+  n=(sum l m)                                       ::  t2\n  =+  o=:(mix (ror 0 6 e) (ror 0 11 e) (ror 0 25 e))    ::  s1\n  =+  p=(mix (dis e f) (dis (inv e) g))                 ::  ch\n  =+  q=:(sum h o p (wac j kbx) (wac j wox))            ::  t1\n  $(j +(j), a (sum q n), b a, c b, d c, e (sum d q), f e, g f, h g)\n```\n\n#### Examples\n\n```\n> `@uw`(shay 1 'hello')\n0w2eN.jupNe.OyGTU.-l0Co.SWSGS.fFD9k.HPHg1.-AYmg.CgaCG\n```\n\n```\n> `@uw`(shay 2 'hello')\n0wdUu.vKccX.fhjYt.tY2a4.B~sqA.KWNOM.1TnEu.8sQd8.LvyYT\n```\n\n#### Discussion\n\nBecause byte-strings can have leading zeros, but atoms cannot, we use `len`\nas a way of saying that the atom `ruz` is shorter than its representative\nbyte-string.\n\n---\n",
    "shaw": "## `++shaw`\n\nHash to nbits\n\nProduces an atom of `len` random bits by hashing `ruz` with the salted\nSHA-256 hash algorithm, where `sal` is the cryptographic salt.\n\n#### Accepts\n\n`sal` is an atom.\n\n`len` is an atom.\n\n`ruz` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  shaw\n  |=  [sal=@ len=@ ruz=@]\n  (~(raw og (shas sal (mix len ruz))) len)\n```\n\n#### Examples\n\n```\n> `@ub`(shaw 3 6 98)\n0b11.0111\n\n> `@ub`(shaw 2 6 98)\n0b11\n```\n\n---\n",
    "shaz": "## `++shaz`\n\nSHA-512\n\nProduces an atom by hashing an atom `ruz` with SHA-512.\n\n#### Accepts\n\n`ruz` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  shaz\n  |=  ruz=@  ^-  @\n  (shal [(met 3 ruz) ruz])\n```\n\n#### Examples\n\n```\n`@uw`(shaz 'hello')\n0w1.3MdWY.sS~QT.zFsbB.N7oQo.cSImU.56Xcu.DMtMq.mrSsc.z8WsY.pNABZ.Z~ySG.Ecysb.XCP5P.fuHjq.Jimnn.zPoHQ.AQD6r\n```\n\n---\n",
    "shal": "## `++shal`\n\nSHA-512 with length\n\nProduces an atom by hashing an atom `ruz` with SHA-512. Another atom, `len`, is\nthe byte-length of the theoretical buffer represented by the atom.\n\n#### Accepts\n\n`len` is an atom.\n\n`ruz` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  shal\n  ~/  %shal\n  |=  [len=@ ruz=@]  ^-  @\n  =>  .(ruz (cut 3 [0 len] ruz))\n  =+  [few==>(fe .(a 6)) wac=|=([a=@ b=@] (cut 6 [a 1] b))]\n  =+  [sum=sum.few ror=ror.few net=net.few inv=inv.few]\n  =+  ral=(lsh [0 3] len)\n  =+  ^=  ful\n      %+  can  0\n      :~  [ral ruz]\n          [8 128]\n          [(mod (sub 1.920 (mod (add 8 ral) 1.024)) 1.024) 0]\n          [128 (~(net fe 7) ral)]\n      ==\n  =+  lex=(met 10 ful)\n  =+  ^=  kbx  0x6c44.198c.4a47.5817.5fcb.6fab.3ad6.faec.\n                 597f.299c.fc65.7e2a.4cc5.d4be.cb3e.42b6.\n                 431d.67c4.9c10.0d4c.3c9e.be0a.15c9.bebc.\n                 32ca.ab7b.40c7.2493.28db.77f5.2304.7d84.\n                 1b71.0b35.131c.471b.113f.9804.bef9.0dae.\n                 0a63.7dc5.a2c8.98a6.06f0.67aa.7217.6fba.\n                 f57d.4f7f.ee6e.d178.eada.7dd6.cde0.eb1e.\n                 d186.b8c7.21c0.c207.ca27.3ece.ea26.619c.\n                 c671.78f2.e372.532b.bef9.a3f7.b2c6.7915.\n                 a450.6ceb.de82.bde9.90be.fffa.2363.1e28.\n                 8cc7.0208.1a64.39ec.84c8.7814.a1f0.ab72.\n                 78a5.636f.4317.2f60.748f.82ee.5def.b2fc.\n                 682e.6ff3.d6b2.b8a3.5b9c.ca4f.7763.e373.\n                 4ed8.aa4a.e341.8acb.391c.0cb3.c5c9.5a63.\n                 34b0.bcb5.e19b.48a8.2748.774c.df8e.eb99.\n                 1e37.6c08.5141.ab53.19a4.c116.b8d2.d0c8.\n                 106a.a070.32bb.d1b8.f40e.3585.5771.202a.\n                 d699.0624.5565.a910.d192.e819.d6ef.5218.\n                 c76c.51a3.0654.be30.c24b.8b70.d0f8.9791.\n                 a81a.664b.bc42.3001.a2bf.e8a1.4cf1.0364.\n                 9272.2c85.1482.353b.81c2.c92e.47ed.aee6.\n                 766a.0abb.3c77.b2a8.650a.7354.8baf.63de.\n                 5338.0d13.9d95.b3df.4d2c.6dfc.5ac4.2aed.\n                 2e1b.2138.5c26.c926.27b7.0a85.46d2.2ffc.\n                 1429.2967.0a0e.6e70.06ca.6351.e003.826f.\n                 d5a7.9147.930a.a725.c6e0.0bf3.3da8.8fc2.\n                 bf59.7fc7.beef.0ee4.b003.27c8.98fb.213f.\n                 a831.c66d.2db4.3210.983e.5152.ee66.dfab.\n                 76f9.88da.8311.53b5.5cb0.a9dc.bd41.fbd4.\n                 4a74.84aa.6ea6.e483.2de9.2c6f.592b.0275.\n                 240c.a1cc.77ac.9c65.0fc1.9dc6.8b8c.d5b5.\n                 efbe.4786.384f.25e3.e49b.69c1.9ef1.4ad2.\n                 c19b.f174.cf69.2694.9bdc.06a7.25c7.1235.\n                 80de.b1fe.3b16.96b1.72be.5d74.f27b.896f.\n                 550c.7dc3.d5ff.b4e2.2431.85be.4ee4.b28c.\n                 1283.5b01.4570.6fbe.d807.aa98.a303.0242.\n                 ab1c.5ed5.da6d.8118.923f.82a4.af19.4f9b.\n                 59f1.11f1.b605.d019.3956.c25b.f348.b538.\n                 e9b5.dba5.8189.dbbc.b5c0.fbcf.ec4d.3b2f.\n                 7137.4491.23ef.65cd.428a.2f98.d728.ae22\n  =+  ^=  hax  0x5be0.cd19.137e.2179.1f83.d9ab.fb41.bd6b.\n                 9b05.688c.2b3e.6c1f.510e.527f.ade6.82d1.\n                 a54f.f53a.5f1d.36f1.3c6e.f372.fe94.f82b.\n                 bb67.ae85.84ca.a73b.6a09.e667.f3bc.c908\n  =+  i=0\n  |-  ^-  @\n  ?:  =(i lex)\n    (run 6 hax net)\n  =+  ^=  wox\n      =+  dux=(cut 10 [i 1] ful)\n      =+  wox=(run 6 dux net)\n      =+  j=16\n      |-  ^-  @\n      ?:  =(80 j)\n        wox\n      =+  :*  l=(wac (sub j 15) wox)\n              m=(wac (sub j 2) wox)\n              n=(wac (sub j 16) wox)\n              o=(wac (sub j 7) wox)\n          ==\n      =+  x=:(mix (ror 0 1 l) (ror 0 8 l) (rsh [0 7] l))\n      =+  y=:(mix (ror 0 19 m) (ror 0 61 m) (rsh [0 6] m))\n      =+  z=:(sum n x o y)\n      $(wox (con (lsh [6 j] z) wox), j +(j))\n  =+  j=0\n  =+  :*  a=(wac 0 hax)\n          b=(wac 1 hax)\n          c=(wac 2 hax)\n          d=(wac 3 hax)\n          e=(wac 4 hax)\n          f=(wac 5 hax)\n          g=(wac 6 hax)\n          h=(wac 7 hax)\n      ==\n  |-  ^-  @\n  ?:  =(80 j)\n    %=  ^$\n      i  +(i)\n      hax  %+  rep  6\n           :~  (sum a (wac 0 hax))\n               (sum b (wac 1 hax))\n               (sum c (wac 2 hax))\n               (sum d (wac 3 hax))\n               (sum e (wac 4 hax))\n               (sum f (wac 5 hax))\n               (sum g (wac 6 hax))\n               (sum h (wac 7 hax))\n           ==\n    ==\n  =+  l=:(mix (ror 0 28 a) (ror 0 34 a) (ror 0 39 a))   ::  S0\n  =+  m=:(mix (dis a b) (dis a c) (dis b c))            ::  maj\n  =+  n=(sum l m)                                       ::  t2\n  =+  o=:(mix (ror 0 14 e) (ror 0 18 e) (ror 0 41 e))   ::  S1\n  =+  p=(mix (dis e f) (dis (inv e) g))                 ::  ch\n  =+  q=:(sum h o p (wac j kbx) (wac j wox))            ::  t1\n  $(j +(j), a (sum q n), b a, c b, d c, e (sum d q), f e, g f, h g)\n```\n\n#### Examples\n\n```\n> `@uw`(shal 1 'hello')\n0w2.nWO0R.zMAzH.OSWU1.apOje.19Mta.RE24o.4u~MB.wQuj4.NDdG6.0QZA0.w21Br.yQVhu.pFBII.Cdgvd.WT-bH.g51Yu.fL44y\n```\n\n```\n> `@uw`(shal 2 'hello')\n0w1.r3W4g.hae37.8YUFp.ntryr.DsQuY.rPsdm.p3Xjv.rayLz.DslEc.Lxvll.OJUc3.tZeLZ.TjUnu.XMyGr.82qPA.zl1y0.HbSpT\n```\n\n#### Discussion\n\nBecause byte-strings can have leading zeros, but atoms cannot, we use `len`\nas a way of saying that the atom `ruz` is shorter than its representative\nbyte-string.\n\n---\n",
    "shan": "## `++shan`\n\nSHA-1\n\nProduces an atom by hashing an atom `ruz` with SHA-1.\n\n#### Accepts\n\n`ruz` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  shan\n  |=  ruz=@\n  =+  [few==>(fe .(a 5)) wac=|=([a=@ b=@] (cut 5 [a 1] b))]\n  =+  [sum=sum.few ror=ror.few rol=rol.few net=net.few inv=inv.few]\n  =+  ral=(lsh [0 3] (met 3 ruz))\n  =+  ^=  ful\n      %+  can  0\n      :~  [ral ruz]\n          [8 128]\n          [(mod (sub 960 (mod (add 8 ral) 512)) 512) 0]\n          [64 (~(net fe 6) ral)]\n      ==\n  =+  lex=(met 9 ful)\n  =+  kbx=0xca62.c1d6.8f1b.bcdc.6ed9.eba1.5a82.7999\n  =+  hax=0xc3d2.e1f0.1032.5476.98ba.dcfe.efcd.ab89.6745.2301\n  =+  i=0\n  |-\n  ?:  =(i lex)\n    (rep 5 (flop (rip 5 hax)))\n  =+  ^=  wox\n      =+  dux=(cut 9 [i 1] ful)\n      =+  wox=(rep 5 (turn (rip 5 dux) net))\n      =+  j=16\n      |-  ^-  @\n      ?:  =(80 j)\n        wox\n      =+  :*  l=(wac (sub j 3) wox)\n              m=(wac (sub j 8) wox)\n              n=(wac (sub j 14) wox)\n              o=(wac (sub j 16) wox)\n          ==\n      =+  z=(rol 0 1 :(mix l m n o))\n      $(wox (con (lsh [5 j] z) wox), j +(j))\n  =+  j=0\n  =+  :*  a=(wac 0 hax)\n          b=(wac 1 hax)\n          c=(wac 2 hax)\n          d=(wac 3 hax)\n          e=(wac 4 hax)\n      ==\n  |-  ^-  @\n  ?:  =(80 j)\n    %=  ^$\n      i  +(i)\n      hax  %+  rep  5\n           :~\n               (sum a (wac 0 hax))\n               (sum b (wac 1 hax))\n               (sum c (wac 2 hax))\n               (sum d (wac 3 hax))\n               (sum e (wac 4 hax))\n           ==\n    ==\n  =+  fx=(con (dis b c) (dis (not 5 1 b) d))\n  =+  fy=:(mix b c d)\n  =+  fz=:(con (dis b c) (dis b d) (dis c d))\n  =+  ^=  tem\n      ?:  &((gte j 0) (lte j 19))\n        :(sum (rol 0 5 a) fx e (wac 0 kbx) (wac j wox))\n      ?:  &((gte j 20) (lte j 39))\n        :(sum (rol 0 5 a) fy e (wac 1 kbx) (wac j wox))\n      ?:  &((gte j 40) (lte j 59))\n        :(sum (rol 0 5 a) fz e (wac 2 kbx) (wac j wox))\n      :(sum (rol 0 5 a) fy e (wac 3 kbx) (wac j wox))\n  $(j +(j), a tem, b a, c (rol 0 30 b), d c, e d)\n```\n\n#### Examples\n\n```\n> `@uw`(shan 'hello')\n0waH.QNxTs.NuyyS.HXu3P.J8bdC.KGkdd\n```\n\n#### Discussion\n\nSHA-1 is a deprecated function; it is not considered secure.\n\n---\n",
    "og": "## `++og`\n\nContainer arm for SHA-256-powered random-number generation. Its sample `a` is an\natom that is used as a seed for the hash.\n\n#### Accepts\n\n`a` is an atom.\n\n#### Produces\n\nA core.\n\n#### Source\n\n```hoon\n++  og\n  ~/  %og\n  |_  a=@\n```\n\n#### Examples\n\n```\n> ~(. og 919)\n<4.wmp {a/@ud <54.tyv 119.olq 31.ohr 1.jmk $143>}>\n```\n\n#### Discussion\n\nNote that the product is deterministic; the seed will produce the same\nresult every time it is run. Use `eny`, 256 bits of entropy, for a\nnon-deterministic product.\n\n---\n\n### `++rad:og`\n\nRandom in range\n\nProduces a random number that is within the range of first `b` whole numbers,\nstarting at `0`.\n\n#### Accepts\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  rad\n  |=  b=@  ^-  @\n  ~_  leaf+\"rad-zero\"\n  ?<  =(0 b)\n  =+  c=(raw (met 0 b))\n  ?:((lth c b) c $(a +(a)))\n```\n\n#### Examples\n\n```\n> (~(rad og 5) 11)\n4\n\n> (~(rad og 758.716.593) 11)\n2\n\n> (~(rad og 1) 100.000)\n71.499\n\n> (~(rad og eny) 11)               ::  `eny` acts as a random sample\n7\n```\n\n---\n\n### `++rads:og`\n\nRandom continuation\n\nProduces a cell. The head of the cell is a random number that is within the\nrange of first `b` whole numbers, starting at `0`. The tail is a new core\nproduced from hashing the parent core with `(rad b)`.\n\n#### Accepts\n\n`b` is an atom.\n\n#### Produces\n\nA cell.\n\n#### Source\n\n```hoon\n++  rads\n  |=  b=@\n  =+  r=(rad b)\n  [r +>.$(a (shas %og-s (mix a r)))]\n```\n\n#### Examples\n\n```\n> (~(rads og 4) 10)\n[2 <4.wmp {a/@ <54.tyv 119.olq 31.ohr 1.jmk $143>}>]\n\n> =/  rng  ~(. og 7)\n    =^  a  rng  (rads:rng 10)\n    =^  b  rng  (rads:rng 10)\n    [a b]\n[2 8]\n```\n\n#### Discussion\n\nSince everything in Hoon is a pure function, we need to use tricks like this to\ngenerate separate random values from the same seed. Notice how we jump from\none `rads` function call to another in the above example.\n\n---\n\n### `++raw:og`\n\nRandom bits\n\nProduces an atom with a bitwidth `b` that is composed of random bits.\n\n#### Accepts\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  raw\n  ~/  %raw\n  |=  b=@  ^-  @\n  %+  can\n    0\n  =+  c=(shas %og-a (mix b a))\n  |-  ^-  (list [@ @])\n  ?:  =(0 b)\n    ~\n  =+  d=(shas %og-b (mix b (mix a c)))\n  ?:  (lth b 256)\n    [[b (end [0 b] d)] ~]\n  [[256 d] $(c d, b (sub b 256))]\n```\n\n#### Examples\n\n```\n> `@ud`(~(raw og 27) 4)\n0b1001\n\n> `@ub`(~(raw og 27) 3)\n0b0\n\n> `@ub`(~(raw og 11) 4)\n0b1111\n\n> `@ub`(~(raw og 11) 3)\n0b100\n```\n\n---\n\n### `++raws:og`\n\nRandom bits continuation\n\nProduces a cell. The head of the cell is an atom with a bitwidth `b` that is\ncomposed of random bits. The tail is a new core produced from hashing the\nparent core with `(raw b)`.\n\n#### Source\n\n```hoon\n++  raws\n  |=  b=@\n  =+  r=(raw b)\n  [r +>.$(a (shas %og-s (mix a r)))]\n```\n\n#### Examples\n\n```\n> `[@ub _og]`(~(raws og 7) 4)\n[0b1100 <4.wmp {a/@ <54.tyv 119.olq 31.ohr 1.jmk $143>}>]\n\n> =/  rng  ~(. og 7)\n          =^  a  rng  (rads:rng 4)\n          =^  b  rng  (rads:rng 4)\n          [`@ub`a `@ub`b]\n[0b10 0b1]\n```\n\n#### Discussion\n\nSince everything in Hoon is a pure function, we need to use tricks like this to\ngenerate separate random values from the same seed. Notice how we jump from\none `raws` function call to another in the above example.\n\n---\n",
    "un": "## `++un`\n\nReversible scrambling\n\nA core that contains arms that perform reversible scrambling operations.\nUsed in the `@p` phonetic base.\n\n#### Source\n\n```hoon\n++  un\n  |%\n```\n\n---\n\n### `++wren:un`\n\nConceal structure\n\nScrambles a byte-string `pyn` by adding the current position to each\nbyte, looking it up in an s-box, and then performing the XOR operation\non the result, pushing it forward. The inverse of `wred`.\n\n#### Accepts\n\n`pyn` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  wren\n  |=  pyn=@  ^-  @\n  =+  len=(met 3 pyn)\n  ?:  =(0 len)\n    0\n  =>  .(len (dec len))\n  =+  mig=(zaft (xafo len (cut 3 [len 1] pyn)))\n  %+  can  3\n  %-  flop  ^-  (list [@ @])\n  :-  [1 mig]\n  |-  ^-  (list [@ @])\n  ?:  =(0 len)\n    ~\n  =>  .(len (dec len))\n  =+  mog=(zyft :(mix mig (end 3 len) (cut 3 [len 1] pyn)))\n  [[1 mog] $(mig mog)]\n```\n\n#### Examples\n\n```\n> `@ux`(wren:un 'testing')\n0x30.bf6a.b9fe.7d8f\n\n> `@ux`'testing'\n0x67.6e69.7473.6574\n\n> `@da`(wred:un (wren:un ~2001.2.5))\n~2001.2.5\n```\n\n---\n\n### `++wred:un`\n\nRestore structure\n\nUnscrambles a byte-string `cry` by subtracting the current position from\neach byte, looking it up in an s-box, and performing the XOR operation\non the result, pushing it forward. The inverse of `wren`.\n\n#### Accepts\n\n`cry` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  wred\n  |=  cry=@  ^-  @\n  =+  len=(met 3 cry)\n  ?:  =(0 len)\n    0\n  =>  .(len (dec len))\n  =+  mig=(cut 3 [len 1] cry)\n  %+  can  3\n  %-  flop  ^-  (list [@ @])\n  :-  [1 (xaro len (zart mig))]\n  |-  ^-  (list [@ @])\n  ?:  =(0 len)\n    ~\n  =>  .(len (dec len))\n  =+  mog=(cut 3 [len 1] cry)\n  [[1 :(mix mig (end 3 len) (zyrt mog))] $(mig mog)]\n```\n\n#### Examples\n\n```\n> (wred:un 0x30.bf6a.b9fe.7d8f)\n29.113.321.805.538.676\n\n> `@t`(wred:un 0x30.bf6a.b9fe.7d8f)\n'testing'\n\n> (wred:un (wren:un 200.038.426))\n200.038.426\n```\n\n---\n\n### `++xafo:un`\n\nAdd modulo 255\n\nProduces the sum of two atoms modulo 255, encoded as a nonzero byte. The inverse\nof `xaro`.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  xafo  |=([a=@ b=@] +((mod (add (dec b) a) 255)))\n```\n\n#### Examples\n\n```\n> (xafo:un 5 6)\n11\n\n> (xafo:un 256 20)\n21\n\n> (xafo:un 256 (xaro:un 256 20))\n20\n```\n\n---\n\n### `++xaro:un`\n\nSubtract modulo 255\n\nProduces the sum of two atoms modulo 255, encoded as a nonzero byte. The inverse\nof `xafo`.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  xaro  |=([a=@ b=@] +((mod (add (dec b) (sub 255 (mod a 255))) 255)))\n```\n\n#### Examples\n\n```\n> (xaro:un 17 57)\n40\n\n> (xaro:un 265 12)\n2\n\n> (xaro:un 256 (xafo:un 256 20))\n20\n```\n\n---\n\n### `++zaft:un`\n\nLook up in 255 sub box\n\nLooks up a nonzero byte `a` in a substitution box with 255 values, producing a\nunique nonzero byte. The inverse of `zart`.\n\n#### Accepts\n\n`a` is an atom of one byte in length.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  zaft\n  |=  a=@D\n  =+  ^=  b\n      0xcc.75bc.86c8.2fb1.9a42.f0b3.79a0.92ca.21f6.1e41.cde5.fcc0.\n      7e85.51ae.1005.c72d.1246.07e8.7c64.a914.8d69.d9f4.59c2.8038.\n      1f4a.dca2.6fdf.66f9.f561.a12e.5a16.f7b0.a39f.364e.cb70.7318.\n      1de1.ad31.63d1.abd4.db68.6a33.134d.a760.edee.5434.493a.e323.\n      930d.8f3d.3562.bb81.0b24.43cf.bea5.a6eb.52b4.0229.06b2.6704.\n      78c9.45ec.d75e.58af.c577.b7b9.c40e.017d.90c3.87f8.96fa.1153.\n      0372.7f30.1c32.ac83.ff17.c6e4.d36d.6b55.e2ce.8c71.8a5b.b6f3.\n      9d4b.eab5.8b3c.e7f2.a8fe.9574.5de0.bf20.3f15.9784.9939.5f9c.\n      e609.564f.d8a4.b825.9819.94aa.2c08.8e4c.9b22.477a.2840.3ed6.\n      3750.6ef1.44dd.89ef.6576.d00a.fbda.9ed2.3b6c.7b0c.bde9.2ade.\n      5c88.c182.481a.1b0f.2bfd.d591.2726.57ba\n  (cut 3 [(dec a) 1] b)\n```\n\n#### Examples\n\n```\n> (zaft:un 0x12)\n42\n\n> (zaft:un 0xff)\n204\n> `@ux`(zart:un 204)\n0xff\n\n> (zaft:un 0x0)\n! decrement-underflow\n! exit\n```\n\n---\n\n### `++zart:un`\n\nReverse look up in 255 sub box\n\nLooks up the index of a nonzero byte `a` in the substitution box with 255\nvalues, producing a unique nonzero byte. The inverse of `zaft`.\n\n#### Accepts\n\n`a` is an atom of one byte in length.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  zart\n  |=  a=@D\n  =+  ^=  b\n      0x68.4f07.ea1c.73c9.75c2.efc8.d559.5125.f621.a7a8.8591.5613.\n      dd52.40eb.65a2.60b7.4bcb.1123.ceb0.1bd6.3c84.2906.b164.19b3.\n      1e95.5fec.ffbc.f187.fbe2.6680.7c77.d30e.e94a.9414.fd9a.017d.\n      3a7e.5a55.8ff5.8bf9.c181.e5b6.6ab2.35da.50aa.9293.3bc0.cdc6.\n      f3bf.1a58.4130.f844.3846.744e.36a0.f205.789e.32d8.5e54.5c22.\n      0f76.fce7.4569.0d99.d26e.e879.dc16.2df4.887f.1ffe.4dba.6f5d.\n      bbcc.2663.1762.aed7.af8a.ca20.dbb4.9bc7.a942.834c.105b.c4d4.\n      8202.3e61.a671.90e6.273d.bdab.3157.cfa4.0c2e.df86.2496.f7ed.\n      2b48.2a9d.5318.a343.d128.be9c.a5ad.6bb5.6dfa.c5e1.3408.128d.\n      2c04.0339.97a1.2ff0.49d0.eeb8.6c0a.0b37.b967.c347.d9ac.e072.\n      e409.7b9f.1598.1d3f.33de.8ce3.8970.8e7a\n  (cut 3 [(dec a) 1] b)\n```\n\n#### Examples\n\n```\n> `@ux`(zart:un 204)\n0xff\n\n> `@ux`(zart:un 42)\n0x12\n\n> (zaft:un 0x12)\n42\n```\n\n---\n\n### `++zyft:un`\n\nLookup byte in 256 sub box\n\nLooks up a byte `a` in a substitution box with 256 values, producing a byte. The\ninverse of `zyrt`.\n\n#### Accepts\n\n`a` is an atom of one byte in length.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  zyft\n  |=  a=@D\n  =+  ^=  b\n      0xbb49.b71f.b881.b402.17e4.6b86.69b5.1647.115f.dddb.7ca5.\n        8371.4bd5.19a9.b092.605d.0d9b.e030.a0cc.78ba.5706.4d2d.\n        986a.768c.f8e8.c4c7.2f1c.effe.3cae.01c0.253e.65d3.3872.\n        ce0e.7a74.8ac6.daac.7e5c.6479.44ec.4143.3d20.4af0.ee6c.\n        c828.deca.0377.249f.ffcd.7b4f.eb7d.66f2.8951.042e.595a.\n        8e13.f9c3.a79a.f788.6199.9391.7fab.6200.4ce5.0758.e2f1.\n        7594.c945.d218.4248.afa1.e61a.54fb.1482.bea4.96a2.3473.\n        63c2.e7cb.155b.120a.4ed7.bfd8.b31b.4008.f329.fca3.5380.\n        9556.0cb2.8722.2bea.e96e.3ac5.d1bc.10e3.2c52.a62a.b1d6.\n        35aa.d05e.f6a8.0f3b.31ed.559d.09ad.f585.6d21.fd1d.8d67.\n        370b.26f4.70c1.b923.4684.6fbd.cf8b.5036.0539.9cdc.d93f.\n        9068.1edf.8f33.b632.d427.97fa.9ee1\n  (cut 3 [a 1] b)\n```\n\n#### Examples\n\n```\n> (zyft:un 0x12)\n57\n\n> (zyft:un 0x0)\n225\n\n> (zyft:un 0xff)\n187\n> `@ux`(zyrt:un 187)\n0xff\n```\n\n---\n\n### `++zyrt:un`\n\nReverse lookup byte in 256 sub box\n\nLooks up a byte `a` in a substitution box with 256 values, producing a byte.\nThe inverse of `zyft`.\n\n#### Accepts\n\n`a` is an atom of one byte in length.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  zyrt\n  |=  a=@D\n  =+  ^=  b\n      0x9fc8.2753.6e02.8fcf.8b35.2b20.5598.7caa.c9a9.30b0.9b48.\n        47ce.6371.80f6.407d.00dd.0aa5.ed10.ecb7.0f5a.5c3a.e605.\n        c077.4337.17bd.9eda.62a4.79a7.ccb8.44cd.8e64.1ec4.5b6b.\n        1842.ffd8.1dfb.fd07.f2f9.594c.3be3.73c6.2cb6.8438.e434.\n        8d3d.ea6a.5268.72db.a001.2e11.de8c.88d3.0369.4f7a.87e2.\n        860d.0991.25d0.16b9.978a.4bf4.2a1a.e96c.fa50.85b5.9aeb.\n        9dbb.b2d9.a2d1.7bba.66be.e81f.1946.29a8.f5d2.f30c.2499.\n        c1b3.6583.89e1.ee36.e0b4.6092.937e.d74e.2f6f.513e.9615.\n        9c5d.d581.e7ab.fe74.f01b.78b1.ae75.af57.0ec2.adc7.3245.\n        12bf.2314.3967.0806.31dc.cb94.d43f.493c.54a6.0421.c3a1.\n        1c4a.28ac.fc0b.26ca.5870.e576.f7f1.616d.905f.ef41.33bc.\n        df4d.225e.2d56.7fd6.1395.a3f8.c582\n  (cut 3 [a 1] b)\n```\n\n#### Examples\n\n```\n> `@ux`(zyrt:un 57)\n0x12\n\n> `@ux`(zyrt:un 225)\n0x0\n\n> `@ux`(zyrt:un 187)\n0xff\n> (zyft:un 0xff)\n187\n```\n\n---\n",
    "ob": "## `++ob`\n\nReversible scrambling, v3\n\nA core for performing reversible scrambling operations for the `@p` phonetic\nbase.\n\n#### Source\n\n```hoon\n++  ob\n  ~%  %ob  ..ob\n    ==\n      %fein  fein\n      %fynd  fynd\n    ==\n  |%\n```\n\n---\n\n### `++fein:ob`\n\nconceal structure, v3\n\n`+fein` conceals planet-sized atoms. The idea is that it should not be trivial\nto tell which planet a star has spawned under.\n\nPermutes atom `pyn` which fits into 17 to 32 bits, or if `pyn` fits\ninto 33 to 64 bits, does the same permutation on the low 32 bits only.\nOtherwise, passes `pyn` through unchanged.\n\n#### Accepts\n\n`pyn` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  fein\n  ~/  %fein\n  |=  pyn=@  ^-  @\n  ?:  &((gte pyn 0x1.0000) (lte pyn 0xffff.ffff))\n    (add 0x1.0000 (feis (sub pyn 0x1.0000)))\n  ?:  &((gte pyn 0x1.0000.0000) (lte pyn 0xffff.ffff.ffff.ffff))\n    =/  lo  (dis pyn 0xffff.ffff)\n    =/  hi  (dis pyn 0xffff.ffff.0000.0000)\n    %+  con  hi\n    $(pyn lo)\n  pyn\n```\n\n#### Examples\n\n```\n> (fein:ob 111.103)\n2.783.373.008\n\n> (fynd:ob 2.783.373.008)\n111.103\n```\n\n---\n\n### `++fynd:ob`\n\nRestore structure, v3\n\nRestores obfuscated values that have been enciphered with [+fein](#feinob).\n\nPermutes atom `cry` that fits into 17 to 32 bits, or permutes the low 32 bits of\n`cry` if it fits into 33 to 64 bits. Otherwise, passes the atom through\nunchanged. The inverse of the one applied by [`+fein`](#feinob).\n\n#### Accepts\n\n`cry` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  fynd\n  ~/  %fynd\n  |=  cry=@  ^-  @\n  ?:  &((gte cry 0x1.0000) (lte cry 0xffff.ffff))\n    (add 0x1.0000 (tail (sub cry 0x1.0000)))\n  ?:  &((gte cry 0x1.0000.0000) (lte cry 0xffff.ffff.ffff.ffff))\n    =/  lo  (dis cry 0xffff.ffff)\n    =/  hi  (dis cry 0xffff.ffff.0000.0000)\n    %+  con  hi\n    $(cry lo)\n  cry\n```\n\n#### Examples\n\n```\n> (fein:ob 111.103)\n2.783.373.008\n\n> (fynd:ob 2.783.373.008)\n111.103\n```\n\n---\n\n### `++feis:ob`\n\nFour-round generalised Feistel cipher over the domain [0, 2^32 - 2^16 - 1]\n\nSee: Black & Rogaway (2002), Ciphers for arbitrary finite domains.\n\nInverse of [`+tail`](#tailob).\n\n#### Accepts\n\n`m` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  feis\n  |=  m=@\n  ^-  @\n  (fee 4 0xffff 0x1.0000 (mul 0xffff 0x1.0000) eff m)\n```\n\n#### Examples\n\n```\n> (feis:ob 11)\n776.343.932\n\n> (tail:ob 776.343.932)\n11\n```\n\n---\n\n### `++tail:ob`\n\nReverse [`+feis`](#feisob)\n\nApplies the reverse of the Feistel cipher applied by `+feis`.\n\n#### Accepts\n\n`m` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  tail\n  |=  m=@\n  ^-  @\n  (feen 4 0xffff 0x1.0000 (mul 0xffff 0x1.0000) eff m)\n```\n\n#### Examples\n\n```\n> (feis:ob 11)\n776.343.932\n\n> (tail:ob 776.343.932)\n11\n```\n\n---\n\n### `++fee:ob`\n\n\"Fe\" in B&R (2002)\n\nA Feistel cipher given the following parameters:\n\n- `r`: Number of Feistel rounds.\n- `a`, `b`: Parameters such that `ab` >= `k`.\n- `k`: Value such that the domain of the cipher is [0, k - 1].\n- `prf`: A gate denoting a family of pseudorandom functions indexed by its first argument and taking its second argument as input.\n- `m`: An input value in the domain [0, k - 1].\n\n#### Accepts\n\n`r`, `a`, `b`, `k` are an atoms.\n\n`prft` is a gate: `$-([j=@ r=@] @)`.\n\n`m` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  fee\n  |=  [r=@ a=@ b=@ k=@ prf=$-([j=@ r=@] @) m=@]\n  ^-  @\n  =/  c  (fe r a b prf m)\n  ?:  (lth c k)\n    c\n  (fe r a b prf c)\n```\n\n---\n\n### `++feen:ob`\n\nReverse [`+fee`](#feeob)\n\n\"Fe^-1\" in B&R (2002). Reverses a Feistel cipher constructed with parameters as\ndescribed in `+fee`.\n\n#### Accepts\n\n`r`, `a`, `b`, and `k` are atoms.\n\n`prf` is a gate: `$-([j=@ r=@] @)`.\n\n`m` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  feen\n  |=  [r=@ a=@ b=@ k=@ prf=$-([j=@ r=@] @) m=@]\n  ^-  @\n  =/  c  (fen r a b prf m)\n  ?:  (lth c k)\n    c\n  (fen r a b prf c)\n```\n\n---\n\n### `+fe:ob`\n\nAn internal function to [`+fee`](#feeob).\n\nNote that this implementation differs slightly from the reference paper to\nsupport some legacy behaviour.\n\n#### Accepts\n\n`r`, `a`, and `b` are atoms.\n\n`prf` is a gate: `$-([j=@ r=@] @)`.\n\n`m` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  fe\n  |=  [r=@ a=@ b=@ prf=$-([j=@ r=@] @) m=@]\n  =/  j  1\n  =/  ell  (mod m a)\n  =/  arr  (div m a)\n  |-  ^-  @\n  ::\n  ?:  (gth j r)\n    ?.  =((mod r 2) 0)\n      (add (mul arr a) ell)\n    ::\n    :: Note that +fe differs from B&R (2002)'s \"fe\" below, as a previous\n    :: implementation of this cipher contained a bug such that certain inputs\n    :: could encipher to the same output.\n    ::\n    :: To correct these problem cases while also preserving the cipher's\n    :: legacy behaviour on most inputs, we check for a problem case (which\n    :: occurs when 'arr' is equal to 'a') and, if detected, use an alternate\n    :: permutation instead.\n    ::\n    ?:  =(arr a)\n      (add (mul arr a) ell)\n    (add (mul ell a) arr)\n  ::\n  =/  f  (prf (sub j 1) arr)\n  ::\n  =/  tmp\n    ?.  =((mod j 2) 0)\n      (mod (add f ell) a)\n    (mod (add f ell) b)\n  ::\n  $(j +(j), ell arr, arr tmp)\n```\n\n---\n\n### `++fen:ob`\n\nReverse [`+fe`](#feob)\n\nThis is an internal function to [`+feen`](#feenob)\n\nNote that this implementation differs slightly from the reference paper\nto support some legacy behaviour.\n\n#### Accepts\n\n`r`, `a` and `b` are atoms.\n\n`prf` is a gate: `$-([j=@ r=@] @)`.\n\n`m` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  fen\n  |=  [r=@ a=@ b=@ prf=$-([j=@ r=@] @) m=@]\n  =/  j  r\n  ::\n  =/  ahh\n    ?.  =((mod r 2) 0)\n      (div m a)\n    (mod m a)\n  ::\n  =/  ale\n    ?.  =((mod r 2) 0)\n      (mod m a)\n    (div m a)\n  ::\n  :: Similar to the comment in +fe, +fen differs from B&R (2002)'s \"fe^-1\"\n  :: here in order to preserve the legacy cipher's behaviour on most inputs.\n  ::\n  :: Here problem cases can be identified by 'ahh' equating with 'a'; we\n  :: correct those cases by swapping the values of 'ahh' and 'ale'.\n  ::\n  =/  ell\n    ?:  =(ale a)\n      ahh\n    ale\n  ::\n  =/  arr\n    ?:  =(ale a)\n      ale\n    ahh\n  ::\n  |-  ^-  @\n  ?:  (lth j 1)\n    (add (mul arr a) ell)\n  =/  f  (prf (sub j 1) ell)\n  ::\n  ::  Note that there is a slight deviation here to avoid dealing with\n  ::  negative values.  We add 'a' or 'b' to arr as appropriate and reduce\n  ::  'f' modulo the same number before performing subtraction.\n  ::\n  =/  tmp\n    ?.  =((mod j 2) 0)\n      (mod (sub (add arr a) (mod f a)) a)\n    (mod (sub (add arr b) (mod f b)) b)\n  ::\n  $(j (sub j 1), ell tmp, arr ell)\n```\n\n---\n\n### `++eff:ob`\n\nmurmur3-based pseudorandom function.\n\n'F' in B&R (2002).\n\n- `j` is a number between 0 and 3, selecting the seed with that index in\n  [+raku](#rakuob).\n- `r` is an atom with a maximum length of two bytes. This is an internal\n  function of [`+feis`](#feisob) and [`+tail`](#tailob).\n\n#### Accepts\n\n`j` is an atom.\n\n`r` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  eff\n  |=  [j=@ r=@]\n  ^-  @\n  (muk (snag j raku) 2 r)\n```\n\n#### Example\n\n```\n> (eff:ob 0 'ab')\n1.178.819.349\n```\n\n---\n\n### `++raku:ob`\n\nKey list\n\nProduces a list of arbitrary hexademical keys for use with [`+eff`](#effob).\n\n#### Produces\n\nA list of atoms of aura `@ux` (hexadecimal).\n\n#### Source\n\n```hoon\n++  raku\n  ^-  (list @ux)\n  :~  0xb76d.5eed\n      0xee28.1300\n      0x85bc.ae01\n      0x4b38.7af7\n  ==\n```\n\n#### Examples\n\n```\n> raku:ob\n~[0xb76d.5eed 0xee28.1300 0x85bc.ae01 0x4b38.7af7]\n```\n\n---\n",
    "coin": "## `+$coin`\n\nNoun-literal syntax cases\n\nSyntax cases for nouns-literal: atoms, jammed nouns, and nestable tuples. Parsed\nand printed using `++so` and `++co` cores.\n\n#### Source\n\n```hoon\n+$  coin  $~  [%$ %ud 0]\n          $%  [%$ p=dime]\n              [%blob p=*]\n              [%many p=(list coin)]\n```\n\n#### Examples\n\n```\n> `coin`(need (slay '~s1'))\n[%$ p=[p=~.dr q=18.446.744.073.709.551.616]]\n\n> `coin`(need (slay '0x2b59'))\n[%$ p=[p=~.ux q=11.097]]\n\n> ~(rend co [%many ~[[%$ %ud 1] [%$ %tas 'a'] [%$ %s -2]]])\n\"._1_a_-2__\"\n> ._1_a_-2__\n[1 %a -2]\n\n> `@uv`(jam [3 4])\n0v2cd1\n\n> (slay '~02cd1')\n[~ u=[%blob p=[3 4]]]\n\n> ~02cd1\n[3 4]\n```\n\n---\n",
    "dime": "## `+$dime`\n\nAura-atom pair\n\nUsed in `++coin`. Convenience methods\n[`++scot`](/reference/hoon/stdlib/4m#scot) and\n[`++scow`](/reference/hoon/stdlib/4m#scow) print dimes as `++cord` and\n`++tape`, respectively. [`++slat`](/reference/hoon/stdlib/4m#slat),\n[`++slav`](/reference/hoon/stdlib/4m#slav), and\n[`++slaw`](/reference/hoon/stdlib/4m#slaw) are used to parse atoms of\nspecific auras.\n\n#### Source\n\n```hoon\n+$  dime  [p=@ta q=@]\n```\n\n#### Examples\n\n```\n> +>:(slay '0x123')\np=[p=~.ux q=291]\n```\n\n---\n",
    "edge": "## `+$edge`\n\nParsing location metadata. Parsing location input `p` and optional result `p.q` and parsing continuation `q.q`.\n\n#### Source\n\n```hoon\n+$  edge  [p=hair q=(unit [p=* q=nail])]\n```\n\n#### Examples\n\n```\n> *edge\n[p=[p=0 q=0] q=~]\n\n> (tall:vast [1 1] \"a b\")\n[p=[p=1 q=3] q=[~ u=[p=[%wing p=~[%a]] q=[p=[p=1 q=2] q=\" b\"]]]]\n```\n\n#### Discussion\n\nSee also: [$rule](#rule).\n\n---\n",
    "hair": "## `+$hair`\n\nParsing line and column\n\nA pair of two `@ud` used in parsing indicating line and column number.\n\n#### Source\n\n```hoon\n+$  hair  [p=@ud q=@ud]\n```\n\n#### Examples\n\n```\n> *hair\n[p=0 q=0]\n\n> `hair`[1 1]                                               :: parsing starts at [1 1] as a convention.\n[p=1 q=1]\n\n> ((plus ace) [1 1] \"   --\")\n[p=[p=1 q=4] q=[~ u=[p=[~~. \"  \"] q=[p=[p=1 q=4] q=\"--\"]]]]\n\n> `hair`p:((plus ace) [1 1] \"   --\")\n[p=1 q=4]\n```\n\n---\n",
    "like": "## `++like`\n\nGeneric edge\n\nGenerates an [`$edge`](#edge) with a parsed result set to a specific type.\n\n#### Source\n\n```hoon\n++  like  |*  a=$-(* *)\n          |:  b=`*`[(hair) ~]\n          :-  p=(hair -.b)\n          ^=  q\n          ?@  +.b  ~\n          :-  ~\n          u=[p=(a +>-.b) q=[p=(hair -.b) q=(tape +.b)]]\n```\n\n#### Examples\n\n```\n> *(like char)\n[p=[p=0 q=0] q=~]\n\n> (ace [1 1] \" a\")\n[p=[p=1 q=2] q=[~ u=[p=' ' q=[p=[p=1 q=2] q=\"a\"]]]]\n\n> `(like char)`(ace [1 1] \" a\")\n[p=[p=1 q=2] q=[~ [p=~~. q=[p=[p=1 q=2] q=\"a\"]]]]\n\n> `(like ,@)`(ace [1 1] \" a\")\n[p=[p=1 q=2] q=[~ u=[p=32 q=[p=[p=1 q=2] q=\"a\"]]]]\n```\n\n---\n",
    "nail": "## `+$nail`\n\nLocation, remainder of parsed text\n\nIndicates parsing position `p`, and remaining text to be parsed `q`.\n\n#### Source\n\n```hoon\n+$  nail  [p=hair q=tape]\n```\n\n#### Examples\n\n```\n> +<:;~(plug cab cab)\nc=[p=[p=0 q=0] q=\"\"]\n```\n\n---\n",
    "pint": "## `+$pint`\n\nParsing range\n\nA `$pint` is a pair of [`$hair`](#hair), indicating from `p` to `q`. Mostly used for\nstack traces.\n\n#### Source\n\n```hoon\n+$  pint  [p=[p=@ q=@] q=[p=@ q=@]]\n```\n\n#### Examples\n\n```\n> !:(!!)                                                    :: !! always produces a crash\n/~zod/base/~2014.9.20..01.22.04..52e3/:<[1 4].[1 6]>\n\n> `pint`[[1 4] [1 6]]\n[p=[p=1 q=4] q=[p=1 q=6]]\n```\n\n---\n",
    "rule": "## `+$rule`\n\nParsing rule\n\nAn empty parsing rule, but used to check that parsing rules match this with `_`.\n\n#### Source\n\n```hoon\n+$  rule  _|:($:nail $:edge)\n```\n\n#### Examples\n\n```\n> ([|=(a=nail [p.a ~ u=['a' a]])]:|6 [1 1] \"hi\")\n[[p=1 q=1] ~ u=['a' p=[p=1 q=1] q=\"hi\"]]\n```\n\n---\n",
    "spot": "## `+$spot`\n\nStack trace line\n\nThe stack trace that is printed after crashing.\n\n#### Source\n\n```hoon\n    ++  spot  [p=path q=pint]\n```\n\n#### Examples\n\n```\n> !:  !!                                                    :: !! always produces a crash\n/~zod/base/~2018.8.8..21.42.40..7852:<[1 5].[1 7]>\n! exit\n```\n\n---\n",
    "tone": "## `+$tone`\n\nNock result, error report\n\nProduces either success (`%0`), a block with list of requests blocked on (`%1`),\nor failure with an error report (`%2`).\n\n#### Source\n\n```hoon\n+$  tone  $%  [%0 product=*]\n              [%1 block=*]\n              [%2 trace=(list [@ta *])]\n          ==\n```\n\n#### Examples\n\n```\n> (mink [[20 21] 0 3] $~)\n[%0 product=21]\n```\n\n```\n> (mink [[1 2] !=(!:(+(.)))] ,~)\n[%2 trace=~[[~.spot [[1.685.027.454 1.702.060.386 20.241.306.789.072.368.304.935.424.358.627.395.315.601.229.215.400.789.787.861.332.606 0] [1 20] 1 24]]]]\n```\n\n---\n",
    "toon": "## `+$toon`\n\nNock result, stack trace\n\nProduces either success (`%0`), a block with list of requests blocked on (`%1`),\nor failure with a stack trace (`%2`).\n\n#### Source\n\n```hoon\n+$  toon  $%  [%0 p=*]              ::  success\n              [%1 p=*]              ::  block\n              [%2 p=(list tank)]    ::  stack trace\n          ==                        ::\n```\n\n#### Examples\n\n```\n> (mock [[20 21] 0 3] $~)\n[%0 p=21]\n```\n\n```\n> (mock [[1 2] !=(!:(+(.)))] ,~)\n[ %2\n    p\n  ~[\n    [ %rose\n      p=[p=\":\" q=\"\" r=\"\"]\n      q=[i=[%rose p=[p=\"/\" q=\"/\" r=\"\"] q=[i=[%leaf p=\"~zod\"] t=[i=[%leaf p=\"base\"] t=[i=[%leaf p=\"~2021.10.16..10.03.16..59ee\"] t=~]]]] t=[i=[%leaf p=\"<[1 20].[1 24]>\"] t=~]]\n    ]\n  ]\n]\n```\n\n---\n",
    "wonk": "## `++wonk`\n\nProduct from edge\n\nPull result out of a [`$edge`](#edge), or crash if there's no result.\n\n#### Source\n\n```hoon\n++  wonk  =+  veq=$:edge\n          |@  ++  $  ?~(q.veq !! p.u.q.veq)\n          --\n```\n\n#### Examples\n\n```\n> (wide:vast [1 1] \"(add 2 2)\")\n[p=[p=1 q=10] q=[~ [p=[%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=2] [%sand p=%ud q=2]]] q=[p=[p=1 q=10] q=\"\"]]]]\n```\n\n```\n> (wonk (wide:vast [1 1] \"(add 2 2)\"))\n[%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=2] [%sand p=%ud q=2]]]\n```\n\n#### Discussion\n\nSee also: [`$edge`](#edge)\n\n---\n",
    "po": "## `++po`\n\nPhonetic base\n\nContainer core for providing phonetic syllables and name generators for the\nUrbit naming system. The two faces, `sis` and `dex`, are available to the\ncontained arms.\n\n#### Source\n\n```hoon\n~/  %po\n=+  :-  ^=  sis                                       ::  prefix syllables\n    'dozmarbinwansamlitsighidfidlissogdirwacsabwissib\\\n    /rigsoldopmodfoglidhopdardorlorhodfolrintogsilmir\\\n    /holpaslacrovlivdalsatlibtabhanticpidtorbolfosdot\\\n    /losdilforpilramtirwintadbicdifrocwidbisdasmidlop\\\n    /rilnardapmolsanlocnovsitnidtipsicropwitnatpanmin\\\n    /ritpodmottamtolsavposnapnopsomfinfonbanmorworsip\\\n    /ronnorbotwicsocwatdolmagpicdavbidbaltimtasmallig\\\n    /sivtagpadsaldivdactansidfabtarmonranniswolmispal\\\n    /lasdismaprabtobrollatlonnodnavfignomnibpagsopral\\\n    /bilhaddocridmocpacravripfaltodtiltinhapmicfanpat\\\n    /taclabmogsimsonpinlomrictapfirhasbosbatpochactid\\\n    /havsaplindibhosdabbitbarracparloddosbortochilmac\\\n    /tomdigfilfasmithobharmighinradmashalraglagfadtop\\\n    /mophabnilnosmilfopfamdatnoldinhatnacrisfotribhoc\\\n    /nimlarfitwalrapsarnalmoslandondanladdovrivbacpol\\\n    /laptalpitnambonrostonfodponsovnocsorlavmatmipfip'\n    ^=  dex                                           ::  suffix syllables\n    'zodnecbudwessevpersutletfulpensytdurwepserwylsun\\\n    /rypsyxdyrnuphebpeglupdepdysputlughecryttyvsydnex\\\n    /lunmeplutseppesdelsulpedtemledtulmetwenbynhexfeb\\\n    /pyldulhetmevruttylwydtepbesdexsefwycburderneppur\\\n    /rysrebdennutsubpetrulsynregtydsupsemwynrecmegnet\\\n    /secmulnymtevwebsummutnyxrextebfushepbenmuswyxsym\\\n    /selrucdecwexsyrwetdylmynmesdetbetbeltuxtugmyrpel\\\n    /syptermebsetdutdegtexsurfeltudnuxruxrenwytnubmed\\\n    /lytdusnebrumtynseglyxpunresredfunrevrefmectedrus\\\n    /bexlebduxrynnumpyxrygryxfeptyrtustyclegnemfermer\\\n    /tenlusnussyltecmexpubrymtucfyllepdebbermughuttun\\\n    /bylsudpemdevlurdefbusbeprunmelpexdytbyttyplevmyl\\\n    /wedducfurfexnulluclennerlexrupnedlecrydlydfenwel\\\n    /nydhusrelrudneshesfetdesretdunlernyrsebhulryllud\\\n    /remlysfynwerrycsugnysnyllyndyndemluxfedsedbecmun\\\n    /lyrtesmudnytbyrsenwegfyrmurtelreptegpecnelnevfes'\n|%\n```\n\n---\n\n### `++ind:po`\n\nParse suffix\n\nProduces the byte of the right-hand syllable `a`.\n\n#### Accepts\n\n`a` is a `@tas`.\n\n#### Produces\n\nA `(unit @)`.\n\n#### Source\n\n```hoon\n++  ind  ~/  %ind\n         |=  a=@tas\n         =+  b=0\n         |-  ^-  (unit @)\n         ?:(=(256 b) ~ ?:(=(a (tod b)) [~ b] $(b +(b))))\n```\n\n#### Examples\n\n```\n> (ind:po %zod)\n[~ 0]\n```\n\n```\n> (ind:po %foo)\n~\n```\n\n```\n> (ind:po %wet)\n[~ 101]\n```\n\n---\n\n### `++ins:po`\n\nParse prefix\n\nProduces the byte of the left-hand phonetic syllable `a`.\n\n#### Accepts\n\n`a` is a `@tas`.\n\n#### Produces\n\nA `(unit @)`.\n\n#### Source\n\n```hoon\n++  ins  ~/  %ins\n         |=  a=@tas\n         =+  b=0\n         |-  ^-  (unit @)\n         ?:(=(256 b) ~ ?:(=(a (tos b)) [~ b] $(b +(b))))\n```\n\n#### Examples\n\n```\n> (ins:po %doz)\n[~ 0]\n```\n\n```\n> (ins:po %foo)\n~\n```\n\n```\n> (ins:po %pit)\n[~ 242]\n```\n\n---\n\n### `++tod:po`\n\nFetch suffix\n\nProduces the phonetic suffix syllable from index `a` within `dex` as an atom.\n\n#### Accepts\n\n`a` is an atom\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  tod  ~/  %tod\n         |=(a=@ ?>((lth a 256) (cut 3 [(mul 3 a) 3] dex)))\n```\n\n#### Examples\n\n```\n> `@t`(tod:po 0)\n'zod'\n```\n\n```\n> `@t`(tod:po 100)\n'syr'\n```\n\n```\n> `@t`(tod:po 255)\n'fes'\n```\n\n```\n> `@t`(tod:po 256)\ndojo: hoon expression failed\n```\n\n---\n\n### `++tos:po`\n\nFetch prefix\n\nProduces the phonetic prefix syllable from index `a` within `sis` as an atom.\n\n#### Accepts\n\n`a` is an atom.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  tos  ~/  %tos\n         |=(a=@ ?>((lth a 256) (cut 3 [(mul 3 a) 3] sis)))\n```\n\n#### Examples\n\n```\n> `@t`(tos:po 0)\n'doz'\n```\n\n```\n> `@t`(tos:po 100)\n'soc'\n```\n\n```\n> `@t`(tos:po 255)\n'fip'\n```\n\n```\n> `@t`(tos:po 256)\ndojo: hoon expression failed\n```\n\n---\n",
    "fa": "## `++fa`\n\nbase58check\n\nContainer core for base58check (e.g. bitcoin address) functions.\n\n#### Source\n\n```hoon\n++  fa\n  =+  key='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n  =/  yek=@ux  ~+\n      =-  yek:(roll (rip 3 key) -)\n      =+  [a=*char b=*@ yek=`@ux`(fil 3 256 0xff)]\n      |.\n      [+(b) (mix yek (lsh [3 `@u`a] (~(inv fe 3) b)))]\n  |%\n```\n\n---\n\n### `++cha:fa`\n\nDecode base58check character\n\nCheck whether character `a` is valid in base58check encoding, producing a `unit` of its decoded value if it's valid, and a null `unit` if it's not.\n\n#### Accepts\n\n`a` is a `char`.\n\n#### Produces\n\nA `(unit @uF)`.\n\n#### Source\n\n```hoon\n++  cha  |=(a=char `(unit @uF)`=+(b=(cut 3 [`@`a 1] yek) ?:(=(b 0xff) ~ `b)))\n```\n\n#### Examples\n\n```\n> (cha:fa 'Z')\n[~ 32]\n```\n\n```\n> (cha:fa 'n')\n[~ 45]\n```\n\n```\n> (cha:fa 'l')\n~\n```\n\n---\n\n### `++tok:fa`\n\nCompute base58check checksum\n\nCompute the base58check checksum of `a`.\n\n#### Accepts\n\n`a` is a `@ux`.\n\n#### Produces\n\nA `@ux`.\n\n#### Source\n\n```hoon\n++  tok\n  |=  a=@ux  ^-  @ux\n  =+  b=(pad a)\n  =-  (~(net fe 5) (end [3 4] (shay 32 -)))\n  (shay (add b (met 3 a)) (lsh [3 b] (swp 3 a)))\n```\n\n#### Examples\n\n```\n> (tok:fa 0xdead.beef)\n0x938b.8b0c\n```\n\n---\n\n### `++pad:fa`\n\nbase58check padding bytes\n\nCompute the number of bytes of 0s needed to pad `a` to 21 bytes, if it's less\nthan 21 bytes.\n\n#### Accepts\n\n`a` is a `@` - a value without its base58check checksum.\n\n#### Produces\n\nA `@`.\n\n#### Source\n\n```hoon\n++  pad  |=(a=@ =+(b=(met 3 a) ?:((gte b 21) 0 (sub 21 b))))\n```\n\n#### Examples\n\n```\n> (pad:fa 0xdead.beef)\n17\n```\n\n---\n\n### `++enc:fa`\n\nencode base58check\n\nCompute and append checksum to `a`.\n\n#### Accepts\n\n`a` is a `@ux`.\n\n#### Produces\n\nA `@ux`.\n\n#### Source\n\n```hoon\n++  enc  |=(a=@ux `@ux`(mix (lsh [3 4] a) (tok a)))\n```\n\n#### Example\n\n```\n> (enc:fa 0xdead.beef)\n0xdead.beef.938b.8b0c\n```\n\n---\n\n### `++den:fa`\n\ndecode base58check\n\nCheck checksum of `a`, return a `unit` of `a` sans the checksum if successful,\nor a null `unit` otherwise.\n\n#### Accepts\n\n`a` is a `@ux`\n\n#### Produces\n\nA `(unit @ux)`.\n\n#### Source\n\n```hoon\n++  den\n  |=  a=@ux  ^-  (unit @ux)\n  =+  b=(rsh [3 4] a)\n  ?.  =((tok b) (end [3 4] a))\n    ~\n  `b\n```\n\n#### Examples\n\n```\n> (den:fa 0xdead.beef.938b.8b0c)\n[~ 0xdead.beef]\n```\n\n```\n> (den:fa 0xdead.beef.1111.1111)\n~\n```\n\n---\n",
    "at": "## `++at`\n\nBasic printing\n\nContainer core for basic atom printing functions.\n\n**Note that these are largely deprecated, using outdated syntax, character\nmappings and encodings, and should generally not be used.**\n\n#### Accepts\n\n`a` is a `@`.\n\n#### Source\n\n```hoon\n++  at\n  |_  a=@\n```\n\n---\n\n### `++r:at`\n\nPrint term, number or hex\n\nIf `a` is composed of the letters `a` through `z` and `-`, print as `@tas`\nsyntax. If `a` is an atom of two bytes or less, print as an integer with\ncomma-separated thousands. Otherwise, print `a` as `@ux` syntax.\n\n#### Accepts\n\n`a` is a `@`, and is the sample of `++at`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  r\n  ?:  ?&  (gte (met 3 a) 2)\n          |-\n          ?:  =(0 a)\n            &\n          =+  vis=(end 3 a)\n          ?&  ?|(=('-' vis) ?&((gte vis 'a') (lte vis 'z')))\n              $(a (rsh 3 a))\n          ==\n      ==\n    rtam\n  ?:  (lte (met 3 a) 2)\n    rud\n  rux\n```\n\n#### Examples\n\n```\n> ~(r at 'foo-bar')\n\"%foo-bar\"\n```\n\n```\n> ~(r at 0xbeef)\n\"48,879\"\n```\n\n```\n> ~(r at 0xdead.beef)\n\"0xdead-beef\"\n```\n\n---\n\n### `++rf:at`\n\nPrint loobean\n\nIf `a` is a loobean, print as `|`/`&`, otherwise crash.\n\n#### Accepts\n\n`a` is a `@`, and is the sample of `++at`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rf    `tape`[?-(a %& '&', %| '|', * !!) ~]\n```\n\n#### Examples\n\n```\n> ~(rf at %.y)\n\"&\"\n```\n\n```\n> ~(rf at %.n)\n\"|\"\n```\n\n```\n> ~(rf at 'foo')\ndojo: hoon expression failed\n```\n\n---\n\n### `++rn:at`\n\nPrint null\n\nIf `a` is null, print `~`, otherwise crash.\n\n#### Accepts\n\n`a` is a `@`, and is the sample of `++at`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rn    `tape`[?>(=(0 a) '~') ~]\n```\n\n#### Examples\n\n```\n> ~(rn at ~)\n\"~\"\n```\n\n```\n> ~(rn at 'foo')\ndojo: hoon expression failed\n```\n\n### `++rt:at`\n\nPrint cord, including escape characters\n\nPrint `a` with `cord` syntax, including escape characters.\n\n#### Accepts\n\n`a` is a `@`, and the sample of `++at`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rt    `tape`['\\'' (weld (mesc (trip a)) `tape`['\\'' ~])]\n```\n\n#### Examples\n\n```\n> ~(rt at 'foo')\n\"'foo'\"\n```\n\n```\n> ~(rt at 'fo\\\\o')\n\"'fo\\\\\\\\o'\"\n```\n\n```\n> ~(rt at 'fo\\'o')\n\"'fo\\\\0x27/o'\"\n```\n\n---\n\n### `++rta:at`\n\nSame as `++rt:at`\n\n#### Source\n\n```hoon\n++  rta   rt\n```\n\n---\n\n### `++rtam:at`\n\nPrint cord with `@tas` syntax\n\nTreat `a` as `cord`, print it with `%` prefix.\n\n#### Accepts\n\n`a` is a `@`, and is the sample of `++at`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rtam  `tape`['%' (trip a)]\n```\n\n#### Examples\n\n```\n> ~(rtam at 'foo')\n\"%foo\"\n```\n\n```\n> ~(rtam at '12')\n\"%12\"\n```\n\n```\n> ~(rtam at '!!!')\n\"%!!!\"\n```\n\n---\n\n### `++rub:at`\n\nPrint binary\n\nPrint `a` as `@ub` syntax, except with `-` separators rather than `.` separators.\n\n#### Accepts\n\n`a` is a `@`, and is the sample of `++at`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rub   `tape`['0' 'b' (rum 2 ~ |=(b=@ (add '0' b)))]\n```\n\n#### Examples\n\n```\n> ~(rub at 0xbeef)\n\"0b1011-1110-1110-1111\"\n```\n\n---\n\n### `++rud:at`\n\nPrint atom as integer\n\nPrint atom `a` as an integer, with commas separating thousands.\n\n#### Accepts\n\n`a` is a `@`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rud   (rum 10 ~ |=(b=@ (add '0' b)))\n```\n\n#### Examples\n\n```\n> ~(rud at 0xbeef)\n\"48,879\"\n```\n\n---\n\n### `++rum:at`\n\nPrint base-n\n\nPrint `a` as base `b` with suffix `c` and using gate `d` to convert blocks to\ncharacters. Each set of four characters will be separated by `-`, except for\nbase 10 which will be printed with commas separating thousands.\n\n#### Accepts\n\n- `a` is a `@`, and is the sample of `++at`\n- `b` is a `@`, denoting the the base.\n- `c` is a `tape`, and will be appended to the end of the result.\n- `d` is a `gate` that takes `@` and produces `@`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rum\n  |=  [b=@ c=tape d=$-(@ @)]\n  ^-  tape\n  ?:  =(0 a)\n    [(d 0) c]\n  =+  e=0\n  |-  ^-  tape\n  ?:  =(0 a)\n    c\n  =+  f=&(!=(0 e) =(0 (mod e ?:(=(10 b) 3 4))))\n  %=  $\n    a  (div a b)\n    c  [(d (mod a b)) ?:(f [?:(=(10 b) ',' '-') c] c)]\n    e  +(e)\n  ==\n```\n\n#### Examples\n\n```\n> (~(rum at 0xdead.beef) 10 ~ |=(b=@ (add '0' b)))\n\"3,735,928,559\"\n```\n\n```\n> (~(rum at 0xdead.beef) 10 \" m/s\" |=(b=@ (add '0' b)))\n\"3,735,928,559 m/s\"\n```\n\n```\n> (~(rum at 0xdead.beef) 2 ~ |=(b=@ (add '0' b)))\n\"1101-1110-1010-1101-1011-1110-1110-1111\"\n```\n\n---\n\n### `++rup:at`\n\nPrint `@p` (outdated)\n\nPrint `a` as an `@p`, but with outdated syntax and number<->syllable mapping. This\nfunction almost certainly should not be used.\n\n#### Accepts\n\n`a` is a `@`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rup\n  =+  b=(met 3 a)\n  ^-  tape\n  :-  '-'\n  |-  ^-  tape\n  ?:  (gth (met 5 a) 1)\n    %+  weld\n      $(a (rsh 5 a), b (sub b 4))\n    `tape`['-' '-' $(a (end 5 a), b 4)]\n  ?:  =(0 b)\n    ['~' ~]\n  ?:  (lte b 1)\n    (trip (tos:po a))\n  |-  ^-  tape\n  ?:  =(2 b)\n    =+  c=(rsh 3 a)\n    =+  d=(end 3 a)\n    (weld (trip (tod:po c)) (trip (tos:po (mix c d))))\n  =+  c=(rsh [3 2] a)\n  =+  d=(end [3 2] a)\n  (weld ^$(a c, b (met 3 c)) `tape`['-' $(a (mix c d), b 2)])\n```\n\n#### Examples\n\n```\n> ~(rup at 0xdead.beef)\n\"-rylsal-sellac\"\n```\n\n```\n> ~(rup at ~sampel-palnet)\n\"-sellod-lebdiv\"\n```\n\n```\n> ~(rup at ~zod)\n\"-~\"\n```\n\n---\n\n### `++ruv:at`\n\nPrint base-64\n\nPrint `a` as **outdated** base-64 syntax, with `0v` rather than `0w` prefix,\ndifferent character mappings and separators.\n\n#### Accepts\n\n`a` is a `@`, and is the sample of `++at`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  ruv\n  ^-  tape\n  :+  '0'\n    'v'\n  %^    rum\n      64\n    ~\n  |=  b=@\n  ?:  =(63 b)\n    '+'\n  ?:  =(62 b)\n    '-'\n  ?:((lth b 26) (add 65 b) ?:((lth b 52) (add 71 b) (sub b 4)))\n```\n\n#### Examples\n\n```\n> ~(ruv at 0xdead.beef)\n\"0vDe-rb7v\"\n```\n\nNote this is how it should be rendered:\n\n```\n> `@uw`0xdead.beef\n0w3.uHrXL\n```\n\n---\n\n### `++rux:at`\n\nPrint hexadecimal\n\nPrint `a` as `@ux` except with `-` separators rather than `.`s.\n\n#### Accepts\n\n`a` is a `@`, and is the sample of `++at`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rux  `tape`['0' 'x' (rum 16 ~ |=(b=@ (add b ?:((lth b 10) 48 87))))]\n```\n\n#### Examples\n\n```\n> ~(rux at 0xdead.beef)\n\"0xdead-beef\"\n```\n\n---\n",
    "cass": "## `++cass`\n\nTo lowercase\n\nTurn all occurences of uppercase letters in any `tape` into lowercase\nletters. Returns a `tape`.\n\n#### Accepts\n\n`vib` is a `tape`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  cass\n  |=  vib=tape\n  ^-  tape\n  (turn vib |=(a=@ ?.(&((gte a 'A') (lte a 'Z')) a (add 32 a))))\n```\n\n#### Examples\n\n```\n> (cass \"JOHN DOE\")\n\"john doe\"\n\n> (cass \"abc ABC 123 !@#\")\n\"abc abc 123 !@#\"\n\n> (cass \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsQqRrVvWwXxYyZz\")\n\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssqqrrvvwwxxyyzz\"\n```\n\n---\n",
    "crip": "## `++crip`\n\nTape to cord\n\nProduce a `cord` from a `tape`.\n\n#### Accepts\n\n`a` is a `tape`.\n\n#### Produces\n\nA `cord`.\n\n#### Source\n\n```hoon\n++  crip  |=(a=tape `@t`(rap 3 a))\n```\n\n#### Examples\n\n```\n> (crip \"john doe\")\n'john doe'\n\n> (crip \"abc 123 !@#\")\n'abc 123 !@#'\n\n> `@ud`(crip \"abc\")\n6.513.249\n```\n\n---\n",
    "cuss": "## `++cuss`\n\nTo uppercase\n\nTurn all occurences of lowercase letters in any `tape` into uppercase\nletters. Returns a `tape`.\n\n#### Accepts\n\n`vib` is a `tape`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  cuss\n  |=  vib=tape\n  ^-  tape\n  (turn vib |=(a=@ ?.(&((gte a 'a') (lte a 'z')) a (sub a 32))))\n```\n\n#### Examples\n\n```\n> (cuss \"john doe\")\n\"JOHN DOE\"\n\n> (cuss \"abc ABC 123 !@#\")\n\"ABC ABC 123 !@#\"\n\n> (cuss \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsQqRrVvWwXxYyZz\")\n\"AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSQQRRVVWWXXYYZZ\"\n```\n\n---\n",
    "mesc": "## `++mesc`\n\nEscape special chars\n\nEscape special characters.\n\n#### Accepts\n\n`vib` is a `tape`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  mesc\n  |=  vib=tape\n  ^-  tape\n  ?~  vib\n    ~\n  ?:  =('\\\\' i.vib)\n    ['\\\\' '\\\\' $(vib t.vib)]\n  ?:  ?|((gth i.vib 126) (lth i.vib 32) =(`@`39 i.vib))\n    ['\\\\' (welp ~(rux at i.vib) '/' $(vib t.vib))]\n  [i.vib $(vib t.vib)]\n```\n\n#### Examples\n\n```\n> (mesc \"ham lus\")\n\"ham lus\"\n> (mesc \"bas\\\\hur\")\n\"bas\\\\\\\\hur\"\n> (mesc \"as'sa\u00df\")\n\"as\\0x27/sa\\0xc3/\\0x9f/\"\n```\n\n---\n",
    "runt": "## `++runt`\n\nPrepend `n` times\n\nAdd `a` repetitions of character `b` to the head of `tape` `c`.\n\n#### Accepts\n\n`[a b]` are atoms.\n\n`c` is a `tape`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  runt\n  |=  [[a=@ b=@] c=tape]\n  ^-  tape\n  ?:  =(0 a)\n    c\n  [b $(a (dec a))]\n```\n\n#### Examples\n\n```\n> (runt [2 '/'] \"ham\")\n\"//ham\"\n\n> (runt [10 'a'] \"\")\n\"aaaaaaaaaa\"\n```\n\n---\n",
    "sand": "## `++sand`\n\nSoft-cast by aura\n\nCheck characters in `b` are valid for aura `a`. Produce a `unit` of `a` if valid\nand a null `unit` if not. Takes `a` and produces a gate that takes `b`.\n\n#### Accepts\n\n`a` is a `@ta`, and specifies the aura like `%tas` or `%ta`.\n\n`b` is an atom.\n\n#### Produces\n\nA `(unit @)`.\n\n#### Source\n\n```hoon\n++  sand\n  |=  a=@ta\n  (flit (sane a))\n```\n\n#### Examples\n\n```\n> `(unit @ta)`((sand %ta) 'sym-som')\n[~ ~.sym-som]\n```\n\n```\n> `(unit @ta)`((sand %ta) 'err!')\n~\n```\n\n---\n",
    "sane": "## `++sane`\n\nCheck aura validity\n\nCheck validity of `a` by aura `b`. Takes `b` and produces a gate that takes `a`.\n\n#### Accepts\n\n`a` is a `@ta`, and specifies the aura like `%tas` or `%ta`.\n\n`b` is an atom.\n\n#### Produces\n\nA `?`.\n\n#### Source\n\n```hoon\n++  sane\n  |=  a=@ta\n  |=  b=@  ^-  ?\n  ?.  =(%t (end 3 a))\n    ::  XX more and better sanity\n    ::\n    &\n  =+  [inx=0 len=(met 3 b)]\n  ?:  =(%tas a)\n    |-  ^-  ?\n    ?:  =(inx len)  &\n    =+  cur=(cut 3 [inx 1] b)\n    ?&  ?|  &((gte cur 'a') (lte cur 'z'))\n            &(=('-' cur) !=(0 inx) !=(len inx))\n            &(&((gte cur '0') (lte cur '9')) !=(0 inx))\n        ==\n        $(inx +(inx))\n    ==\n  ?:  =(%ta a)\n    |-  ^-  ?\n    ?:  =(inx len)  &\n    =+  cur=(cut 3 [inx 1] b)\n    ?&  ?|  &((gte cur 'a') (lte cur 'z'))\n            &((gte cur '0') (lte cur '9'))\n            |(=('-' cur) =('~' cur) =('_' cur) =('.' cur))\n        ==\n        $(inx +(inx))\n    ==\n  |-  ^-  ?\n  ?:  =(0 b)  &\n  =+  cur=(end 3 b)\n  ?:  &((lth cur 32) !=(10 cur))  |\n  =+  len=(teff cur)\n  ?&  |(=(1 len) =+(i=1 |-(|(=(i len) &((gte (cut 3 [i 1] b) 128) $(i +(i)))))))\n      $(b (rsh [3 len] b))\n  ==\n```\n\n#### Examples\n\n```\n> ((sane %tas) %mol)\n%.y\n\n> ((sane %tas) 'lam')\n%.y\n\n> ((sane %tas) 'more ace')\n%.n\n```\n\n---\n",
    "taft": "## `++taft`\n\nUTF8 to UTF32\n\nConvert `cord` `a` to a UTF32 `@c`.\n\n#### Accepts\n\n`a` is a `@t`.\n\n#### Produces\n\nA `@c`.\n\n#### Source\n\n```hoon\n++  taft\n  |=  a=@t\n  ^-  @c\n  %+  rap  5\n  |-  ^-  (list @c)\n  =+  b=(teff a)\n  ?:  =(0 b)  ~\n  =+  ^=  c\n      %+  can  0\n      %+  turn\n        ^-  (list [p=@ q=@])\n        ?+  b  !!\n          %1  [[0 7] ~]\n          %2  [[8 6] [0 5] ~]\n          %3  [[16 6] [8 6] [0 4] ~]\n          %4  [[24 6] [16 6] [8 6] [0 3] ~]\n        ==\n      |=([p=@ q=@] [q (cut 0 [p q] a)])\n  ?>  =((tuft c) (end [3 b] a))\n  [c $(a (rsh [3 b] a))]\n```\n\n#### Examples\n\n```\n> (taft 'foobar')\n~-foobar\n\n> `@ux`'foobar'\n0x7261.626f.6f66\n\n> `@ux`~-foobar\n0x72.0000.0061.0000.0062.0000.006f.0000.006f.0000.0066\n```\n\n---\n",
    "teff": "## `++teff`\n\nUTF8 Length\n\nProduces the number of utf8 bytes of `a`, a single `@t` character. If `a`\ncontains more than one character, it will produce the byte-length of the first\none.\n\n#### Accepts\n\n`a` is a `@t`.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  teff\n  |=  a=@t  ^-  @\n  =+  b=(end 3 a)\n  ?:  =(0 b)\n    ?>(=(`@`0 a) 0)\n  ?>  |((gte b 32) =(10 b))\n  ?:((lte b 127) 1 ?:((lte b 223) 2 ?:((lte b 239) 3 4)))\n```\n\n#### Examples\n\n```\n> (teff 'a')\n1\n\n> (teff '\u00df')\n2\n\n> (teff 'a\u00df')\n1\n```\n\n---\n",
    "trim": "## `++trim`\n\nTape split\n\nSplit first `a` characters off `tape` `b`.\n\n#### Accepts\n\n`a` is an atom.\n\n`b` is a `tape`.\n\n#### Produces\n\nA cell of `tape`s, `p` and `q`.\n\n#### Source\n\n```hoon\n++  trim\n  |=  [a=@ b=tape]\n  ^-  [p=tape q=tape]\n  ?~  b\n    [~ ~]\n  ?:  =(0 a)\n    [~ b]\n  =+  c=$(a (dec a), b t.b)\n  [[i.b p.c] q.c]\n```\n\n#### Examples\n\n```\n> (trim 5 \"lasok termun\")\n[p=\"lasok\" q=\" termun\"]\n\n> (trim 5 \"zam\")\n[p=\"zam\" q=\"\"]\n```\n\n---\n",
    "trip": "## `++trip`\n\nCord to tape\n\nProduce a `tape` from `cord` `a`.\n\n#### Accepts\n\n`a` is an atom.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  trip\n  ~/  %trip\n  |=  a=@  ^-  tape\n  ?:  =(0 (met 3 a))\n    ~\n  [^-(@ta (end 3 a)) $(a (rsh 3 a))]\n```\n\n#### Examples\n\n```\n> (trip 'john doe')\n\"john doe\"\n\n> (trip 'abc 123 !@#')\n\"abc 123 !@#\"\n\n> (trip 'abc')\n\"abc\"\n```\n\n---\n",
    "tuba": "## `++tuba`\n\nUTF8 tape to UTF32 tape\n\nConvert `tape` to a `list` of codepoints (`@c`).\n\n#### Accepts\n\n`a` is a `tape`.\n\n#### Produces\n\nA `(list @c)`.\n\n#### Source\n\n```hoon\n++  tuba\n  |=  a=tape\n  ^-  (list @c)\n  (rip 5 (taft (rap 3 a)))\n```\n\n#### Examples\n\n```\n> (tuba \"\u044f \u0442\u0443\u0442\")\n~[~-~44f. ~-. ~-~442. ~-~443. ~-~442.]\n\n> (tuba \"chars\")\n~[~-c ~-h ~-a ~-r ~-s]\n```\n\n---\n",
    "tufa": "## `++tufa`\n\nUTF32 to UTF8 tape\n\nWrap a `list` of utf32 codepoints into a utf8 `tape`.\n\n#### Accepts\n\n`a` is a `(list @c)`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  tufa\n  |=  a=(list @c)\n  ^-  tape\n  ?~  a  \"\"\n  (weld (rip 3 (tuft i.a)) $(a t.a))\n```\n\n#### Examples\n\n```\n> (tufa ~[~-~44f. ~-. ~-~442. ~-~443. ~-~442.])\n\"\u044f \u0442\u0443\u0442\"\n\n> (tufa ((list @c) ~[%a %b 0xb1 %c]))\n\"ab\u00b1c\"\n```\n\n---\n",
    "tuft": "## `++tuft`\n\nUTF32 to UTF8\n\nConvert `@c` to `cord`.\n\n#### Accepts\n\n`a` is a `@c`.\n\n#### Produces\n\nA `cord`.\n\n#### Source\n\n```hoon\n++  tuft\n  |=  a=@c\n  ^-  @t\n  %+  rap  3\n  |-  ^-  (list @)\n  ?:  =(`@`0 a)\n    ~\n  =+  b=(end 5 a)\n  =+  c=$(a (rsh 5 a))\n  ?:  (lte b 0x7f)\n    [b c]\n  ?:  (lte b 0x7ff)\n    :*  (mix 0b1100.0000 (cut 0 [6 5] b))\n        (mix 0b1000.0000 (end [0 6] b))\n        c\n    ==\n  ?:  (lte b 0xffff)\n    :*  (mix 0b1110.0000 (cut 0 [12 4] b))\n        (mix 0b1000.0000 (cut 0 [6 6] b))\n        (mix 0b1000.0000 (end [0 6] b))\n        c\n    ==\n  :*  (mix 0b1111.0000 (cut 0 [18 3] b))\n      (mix 0b1000.0000 (cut 0 [12 6] b))\n      (mix 0b1000.0000 (cut 0 [6 6] b))\n      (mix 0b1000.0000 (end [0 6] b))\n      c\n  ==\n```\n\n#### Examples\n\n```\n> (tuft ~-foobar)\n'foobar'\n\n> `@ux`~-foobar\n0x72.0000.0061.0000.0062.0000.006f.0000.006f.0000.0066\n\n> `@ux`'foobar'\n0x7261.626f.6f66\n```\n\n---\n",
    "wack": "## `++wack`\n\nKnot escape\n\nEscape `knot` `~` as `~~` and `_` as `~-`. Used for printing.\n\n#### Accepts\n\n`a` is a `knot`.\n\n#### Produces\n\nA `knot`.\n\n#### Source\n\n```hoon\n++  wack\n  |=  a=@ta\n  ^-  @ta\n  =+  b=(rip 3 a)\n  %+  rap  3\n  |-  ^-  tape\n  ?~  b\n    ~\n  ?:  =('~' i.b)  ['~' '~' $(b t.b)]\n  ?:  =('_' i.b)  ['~' '-' $(b t.b)]\n  [i.b $(b t.b)]\n```\n\n#### Examples\n\n```\n> (wack '~20_sam~')\n~.~~20~-sam~~\n\n> `@t`(wack '~20_sam~')\n'~~20~-sam~~'\n```\n\n---\n",
    "wick": "## `++wick`\n\nKnot unescape\n\nUnescape `knot` `~~` as `~` and `~-` as `_`. Produces a `unit`, which is null if\nthe `knot` contains unescaped `~` characters.\n\n#### Accepts\n\n`a` is a an atom.\n\n#### Produces\n\nA `(unit @ta)`.\n\n#### Source\n\n```hoon\n++  wick\n  |=  a=@\n  ^-  (unit @ta)\n  =+  b=(rip 3 a)\n  =-  ?^(b ~ (some (rap 3 (flop c))))\n  =|  c=tape\n  |-  ^-  [b=tape c=tape]\n  ?~  b  [~ c]\n  ?.  =('~' i.b)\n    $(b t.b, c [i.b c])\n  ?~  t.b  [b ~]\n  ?-  i.t.b\n    %'~'  $(b t.t.b, c ['~' c])\n    %'-'  $(b t.t.b, c ['_' c])\n    @     [b ~]\n  ==\n```\n\n#### Examples\n\n```\n> (wick ~.~~20~-sam~~)\n[~ ~.~20_sam~]\n\n> (wick ~.~20~-sam~~)\n~\n```\n\n---\n",
    "woad": "## `++woad`\n\nUnescape cord\n\nUnescape `knot`-encoded `cord`.\n\n#### Accepts\n\n`a` is a `@ta`.\n\n#### Produces\n\nA `cord`.\n\n#### Source\n\n```hoon\n++  woad\n  |=  a=@ta\n  ^-  @t\n  %+  rap  3\n  |-  ^-  (list @)\n  ?:  =(`@`0 a)\n    ~\n  =+  b=(end 3 a)\n  =+  c=(rsh 3 a)\n  ?:  =('.' b)\n    [' ' $(a c)]\n  ?.  =('~' b)\n    [b $(a c)]\n  =>  .(b (end 3 c), c (rsh 3 c))\n  ?+  b  =-  (weld (rip 3 (tuft p.d)) $(a q.d))\n         ^=  d\n         =+  d=0\n         |-  ^-  [p=@ q=@]\n         ?:  =('.' b)\n           [d c]\n         ?<  =(0 c)\n         %=    $\n            b  (end 3 c)\n            c  (rsh 3 c)\n            d  %+  add  (mul 16 d)\n               %+  sub  b\n               ?:  &((gte b '0') (lte b '9'))  48\n               ?>(&((gte b 'a') (lte b 'z')) 87)\n         ==\n    %'.'  ['.' $(a c)]\n    %'~'  ['~' $(a c)]\n  ==\n```\n\n#### Examples\n\n```\n> (woad ~.foo.bar~21.)\n'foo bar!'\n```\n\n---\n",
    "wood": "## `++wood`\n\nEscape cord\n\nEscape `cord` `a` so it can be encoded in a `knot`.\n\n#### Accepts\n\n`a` is a `cord`.\n\n#### Produces\n\nA `knot`.\n\n#### Source\n\n```hoon\n++  wood\n  |=  a=@t\n  ^-  @ta\n  %+  rap  3\n  |-  ^-  (list @)\n  ?:  =(`@`0 a)\n    ~\n  =+  b=(teff a)\n  =+  c=(taft (end [3 b] a))\n  =+  d=$(a (rsh [3 b] a))\n  ?:  ?|  &((gte c 'a') (lte c 'z'))\n          &((gte c '0') (lte c '9'))\n          =(`@`'-' c)\n      ==\n    [c d]\n  ?+  c\n    :-  '~'\n    =+  e=(met 2 c)\n    |-  ^-  tape\n    ?:  =(0 e)\n      ['.' d]\n    =.  e  (dec e)\n    =+  f=(rsh [2 e] c)\n    [(add ?:((lte f 9) 48 87) f) $(c (end [2 e] c))]\n  ::\n    %' '  ['.' d]\n    %'.'  ['~' '.' d]\n    %'~'  ['~' '~' d]\n  ==\n```\n\n#### Examples\n\n```\n> (wood 'foo bar!')\n~.foo.bar~21.\n```\n\n---\n",
    "wash": "## `++wash`\n\nRender tank at width\n\nRender `tac` with indent `tab` and maximum width `edg`. If `tac` cannot be\nrendered in-line in less than `tac` characters, it will be split into multiple\nlines if possible. If `tac` cannot be made to fit, `wash` will crash.\n\n#### Accepts\n\n`[tab=@ edg=@]` - `tab` is the number of characters of indentation and `edge` is\nthe maximum number of characters of width.\n\n`tac` is a `tank`.\n\n#### Produces\n\nA `wall` (list of `tape`s).\n\n#### Source\n\n```hoon\n++  wash\n  |=  [[tab=@ edg=@] tac=tank]  ^-  wall\n  (~(win re tac) tab edg)\n```\n\n#### Examples\n\n```\n> =rose `tank`[%rose [\" \" \"[\" \"]\"] ~['abc' 'def' 'ghi']]\n\n> ((slog (crip (of-wall:format (wash [0 80] rose))) ~) ~)\n[abc def ghi]\n\n\n> ((slog (crip (of-wall:format (wash [0 8] rose))) ~) ~)\n[ abc\n  def\n  ghi\n]\n\n> ((slog (crip (of-wall:format (wash [3 15] rose))) ~) ~)\n   [ abc\n     def\n     ghi\n   ]\n```\n",
    "re": "## `++re`\n\nPretty-printing engine\n\nContainer core for a pretty-printing engine that accepts a `tank` sample and contains arms that perform computation on it.\n\n#### Accepts\n\n`tac` is a `tank`.\n\n#### Source\n\n```hoon\n++  re\n  |_  tac=tank\n```\n\n---\n\n### `++ram:re`\n\nFlatten to tape\n\nFlatten `tank` out into a `tape`.\n\n#### Accepts\n\n`tac` is a `tank`, taken from sample of `++re` core.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  ram\n  ^-  tape\n  ?@  tac\n    (trip tac)\n  ?-    -.tac\n      %leaf  p.tac\n  ::\n  ::  flat %palm rendered as %rose with welded openers\n  ::\n      %palm\n    =*  mid  p.p.tac\n    =*  for  (weld q.p.tac r.p.tac)\n    =*  end  s.p.tac\n    ram(tac [%rose [mid for end] q.tac])\n  ::\n  ::  flat %rose rendered with open/mid/close\n  ::\n      %rose\n    =*  mid  p.p.tac\n    =*  for  q.p.tac\n    =*  end  r.p.tac\n    =*  lit  q.tac\n    %+  weld\n      for\n    |-  ^-  tape\n    ?~  lit\n      end\n    %+  weld\n      ram(tac i.lit)\n    =*  voz  $(lit t.lit)\n    ?~(t.lit voz (weld mid voz))\n  ==\n```\n\n#### Examples\n\n```\n> ~(ram re leaf+\"foo\")\n\"foo\"\n\n> ~(ram re [%rose [\" \" \"[\" \"]\"] ~['abc' 'def' 'ghi']])\n\"[abc def ghi]\"\n```\n\n---\n\n### `++win:re`\n\nRender at indent\n\nRender at indent level `tab` and width `edg`.\n\n#### Accepts\n\n`tac` is a `tank`, taken from sample of `++re` core.\n\n`tab` and `edg` are atoms.\n\n#### Produces\n\nA `wall` (list of `tape`).\n\n#### Source\n\n```hoon\n++  win\n  |=  [tab=@ud edg=@ud]\n  ::  output stack\n  ::\n  =|  lug=wall\n  |^  ^-  wall\n      ?@  tac\n        (rig (trip tac))\n      ?-    -.tac\n          %leaf  (rig p.tac)\n      ::\n          %palm\n        =/  hom  ram\n        ?:  (lte (lent hom) (sub edg tab))\n          (rig hom)\n        ::\n        =*  for  q.p.tac\n        =*  lit  q.tac\n        ?~  lit\n          (rig for)\n        ?~  t.lit\n          =:  tab  (add 2 tab)\n              lug  $(tac i.lit)\n            ==\n          (rig for)\n        ::\n        =>  .(lit `(list tank)`lit)\n        =/  lyn  (mul 2 (lent lit))\n        =.  lug\n          |-  ^-  wall\n          ?~  lit\n            lug\n          =/  nyl  (sub lyn 2)\n          %=  ^$\n            tac  i.lit\n            tab  (add tab nyl)\n            lug  $(lit t.lit, lyn nyl)\n          ==\n        (wig for)\n      ::\n          %rose\n        =/  hom  ram\n        ?:  (lte (lent hom) (sub edg tab))\n          (rig hom)\n        ::\n        =*  for  q.p.tac\n        =*  end  r.p.tac\n        =*  lit  q.tac\n        =.  lug\n          |-  ^-  wall\n          ?~  lit\n            ?~(end lug (rig end))\n          %=  ^$\n            tac  i.lit\n            tab  (mod (add 2 tab) (mul 2 (div edg 3)))\n            lug  $(lit t.lit)\n          ==\n        ?~(for lug (wig for))\n      ==\n  ::  +rig: indent tape and cons with output stack\n  ::\n  ++  rig\n    |=  hom=tape\n    ^-  wall\n    [(runt [tab ' '] hom) lug]\n  ::  +wig: indent tape and cons with output stack\n  ::\n  ::    joined with the top line if whitespace/indentation allow\n  ::\n  ++  wig\n    |=  hom=tape\n    ^-  wall\n    ?~  lug\n      (rig hom)\n    =/  wug  :(add 1 tab (lent hom))\n    ?.  =+  mir=i.lug\n        |-  ^-  ?\n        ?~  mir  |\n        ?|  =(0 wug)\n            ?&(=(' ' i.mir) $(mir t.mir, wug (dec wug)))\n        ==\n      (rig hom)       :: ^ XX regular form?\n    :_  t.lug\n    %+  runt  [tab ' ']\n    (weld hom `tape`[' ' (slag wug i.lug)])\n  --\n```\n\n#### Examples\n\n```\n> =rose `tank`[%rose [\" \" \"[\" \"]\"] ~['abc' 'def' 'ghi']]\n\n> ((slog (crip (of-wall:format (~(win re rose) 0 80))) ~) ~)\n[abc def ghi]\n\n> ((slog (crip (of-wall:format (~(win re rose) 3 80))) ~) ~)\n   [abc def ghi]\n\n> ((slog (crip (of-wall:format (~(win re rose) 0 10))) ~) ~)\n[ abc\n  def\n  ghi\n]\n\n> ((slog (crip (of-wall:format (~(win re rose) 3 15))) ~) ~)\n   [ abc\n     def\n     ghi\n   ]\n```\n\n---\n",
    "show": "## `++show`\n\nPretty-printer (deprecated)\n\nPretty prints noun `vem`, producing a `tank`. This function is deprecated and in\nmost cases produces outdated syntax or incorrect results.\n\n#### Accepts\n\n`vem` is a noun.\n\n#### Produces\n\nA `tank`.\n\n#### Source\n\n```hoon\n++  show\n  |=  vem=*\n  |^  ^-  tank\n      ?:  ?=(@ vem)\n        [%leaf (mesc (trip vem))]\n      ?-    vem\n          [s=~ c=*]\n        [%leaf '\\'' (weld (mesc (tape +.vem)) `tape`['\\'' ~])]\n      ::\n          [s=%a c=@]        [%leaf (mesc (trip c.vem))]\n          [s=%b c=*]        (shop c.vem |=(a=@ ~(rub at a)))\n          [s=[%c p=@] c=*]\n        :+  %palm\n          [['.' ~] ['-' ~] ~ ~]\n        [[%leaf (mesc (trip p.s.vem))] $(vem c.vem) ~]\n      ::\n          [s=%d c=*]        (shop c.vem |=(a=@ ~(rud at a)))\n          [s=%k c=*]        (tank c.vem)\n          [s=%h c=*]\n        :+  %rose\n          [['/' ~] ['/' ~] ~]\n        =+  yol=((list @ta) c.vem)\n        (turn yol |=(a=@ta [%leaf (trip a)]))\n      ::\n          [s=%l c=*]        (shol c.vem)\n          [s=%o c=*]\n        %=    $\n            vem\n          :-  [%m '%h::[%d %d].[%d %d]>']\n          [-.c.vem +<-.c.vem +<+.c.vem +>-.c.vem +>+.c.vem ~]\n        ==\n      ::\n          [s=%p c=*]        (shop c.vem |=(a=@ ~(rup at a)))\n          [s=%q c=*]        (shop c.vem |=(a=@ ~(r at a)))\n          [s=%r c=*]        $(vem [[%r ' ' '{' '}'] c.vem])\n          [s=%t c=*]        (shop c.vem |=(a=@ ~(rt at a)))\n          [s=%v c=*]        (shop c.vem |=(a=@ ~(ruv at a)))\n          [s=%x c=*]        (shop c.vem |=(a=@ ~(rux at a)))\n          [s=[%m p=@] c=*]  (shep p.s.vem c.vem)\n          [s=[%r p=@] c=*]\n        $(vem [[%r ' ' (cut 3 [0 1] p.s.vem) (cut 3 [1 1] p.s.vem)] c.vem])\n      ::\n          [s=[%r p=@ q=@ r=@] c=*]\n        :+  %rose\n          :*  p=(mesc (trip p.s.vem))\n              q=(mesc (trip q.s.vem))\n              r=(mesc (trip r.s.vem))\n          ==\n        |-  ^-  (list tank)\n        ?@  c.vem\n          ~\n        [^$(vem -.c.vem) $(c.vem +.c.vem)]\n      ::\n          [s=%z c=*]        $(vem [[%r %$ %$ %$] c.vem])\n          *                 !!\n      ==\n  ++  shep\n    |=  [fom=@ gar=*]\n    ^-  tank\n    =+  l=(met 3 fom)\n    =+  i=0\n    :-  %leaf\n    |-  ^-  tape\n    ?:  (gte i l)\n      ~\n    =+  c=(cut 3 [i 1] fom)\n    ?.  =(37 c)\n      (weld (mesc [c ~]) $(i +(i)))\n    =+  d=(cut 3 [+(i) 1] fom)\n    ?.  .?(gar)\n      ['\\\\' '#' $(i (add 2 i))]\n    (weld ~(ram re (show d -.gar)) $(i (add 2 i), gar +.gar))\n  ::\n  ++  shop\n    |=  [aug=* vel=$-(a=@ tape)]\n    ^-  tank\n    ?:  ?=(@ aug)\n      [%leaf (vel aug)]\n    :+  %rose\n      [[' ' ~] ['[' ~] [']' ~]]\n    =>  .(aug `*`aug)\n    |-  ^-  (list tank)\n    ?:  ?=(@ aug)\n      [^$ ~]\n    [^$(aug -.aug) $(aug +.aug)]\n  ::\n  ++  shol\n    |=  lim=*\n    :+  %rose\n      [['.' ~] ~ ~]\n    |-    ^-  (list tank)\n    ?:  ?=(@ lim)  ~\n    :_  $(lim +.lim)\n    ?+  -.lim  (show '#')\n        ~   (show '$')\n        c=@  (show c.lim)\n        [%& %1]  (show '.')\n        [%& c=@]\n      [%leaf '+' ~(rud at c.lim)]\n    ::\n        [%| @ ~]  (show ',')\n        [%| n=@ ~ c=@]\n      [%leaf (weld (reap n.lim '^') ?~(c.lim \"$\" (trip c.lim)))]\n    ==\n  --\n```\n\n---\n",
    "last": "## `++last`\n\nFurther trace\n\nCompares two line-column pairs, `zyc` and `naz`, producing\nwhichever is further along.\n\n#### Accepts\n\n`zyc` is a `hair`.\n\n`naz` is a `hair`.\n\n#### Produces\n\nA `hair`.\n\n#### Source\n\n```hoon\n++  last  |=  [zyc=hair naz=hair]\n          ^-  hair\n          ?:  =(p.zyc p.naz)\n            ?:((gth q.zyc q.naz) zyc naz)\n          ?:((gth p.zyc p.naz) zyc naz)\n```\n\n#### Examples\n\n```\n> (last [1 1] [1 2])\n[p=1 q=2]\n\n> (last [2 1] [1 2])\n[p=2 q=1]\n\n> (last [0 0] [99 0])\n[p=99 q=0]\n\n> (last [7 7] [7 7])\n[p=7 q=7]\n```\n\n---\n",
    "lust": "## `++lust`\n\nDetect newline\n\nAdvances `naz` by a row if the `weq` is a newline, or by a column if `weq` is\nany other character.\n\n#### Accepts\n\n`weq` is a `char`.\n\n`naz` is a `hair`.\n\n#### Produces\n\nA `hair`.\n\n#### Source\n\n```hoon\n++  lust  |=  [weq=char naz=hair]\n          ^-  hair\n          ?:(=(`@`10 weq) [+(p.naz) 1] [p.naz +(q.naz)])\n```\n\n#### Examples\n\n```\n> (lust `a` [1 1])\n[p=1 q=2]\n\n> (lust `@t`10 [1 1])\n[p=2 q=1]\n\n> (lust '9' [10 10])\n[p=10 q=11]\n\n> (roll \"maze\" [.(+<+ [1 1])]:lust)\n[1 5]\n\n> %-  roll  :_  [.(+<+ [1 1])]:lust\n  \"\"\"\n  Sam\n  lokes\n  \"\"\"\n[2 6]\n```\n\n---\n",
    "bend": "## `++bend`\n\nConditional composer\n\nParsing composer: connects the `edge` `vex` with the subsequent `rule` `sab`\nas an optional suffix, using gate `raq` to compose or reject its\nresult. If there is no suffix, or if the suffix fails to be composed\nwith the current result, the current result is produced. Used to map a\ngroup of rules to a specified output.\n\n#### Accepts\n\n`raq` is a gate.\n\n`sab` is a rule.\n\n`vex` is an edge.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  bend\n  ~/  %bend\n  =+  raq=|*([a=* b=*] [~ u=[a b]])\n  |@\n  ++  $\n    ~/  %fun\n    |*  [vex=edge sab=rule]\n    ?~  q.vex\n      vex\n    =+  yit=(sab q.u.q.vex)\n    =+  yur=(last p.vex p.yit)\n    ?~  q.yit\n      [p=yur q=q.vex]\n    =+  vux=(raq p.u.q.vex p.u.q.yit)\n    ?~  vux\n      [p=yur q=q.vex]\n    [p=yur q=[~ u=[p=u.vux q=q.u.q.yit]]]\n  --\n```\n\n#### Examples\n\n```\n> (;~((bend |=([a=char b=char] ?.(=(a b) ~ (some +(a))))) prn prn) [1 1] \"qs\")\n[p=[p=1 q=3] q=[~ u=[p=113 q=[p=[p=1 q=2] q=\"s\"]]]]\n\n> (;~((bend |=([a=char b=char] ?.(=(a b) ~ (some +(a))))) prn prn) [1 1] \"qqq\")\n[p=[p=1 q=3] q=[~ u=[p=114 q=[p=[p=1 q=3] q=\"q\"]]]]\n\n> `@t`(scan \"aa\" ;~((bend |=([a=char b=char] ?.(=(a b) ~ (some +(a))))) prn prn))\n'b'\n\n> (scan \"ba\" ;~((bend |=([a=char b=char] ?.(=(a b) ~ (some +(a))))) prn prn))\n{1 3}\nsyntax error\n\n> `(unit @tas)`(scan \"\" ;~((bend) (easy ~) sym))\n~\n\n> `(unit @tas)`(scan \"sep\" ;~((bend) (easy ~) sym))\n[~ %sep]\n```\n\n---\n",
    "comp": "## `++comp`\n\nArbitrary compose\n\nParsing composer: connects the `edge` `vex` with a following `rule` `sab`,\ncombining the contents of `vex` with the result of `sab` using a binary\ngate `raq`. Used to fold over the results of several `rule`s.\n\n#### Accepts\n\n`raq` is a gate that accepts a cell of two nouns, `a` and `b`, and\nproduces a cell of two nouns.\n\n`vex` is an edge.\n\n`sab` is a rule.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  comp\n  ~/  %comp\n  =+  raq=|*([a=* b=*] [a b])\n  |@\n  ++  $\n    ~/  %fun\n    |*  [vex=edge sab=rule]\n    ~!  +<\n    ?~  q.vex\n      vex\n    =+  yit=(sab q.u.q.vex)\n    =+  yur=(last p.vex p.yit)\n    ?~  q.yit\n      [p=yur q=q.yit]\n    [p=yur q=[~ u=[p=(raq p.u.q.vex p.u.q.yit) q=q.u.q.yit]]]\n  --\n```\n\n#### Examples\n\n```\n> (scan \"123\" ;~((comp |=([a=@ud b=@ud] (add a b))) dit dit dit))\n6\n\n> (scan \"12\" ;~((comp |=([a=@ud b=@ud] (add a b))) dit dit dit))\n{1 3}\nsyntax error\n```\n\n---\n",
    "fail": "## `++fail`\n\nNever parse\n\nProduces an `edge` at the same text position (`hair`) with a failing\nresult (`q=~`).\n\n#### Accepts\n\n`tub` is a `nail`.\n\n#### Produces\n\nAn `edge`.\n\n#### Source\n\n```hoon\n++  fail  |=(tub=nail [p=p.tub q=~])\n```\n\n#### Examples\n\n```\n> (fail [[1 1] \"abc\"])\n[p=[p=1 q=1] q=~]\n\n> (fail [[p=1.337 q=70] \"Parse me, please?\"])\n[p=[p=1.337 q=70] q=~]\n```\n\n---\n",
    "glue": "## `++glue`\n\nSkip delimiter\n\nParsing composer: connects an `edge` `vex` with a following `rule` `sab` by\nparsing the `rule` `bus` (the delimiting symbol) and throwing out the\nresult.\n\n#### Accepts\n\n`bus` is a `rule`.\n\n`vex` is an `edge`.\n\n`sab` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  glue\n  ~/  %glue\n  |*  bus=rule\n  ~/  %fun\n  |*  [vex=edge sab=rule]\n  (plug vex ;~(pfix bus sab))\n```\n\n#### Examples\n\n```\n> `[@ud @tas @tas]`(scan \"200|mal|bon\" ;~((glue bar) dem sym sym))\n[200 %mal %bon]\n\n> `[@ud @t @tas]`(scan \"200|;|bon\" ;~((glue bar) dem mic sym))\n[200 ';' %bon]\n```\n\n---\n",
    "less": "## `++less`\n\nParse unless\n\nParsing composer: if an `edge` `vex` reflects a success, fail. Otherwise,\nconnect `vex` with the following `rule`.\n\n#### Accepts\n\n`vex` is an `edge`.\n\n`sab` is a `rule`.\n\n#### Produces\n\nAn `edge`.\n\n#### Source\n\n```hoon\n++  less\n  |*  [vex=edge sab=rule]\n  ?~  q.vex\n    =+  roq=(sab)\n    [p=(last p.vex p.roq) q=q.roq]\n  (fail +<.sab)\n```\n\n#### Examples\n\n```\n> (scan \"sas-/lo\" (star ;~(less lus bar prn)))\n\"sas-/lo\"\n\n> (scan \"sas-/l+o\" (star ;~(less lus bar prn)))\n! {1 8}\n! exit\n\n> (scan \"sas|-/lo\" (star ;~(less lus bar prn)))\n! {1 5}\n! exit\n```\n\n---\n",
    "pfix": "## `++pfix`\n\nDiscard first rule\n\nParsing composer: connects an `edge` `vex` with two subsequent `rule`s,\nignoring the result of the first and producing the result of the second.\n\n#### Accepts\n\n`vex` is an `edge`.\n\n`sab` is a `rule`.\n\n#### Produces\n\nAn `edge`.\n\n#### Source\n\n```hoon\n++  pfix\n  ~/  %pfix\n  |*  sam=[vex=edge sab=rule]\n  %.  sam\n  (comp |*([a=* b=*] b))\n```\n\n#### Examples\n\n```\n> `@t`(scan \"%him\" ;~(pfix cen sym))\n'him'\n\n> (scan \"+++10\" ;~(pfix (star lus) dem))\n10\n```\n\n---\n",
    "plug": "## `++plug`\n\nParse to tuple\n\nParsing composer: connects an `edge` `vex` with a following `rule` `sab`,\nproducing a cell of both the results. See also: the monad applicator `;~` for a\nmore detailed explanation.\n\n#### Accepts\n\n`vex` is an `edge`.\n\n`sab` is a `rule`.\n\n#### Produces\n\nAn `edge`.\n\n#### Source\n\n```hoon\n++  plug\n  ~/  %plug\n  |*  [vex=edge sab=rule]\n  ?~  q.vex\n    vex\n  =+  yit=(sab q.u.q.vex)\n  =+  yur=(last p.vex p.yit)\n  ?~  q.yit\n    [p=yur q=q.yit]\n  [p=yur q=[~ u=[p=[p.u.q.vex p.u.q.yit] q=q.u.q.yit]]]\n```\n\n#### Examples\n\n```\n> (scan \"1..20\" ;~(plug dem dot dot dem))\n[1 '.' '.' 20]\n```\n\n---\n",
    "pose": "## `++pose`\n\nParse options\n\nParsing composer: if `vex` reflects a failure, connect it with the\nfollowing rule `sab`. See also: the monad applicator `;~`\n\n#### Accepts\n\n`vex` is an `edge`.\n\n`sab` is a `rule`.\n\n#### Produces\n\nAn `edge`.\n\n#### Source\n\n```hoon\n++  pose\n  ~/  %pose\n  |*  [vex=edge sab=rule]\n  ?~  q.vex\n    =+  roq=(sab)\n    [p=(last p.vex p.roq) q=q.roq]\n  vex\n```\n\n#### Examples\n\n```\n> `@t`(scan \"+\" ;~(pose lus tar cen))\n'+'\n\n> `@t`(scan \"*\" ;~(pose lus tar cen))\n'*'\n\n> `@t`(scan \"%\" ;~(pose lus tar cen))\n'%'\n\n> `@t`(scan \"-\" ;~(pose lus tar cen))\n! {1 1}\n! exit\n```\n\n---\n",
    "sfix": "## `++sfix`\n\nDiscard second rule\n\nParsing composer: connects `edge` `vex` with two subsequent `rule`s returning the\nresult of the first and discarding the result of the second.\n\n#### Accepts\n\n`vex` is an `edge`.\n\n`sab` is a `rule`.\n\n#### Produces\n\nAn `edge`.\n\n#### Source\n\n```hoon\n++  sfix\n  ~/  %sfix\n  |*  sam=[vex=edge sab=rule]\n  %.  sam\n  (comp |*([a=* b=*] a))\n```\n\n#### Examples\n\n```\n> `@t`(scan \"him%\" ;~(sfix sym cen))\n'him'\n\n> (scan \"10+++\" ;~(sfix dem (star lus)))\nq=10\n```\n\n---\n",
    "simu": "## `++simu`\n\nFirst and second\n\nParsing composer: if an `edge` `vex` reflects a failure, fail. Otherwise,\nconnect `vex` with the following `rule`.\n\n#### Accepts\n\n`vex` is an `edge`.\n\n`sab` is a `rule`.\n\n#### Produces\n\nAn `edge`.\n\n#### Source\n\n```hoon\n++  simu\n  |*  [vex=edge sab=rule]\n  ?~  q.vex\n    vex\n  =+  roq=(sab)\n  roq\n```\n\n#### Examples\n\n```\n> (scan \"~zod\" scat:vast)\n[%dtzy p=%p q=0]\n\n> (scan \"%zod\" scat:vast)\n[%dtzz p=%tas q=6.582.138]\n\n> (scan \"%zod\" ;~(simu cen scat:vast))\n[%dtzz p=%tas q=6.582.138]\n\n> (scan \"~zod\" ;~(simu cen scat:vast))\n! {1 1}\n! exit\n```\n\n---\n",
    "bass": "## `++bass`\n\nParser modifier: LSB\nordered `list` as atom of a `base`.\n\n#### Accepts\n\n`wuc` is an atom.\n\n`tyd` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  bass\n  |*  [wuc=@ tyd=rule]\n  %+  cook\n    |=  waq=(list @)\n    %+  roll\n      waq\n    =|([p=@ q=@] |.((add p (mul wuc q))))\n  tyd\n```\n\n#### Examples\n\n```\n> (scan \"123\" (bass 10 (star dit)))\nq=123\n> (scan \"123\" (bass 8 (star dit)))\nq=83\n> `@ub`(scan \"123\" (bass 8 (star dit)))\n0b101.0011\n```\n\n---\n",
    "boss": "## `++boss`\n\nParser modifier: LSB\n\nOrdered `list` as atom of a `base`.\n\n#### Accepts\n\n`wuc` is an atom.\n\n`tyd` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  boss\n  |*  [wuc=@ tyd=rule]\n  %+  cook\n    |=  waq=(list @)\n    %+  reel\n      waq\n    =|([p=@ q=@] |.((add p (mul wuc q))))\n  tyd\n```\n\n#### Examples\n\n```\n> (scan \"123\" (boss 10 (star dit)))\n321\n\n> `@t`(scan \"bam\" (boss 256 (star alp)))\n'bam'\n\n> `@ux`(scan \"bam\" (boss 256 (star alp)))\n0x6d.6162\n```\n\n---\n",
    "cold": "## `++cold`\n\nReplace with constant\n\nParser modifier. Accepts a `rule` `sef` and produces a parser that produces a\nconstant `cus`, assuming `sef` is successful.\n\n#### Accepts\n\n`cus` is a constant noun.\n\n`sef` is a `rule`.\n\n#### Produces\n\nAn `edge`.\n\n#### Source\n\n```hoon\n++  cold\n  ~/  %cold\n  |*  [cus=* sef=rule]\n  ~/  %fun\n  |=  tub=nail\n  =+  vex=(sef tub)\n  ?~  q.vex\n    vex\n  [p=p.vex q=[~ u=[p=cus q=q.u.q.vex]]]\n```\n\n#### Examples\n\n```\n> ((cold %foo (just 'a')) [[1 1] \"abc\"])\n[p=[p=1 q=2] q=[~ u=[p=%foo q=[p=[p=1 q=2] q=\"bc\"]]]]\n\n> ((cold %foo (just 'a')) [[1 1] \"bc\"])\n[p=[p=1 q=1] q=~]\n```\n\n---\n",
    "cook": "## `++cook`\n\nApply gate\n\nParser modifier. Produces a parser that takes a (successful) result of a\n`rule` `sef` and slams it through `poq`.\n\n#### Accepts\n\n`poq` is a gate.\n\n`sef` is a `rule`.\n\n#### Produces\n\nAn `rule`.\n\n#### Source\n\n```hoon\n++  cook\n  ~/  %cook\n  |*  [poq=gate sef=rule]\n  ~/  %fun\n  |=  tub=nail\n  =+  vex=(sef tub)\n  ?~  q.vex\n    vex\n  [p=p.vex q=[~ u=[p=(poq p.u.q.vex) q=q.u.q.vex]]]\n```\n\n#### Examples\n\n```\n> ((cook ,@ud (just 'a')) [[1 1] \"abc\"])\n[p=[p=1 q=2] q=[~ u=[p=97 q=[p=[p=1 q=2] q=\"bc\"]]]]\n\n> ((cook ,@tas (just 'a')) [[1 1] \"abc\"])\n[p=[p=1 q=2] q=[~ u=[p=%a q=[p=[p=1 q=2] q=\"bc\"]]]]\n\n> ((cook |=(a=@ +(a)) (just 'a')) [[1 1] \"abc\"])\n[p=[p=1 q=2] q=[~ u=[p=98 q=[p=[p=1 q=2] q=\"bc\"]]]]\n\n> ((cook |=(a=@ `@t`+(a)) (just 'a')) [[1 1] \"abc\"])\n[p=[p=1 q=2] q=[~ u=[p='b' q=[p=[p=1 q=2] q=\"bc\"]]]]\n```\n\n---\n",
    "easy": "## `++easy`\n\nAlways parse\n\nParser generator. Produces a parser that succeeds with given noun `huf`\nwithout consuming any text.\n\n#### Accepts\n\n`huf` is a noun.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  easy\n  ~/  %easy\n  |*  huf=*\n  ~/  %fun\n  |=  tub=nail\n  ^-  (like _huf)\n  [p=p.tub q=[~ u=[p=huf q=tub]]]\n```\n\n#### Examples\n\n```\n> ((easy %foo) [[1 1] \"abc\"])\n[p=[p=1 q=1] q=[~ [p=%foo q=[p=[p=1 q=1] q=\"abc\"]]]]\n\n> ((easy %foo) [[1 1] \"bc\"])\n[p=[p=1 q=1] q=[~ [p=%foo q=[p=[p=1 q=1] q=\"bc\"]]]]\n\n> ((easy 'a') [[1 1] \"bc\"])\n[p=[p=1 q=1] q=[~ [p='a' q=[p=[p=1 q=1] q=\"bc\"]]]]\n```\n\n---\n",
    "fuss": "## `++fuss`\n\nHas A or B?\n\nIf string `sic` is parsed: `%.y`. If string `non` is parsed: `%.n`. Otherwise, fail.\n\n#### Accepts\n\n`sic` is a `@t`.\n\n`non` is a `@t`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  fuss\n  |=  [sic=@t non=@t]\n  ;~(pose (cold %& (jest sic)) (cold %| (jest non)))\n```\n\n#### Examples\n\n```\n> (rash 'foo' (fuss 'foo' 'bar'))\n%.y\n\n> (rash 'bar' (fuss 'foo' 'bar'))\n%.n\n\n> (rash 'baz' (fuss 'foo' 'bar'))\n{1 3}\nsyntax error\n```\n\n---\n",
    "full": "## `++full`\n\nParse to end\n\nParser modifier. Accepts a `rule` `sef`, and produces a parser that succeeds\nonly when the `tape` of `tub` is fully consumed using `sef`.\n\n#### Accepts\n\n`sef` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  full\n  |*  sef=rule\n  |=  tub=nail\n  =+  vex=(sef tub)\n  ?~(q.vex vex ?:(=(~ q.q.u.q.vex) vex [p=p.vex q=~]))\n```\n\n#### Examples\n\n```\n> ((full (just 'a')) [[1 1] \"ab\"])\n[p=[p=1 q=2] q=~]\n\n> ((full (jest 'ab')) [[1 1] \"ab\"])\n[p=[p=1 q=3] q=[~ u=[p='ab' q=[p=[p=1 q=3] q=\"\"]]]]\n\n> ((full ;~(plug (just 'a') (just 'b'))) [[1 1] \"ab\"])\n[p=[p=1 q=3] q=[~ u=[p=['a' 'b'] q=[p=[p=1 q=3] q=\"\"]]]]\n```\n\n---\n",
    "funk": "## `++funk`\n\nAdd to tape\n\nParser modifier: prepend text to `tape` before applying parser.\n\n#### Accepts\n\n`pre` is a `tape`\n\n`sef` is a `rule`\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  funk\n  |*  [pre=tape sef=rule]\n  |=  tub=nail\n  (sef p.tub (weld pre q.tub))\n```\n\n#### Examples\n\n```\n> ((funk \"abc prefix-\" (jest 'abc')) [[1 1] \"to be parsed\"])\n[p=[p=1 q=4] q=[~ [p='abc' q=[p=[p=1 q=4] q=\" prefix-to be parsed\"]]]]\n\n> ((funk \"parse\" (just 'a')) [[1 4] \" me\"])\n[p=[p=1 q=4] q=~]\n```\n\n---\n",
    "here": "## `++here`\n\nPlace-based apply\n\nParser modifier. Similar to `++cook` in that it produces a parser that takes a\n(successful) result of `sef` and slams it through `hez`. `hez` accepts a\n`pint` `a` and a noun `b`, which is what the parser parsed.\n\n#### Accepts\n\n`hez` is a gate.\n\n`sef` is a `rule`\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  here\n  ~/  %here\n  =+  [hez=|=([a=pint b=*] [a b]) sef=*rule]\n  |@\n  ++  $\n    ~/  %fun\n    |=  tub=nail\n    =+  vex=(sef tub)\n    ?~  q.vex\n      vex\n    [p=p.vex q=[~ u=[p=(hez [p.tub p.q.u.q.vex] p.u.q.vex) q=q.u.q.vex]]]\n  --\n```\n\n#### Examples\n\n```\n> (scan \"abc\" (star alf))\n\"abc\"\n\n> (scan \"abc\" (here |*(^ +<) (star alf)))\n[[[p=1 q=1] p=1 q=4] \"abc\"]\n\n> (scan \"abc\" (star (here |*(^ +<) alf)))\n~[[[[p=1 q=1] p=1 q=2] ~~a] [[[p=1 q=2] p=1 q=3] ~~b] [[[p=1 q=3] p=1 q=4] ~~c]]\n```\n",
    "inde": "## `++inde`\n\nIndentation block\n\nApply `rule` to indented block starting at current column number, omitting the\nleading whitespace.\n\n#### Accepts\n\n`sef` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  inde  |*  sef=rule\n  |=  nail  ^+  (sef)\n  =+  [har tap]=[p q]:+<\n  =+  lev=(fil 3 (dec q.har) ' ')\n  =+  eol=(just `@t`10)\n  =+  =-  roq=((star ;~(pose prn ;~(sfix eol (jest lev)) -)) har tap)\n      ;~(simu ;~(plug eol eol) eol)\n  ?~  q.roq  roq\n  =+  vex=(sef har(q 1) p.u.q.roq)\n  =+  fur=p.vex(q (add (dec q.har) q.p.vex))\n  ?~  q.vex  vex(p fur)\n  =-  vex(p fur, u.q -)\n  :+  &3.vex\n    &4.vex(q.p (add (dec q.har) q.p.&4.vex))\n  =+  res=|4.vex\n  |-  ?~  res  |4.roq\n  ?.  =(10 -.res)  [-.res $(res +.res)]\n  (welp [`@t`10 (trip lev)] $(res +.res))\n```\n\n#### Examples\n\n```\n> `tape`(scan \"   foo\\0a   bar\" ;~(pfix ace ace ace (inde (star ;~(pose prn (just '\\0a'))))))\n\"foo\\0abar\"\n```\n\n#### Discussion\n\nNote the amount of indentation whitespace to be stripped from the beginning of\neach line is determined by the value of `q` (the column) in the `hair` when\n`++inde` is first called. This means something like the `pfix` expression in the\nexample above is necessary to set the level of indentation. Additionally, the\n`rule` given to `++inde` must consume the whole line including the line ending.\n\n---\n",
    "ifix": "## `++ifix`\n\nInfix\n\nParser modifier: surround with pair of `rule`s, the output of which is\ndiscarded.\n\n#### Accepts\n\n`fel` is a pair of `rule`s.\n\n`hof` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  ifix\n  |*  [fel=[rule rule] hof=rule]\n  ~!  +<\n  ~!  +<:-.fel\n  ~!  +<:+.fel\n  ;~(pfix -.fel ;~(sfix hof +.fel))\n```\n\n#### Examples\n\n```\n> (scan \"-40-\" (ifix [hep hep] dem))\n40\n\n> (scan \"4my4\" (ifix [dit dit] (star alf)))\n\"my\"\n```\n\n---\n",
    "jest": "## `++jest`\n\nMatch a cord\n\nMatch and consume a cord.\n\n#### Accepts\n\n`daf` is a `@t`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  jest\n  |=  daf=@t\n  |=  tub=nail\n  =+  fad=daf\n  |-  ^-  (like @t)\n  ?:  =(`@`0 daf)\n    [p=p.tub q=[~ u=[p=fad q=tub]]]\n  ?:  |(?=(~ q.tub) !=((end 3 daf) i.q.tub))\n    (fail tub)\n  $(p.tub (lust i.q.tub p.tub), q.tub t.q.tub, daf (rsh 3 daf))\n```\n\n#### Examples\n\n```\n> ((jest 'abc') [[1 1] \"abc\"])\n[p=[p=1 q=4] q=[~ [p='abc' q=[p=[p=1 q=4] q=\"\"]]]]\n\n> (scan \"abc\" (jest 'abc'))\n'abc'\n\n> (scan \"abc\" (jest 'acb'))\n! {1 2}\n! 'syntax-error'\n! exit\n\n> ((jest 'john doe') [[1 1] \"john smith\"])\n[p=[p=1 q=6] q=~]\n\n> ((jest 'john doe') [[1 1] \"john doe\"])\n[p=[p=1 q=9] q=[~ [p='john doe' q=[p=[p=1 q=9] q=\"\"]]]]\n```\n\n---\n",
    "just": "## `++just`\n\nMatch a char\n\nMatch and consume a single character.\n\n#### Accepts\n\n`daf` is a `char`\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  just\n  ~/  %just\n  |=  daf=char\n  ~/  %fun\n  |=  tub=nail\n  ^-  (like char)\n  ?~  q.tub\n    (fail tub)\n  ?.  =(daf i.q.tub)\n    (fail tub)\n  (next tub)\n```\n\n#### Examples\n\n```\n> ((just 'a') [[1 1] \"abc\"])\n[p=[p=1 q=2] q=[~ [p='a' q=[p=[p=1 q=2] q=\"bc\"]]]]\n\n> (scan \"abc\" (just 'a'))\n! {1 2}\n! 'syntax-error'\n! exit\n\n> (scan \"a\" (just 'a'))\n'a'\n\n> (scan \"%\" (just '%'))\n'%'\n```\n\n---\n",
    "knee": "## `++knee`\n\nRecursive parsers\n\nUsed for recursive parsers, which would otherwise be infinite when\ncompiled.\n\n#### Accepts\n\n`gar` is a noun.\n\n`sef` is a gate that accepts a `rule`\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  knee\n  =|  [gar=* sef=_|.(*rule)]\n  |@  ++  $\n        |=  tub=nail\n        ^-  (like _gar)\n        ((sef) tub)\n  --\n```\n\n#### Examples\n\n```\n> |-(;~(plug prn ;~(pose $ (easy ~))))\n! rest-loop\n! exit\n\n> |-(;~(plug prn ;~(pose (knee *tape |.(^$)) (easy ~))))\n< 1.obo\n  [ c=c=tub=[p=[p=@ud q=@ud] q=\"\"]\n      b\n    < 1.bes\n      [ c=tub=[p=[p=@ud q=@ud] q=\"\"]\n        b=<1.tnv [tub=[p=[p=@ud q=@ud] q=\"\"] <1.ktu [daf=@tD <414.fvk 101.jzo 1.ypj %164>]>]>\n        a=<1.fvg [tub=[p=[p=@ud q=@ud] q=\"\"] <1.khu [[les=@ mos=@] <414.fvk 101.jzo 1.ypj %164>]>]>\n        v=<414.fvk 101.jzo 1.ypj %164>\n      ]\n    >\n      a\n    ... 450 lines omitted ...\n  ]\n>\n\n> (scan \"abcd\" |-(;~(plug prn ;~(pose (knee *tape |.(^$)) (easy ~)))))\n['a' \"bcd\"]\n```\n\n---\n",
    "mask": "## `++mask`\n\nMatch char\n\nParser generator. Matches the next character if it is in a list of characters.\n\n#### Accepts\n\n`bud` is a list of `char`\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  mask\n  ~/  %mask\n  |=  bud=(list char)\n  ~/  %fun\n  |=  tub=nail\n  ^-  (like char)\n  ?~  q.tub\n    (fail tub)\n  ?.  (lien bud |=(a=char =(i.q.tub a)))\n    (fail tub)\n  (next tub)\n```\n\n#### Examples\n\n```\n> (scan \"a\" (mask \"cba\"))\n'a'\n\n> ((mask \"abc\") [[1 1] \"abc\"])\n[p=[p=1 q=2] q=[~ [p='a' q=[p=[p=1 q=2] q=\"bc\"]]]]\n\n> ((mask \"abc\") [[1 1] \"bbc\"])\n[p=[p=1 q=2] q=[~ [p='b' q=[p=[p=1 q=2] q=\"bc\"]]]]\n\n> ((mask \"abc\") [[1 1] \"dbc\"])\n[p=[p=1 q=1] q=~]\n```\n\n---\n",
    "more": "## `++more`\n\nParse list with delimiter\n\nParser modifier: Parse a list of matches using a delimiter `rule`.\n\n#### Accepts\n\n`bus` is a `rule`.\n\n`fel` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  more\n  |*  [bus=rule fel=rule]\n  ;~(pose (most bus fel) (easy ~))\n```\n\n#### Examples\n\n```\n> (scan \"\" (more ace dem))\n~\n\n> (scan \"40 20\" (more ace dem))\n[40 [i=20 t=~]]\n\n> (scan \"40 20 60 1 5\" (more ace dem))\n[40 [i=20 t=~[60 1 5]]]\n```\n\n---\n",
    "most": "## `++most`\n\nParse list of at least one match\n\nParser modifier: parse a `list` of at least one match using a delimiter `rule`.\n\n#### Accepts\n\n`bus` is a `rule`.\n\n`fel` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  most\n  |*  [bus=rule fel=rule]\n  ;~(plug fel (star ;~(pfix bus fel)))\n```\n\n#### Examples\n\n```\n> (scan \"40 20\" (most ace dem))\n[40 [i=20 t=~]]\n\n> (scan \"40 20 60 1 5\" (most ace dem))\n[40 [i=20 t=~[60 1 5]]]\n\n> (scan \"\" (most ace dem))\n! {1 1}\n! exit\n```\n\n---\n",
    "next": "## `++next`\n\nConsume char\n\nConsume any character, producing it as a result.\n\n#### Accepts\n\n`tub` is a `nail`\n\n#### Produces\n\nAn `edge`.\n\n#### Source\n\n```hoon\n++  next\n  |=  tub=nail\n  ^-  (like char)\n  ?~  q.tub\n    (fail tub)\n  =+  zac=(lust i.q.tub p.tub)\n  [zac [~ i.q.tub [zac t.q.tub]]]\n```\n\n#### Examples\n\n```\n> (next [[1 1] \"ebc\"])\n[p=[p=1 q=2] q=[~ [p='e' q=[p=[p=1 q=2] q=\"bc\"]]]]\n\n> (next [[1 1] \"john jumps jones\"])\n[p=[p=1 q=2] q=[~ [p='j' q=[p=[p=1 q=2] q=\"ohn jumps jones\"]]]]\n```\n\n---\n",
    "perk": "## `++perk`\n\nParse cube fork\n\nGiven `a`, a list of `@tas`, match any one in the list and produce it. Note the\nlist should not be a `list` type, but just a null-terminated cell like `~[%foo %bar %baz]`. The type produced will be a union of the items in the given list,\nso you can use a `?-` expression on the output.\n\n#### Accepts\n\n`a` is a `(pole @tas)`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  perk\n  |*  a=(pole @tas)\n  ?~  a  fail\n  ;~  pose\n    (cold -.a (jest -.a))\n    $(a +.a)\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"foo\" (perk ~[%foo %bar]))\n%foo\n\n> (scan \"bar\" (perk ~[%foo %bar]))\n%bar\n\n> (scan \"baz\" (perk ~[%foo %bar]))\n{1 3}\nsyntax error\n```\n\n---\n",
    "plus": "## `++plus`\n\nList of at least one match.\n\nParser modifier: parse `list` of at least one match.\n\n#### Accepts\n\n`fel` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  plus  |*(fel=rule ;~(plug fel (star fel)))          ::\n```\n\n#### Examples\n\n```\n> (scan \">>>>\" (cook lent (plus gar)))\n4\n\n> (scan \"-  - \" (plus ;~(pose ace hep)))\n['-' [i=' ' t=~[' ' '-' ' ']]]\n\n> `tape`(scan \"-  - \" (plus ;~(pose ace hep)))\n\"-  - \"\n\n> `(pole ,@t)`(scan \"-  - \" (plus ;~(pose ace hep)))\n['-' [' ' [' ' ['-' [' ' ~]]]]]\n```\n\n---\n",
    "punt": "## `++punt`\n\nUnitized parse\n\nEither successfully apply `rule` `a` and produce a `unit` of the result, or produce `~`.\n\n#### Accepts\n\n`a` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  punt  |*([a=rule] ;~(pose (stag ~ a) (easy ~)))\n```\n\n#### Example\n\n```\n> ((punt (jest 'foo')) 1^1 \"foo\")\n[p=[p=1 q=4] q=[~ u=[p=[~ 'foo'] q=[p=[p=1 q=4] q=~]]]]\n\n> ((punt (jest 'foo')) 1^1 \"bar\")\n[p=[p=1 q=1] q=[~ [p=~ q=[p=[p=1 q=1] q=\"bar\"]]]]\n```\n\n---\n",
    "sear": "## `++sear`\n\nConditional `cook`\n\nConditional `cook`. Slams the result through a gate that produces\na unit; if that unit is empty, fail.\n\n#### Accepts\n\n`pyq` is a gate that produces a `unit`.\n\n`sef` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  sear\n  |*  [pyq=$-(* (unit)) sef=rule]\n  |=  tub=nail\n  =+  vex=(sef tub)\n  ?~  q.vex\n    vex\n  =+  gey=(pyq p.u.q.vex)\n  ?~  gey\n    [p=p.vex q=~]\n  [p=p.vex q=[~ u=[p=u.gey q=q.u.q.vex]]]\n```\n\n#### Examples\n\n```\n> ((sear |=(a=* ?@(a (some a) ~)) (just 'a')) [[1 1] \"abc\"])\n[p=[p=1 q=2] q=[~ u=[p=97 q=[p=[p=1 q=2] q=\"bc\"]]]]\n\n> ((sear |=(* ~) (just 'a')) [[1 1] \"abc\"])\n[p=[p=1 q=2] q=~]\n```\n\n---\n",
    "shim": "## `++shim`\n\nChar in range\n\nMatch characters (`char`) within a range.\n\n#### Accepts\n\n`les` is an atom.\n\n`mos` is an atom.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  shim\n  ~/  %shim\n  |=  [les=@ mos=@]\n  ~/  %fun\n  |=  tub=nail\n  ^-  (like char)\n  ?~  q.tub\n    (fail tub)\n  ?.  ?&((gte i.q.tub les) (lte i.q.tub mos))\n    (fail tub)\n  (next tub)\n```\n\n#### Examples\n\n```\n> `tape`(rash 'abc' (plus (shim 'a' 'z')))\n\"abc\"\n\n> `tape`(rash 'ABC' (plus (shim 'a' 'z')))\n{1 1}\nsyntax error\n```\n\n---\n",
    "slug": "## `++slug`\n\nUse gate to parse delimited list\n\nParser modifier: By composing with a gate, parse a delimited `list` of\nmatches.\n\n#### Accepts\n\n`raq` is a binary gate.\n\n`bus` is a `rule`.\n\n`fel` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  slug\n  |*  raq=_=>(~ |*([a=* b=*] [a b]))\n  |*  [bus=rule fel=rule]\n  ;~((comp raq) fel (stir +<+.raq raq ;~(pfix bus fel)))\n```\n\n#### Examples\n\n```\n> (scan \"20+5+110\" ((slug add) lus dem))\n135\n\n> `@t`(scan \"a b c\" ((slug |=(a=[@t @t] (cat 3 a))) ace alp))\n'abc'\n```\n\n---\n",
    "stag": "## `++stag`\n\nAdd label\n\nAdd a label to an `edge` parsed by a `rule`.\n\n#### Accepts\n\n`gob` is a noun.\n\n`sef` is a rule.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  stag\n  ~/  %stag\n  |*  [gob=* sef=rule]\n  ~/  %fun\n  |=  tub=nail\n  =+  vex=(sef tub)\n  ?~  q.vex\n    vex\n  [p=p.vex q=[~ u=[p=[gob p.u.q.vex] q=q.u.q.vex]]]\n```\n\n#### Examples\n\n```\n> (rash 'abc' (stag %foo (jest 'abc')))\n[%foo 'abc']\n```\n\n---\n",
    "star": "## `++star`\n\nList of matches\n\nParser modifier: parse `list` of matches.\n\n#### Accepts\n\n`fel` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  star\n  |*  fel=rule\n  (stir `(list _(wonk *fel))`~ |*([a=* b=*] [a b]) fel)\n```\n\n#### Examples\n\n```\n> (scan \"aaaaa\" (just 'a'))\n! {1 2}\n! 'syntax-error'\n! exit\n\n> (scan \"aaaaa\" (star (just 'a')))\n\"aaaaa\"\n\n> (scan \"abcdef\" (star (just 'a')))\n! {1 2}\n! 'syntax-error'\n! exit\n\n> (scan \"abcabc\" (star (jest 'abc')))\n<|abc abc|>\n\n> (scan \"john smith\" (star (shim 0 200)))\n\"john smith\"\n```\n\n---\n",
    "stet": "## `++stet`\n\nAdd faces\n\nAdd faces `[p q]` to range-parser pairs in a list. Typically used in combination\nwith [`++stew`](#stew).\n\n#### Accepts\n\n`leh` is a list of range-parsers.\n\n#### Produces\n\nA `(list [p=?(@ [@ @]) q=rule])`.\n\n#### Source\n\n```hoon\n++  stet\n  |*  leh=(list [?(@ [@ @]) rule])\n  |-\n  ?~  leh\n    ~\n  [i=[p=-.i.leh q=+.i.leh] t=$(leh t.leh)]\n```\n\n#### Examples\n\n```\n> =rule %-  stew\n        %-  stet\n        %-  limo\n        :~\n          [['a' 'z'] (cook |=(a=@ (sub a 32)) alp)]\n          [['A' 'Z'] (cook |=(a=@ (add a 32)) alp)]\n        ==\n\n> `tape`(rash 'fooBARbaz' (star rule))\n\"FOObarBAZ\"\n```\n\n---\n",
    "stew": "## `++stew`\n\nSwitch by first char\n\nParser generator. From an associative `list` of characters or character\nranges to `rule`s, construct a `map`, and parse `tape`s only\nwith `rule`s associated with a range that the `tape`'s first character falls in.\n\n#### Accepts\n\n`leh` is a `(list [p=?(@ [@ @]) q=rule])`, where `p` is a `char` or `char` range.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  stew                                                ::  switch by first char\n  ~/  %stew\n  |*  leh=(list [p=?(@ [@ @]) q=rule])                  ::  char+range keys\n  =+  ^=  wor                                           ::  range complete lth\n      |=  [ort=?(@ [@ @]) wan=?(@ [@ @])]\n      ?@  ort\n        ?@(wan (lth ort wan) (lth ort -.wan))\n      ?@(wan (lth +.ort wan) (lth +.ort -.wan))\n  =+  ^=  hel                                           ::  build parser map\n      =+  hel=`(tree _?>(?=(^ leh) i.leh))`~\n      |-  ^+  hel\n      ?~  leh\n        ~\n      =+  yal=$(leh t.leh)\n      |-  ^+  hel\n      ?~  yal\n        [i.leh ~ ~]\n      ?:  (wor p.i.leh p.n.yal)\n        =+  nuc=$(yal l.yal)\n        ?>  ?=(^ nuc)\n        ?:  (mor p.n.yal p.n.nuc)\n          [n.yal nuc r.yal]\n        [n.nuc l.nuc [n.yal r.nuc r.yal]]\n      =+  nuc=$(yal r.yal)\n      ?>  ?=(^ nuc)\n      ?:  (mor p.n.yal p.n.nuc)\n        [n.yal l.yal nuc]\n      [n.nuc [n.yal l.yal l.nuc] r.nuc]\n  ~%  %fun  ..^$  ~\n  |=  tub=nail\n  ?~  q.tub\n    (fail tub)\n  |-\n  ?~  hel\n    (fail tub)\n  ?:  ?@  p.n.hel\n        =(p.n.hel i.q.tub)\n      ?&((gte i.q.tub -.p.n.hel) (lte i.q.tub +.p.n.hel))\n    ::  (q.n.hel [(lust i.q.tub p.tub) t.q.tub])\n    (q.n.hel tub)\n  ?:  (wor i.q.tub p.n.hel)\n    $(hel l.hel)\n  $(hel r.hel)\n```\n\n#### Examples\n\n```\n> =rule %-  stew\n        %-  stet\n        %-  limo\n        :~\n          [['a' 'z'] (cook |=(a=@ (sub a 32)) alp)]\n          [['A' 'Z'] (cook |=(a=@ (add a 32)) alp)]\n        ==\n\n> `tape`(rash 'fooBARbaz' (star rule))\n\"FOObarBAZ\"\n```\n\n---\n",
    "stir": "## `++stir`\n\nParse repeatedly\n\nParse with `rule` as many times as possible, and fold over results with a\nbinary gate.\n\n#### Accepts\n\n`rud` is a noun.\n\n`raq` is a gate that takes two nouns and produces a cell.\n\n`fel` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  stir\n  ~/  %stir\n  |*  [rud=* raq=_=>(~ |*([a=* b=*] [a b])) fel=rule]\n  ~/  %fun\n  |=  tub=nail\n  ^-  (like _rud)\n  ::\n  ::  lef: successful interim parse results (per .fel)\n  ::  wag: initial accumulator (.rud in .tub at farthest success)\n  ::\n  =+  ^=  [lef wag]\n    =|  lef=(list _(fel tub))\n    |-  ^-  [_lef (pair hair [~ u=(pair _rud nail)])]\n    =+  vex=(fel tub)\n    ?~  q.vex\n      :-  lef\n      [p.vex [~ rud tub]]\n    $(lef [vex lef], tub q.u.q.vex)\n  ::\n  ::  fold .lef into .wag, combining results with .raq\n  ::\n  %+  roll  lef\n  |=  _[vex=(fel tub) wag=wag]  :: q.vex is always (some)\n  ^+  wag\n  :-  (last p.vex p.wag)\n  [~ (raq p.u.+.q.vex p.u.q.wag) q.u.q.wag]\n```\n\n#### Examples\n\n```\n> (scan \"abc\" (stir *@ add prn))\n294\n\n> (roll \"abc\" add)\n294\n```\n\n---\n",
    "stun": "## `++stun`\n\nParse several times\n\nParse bounded number of times.\n\n#### Accepts\n\n`lig` is a cell of atoms (`[@ @]`) indicating the bounds.\n\n`fel` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  stun\n  ~/  %stun\n  |*  [lig=[@ @] fel=rule]\n  |=  tub=nail\n  ^-  (like (list _(wonk (fel))))\n  ?:  =(0 +.lig)\n    [p.tub [~ ~ tub]]\n  =+  vex=(fel tub)\n  ?~  q.vex\n    ?:  =(0 -.lig)\n      [p.vex [~ ~ tub]]\n    vex\n  =+  ^=  wag  %=  $\n                 -.lig  ?:(=(0 -.lig) 0 (dec -.lig))\n                 +.lig  ?:(=(0 +.lig) 0 (dec +.lig))\n                 tub  q.u.q.vex\n               ==\n  ?~  q.wag\n    wag\n  [p.wag [~ [p.u.q.vex p.u.q.wag] q.u.q.wag]]\n```\n\n#### Examples\n\n```\n> ((stun [5 10] prn) [1 1] \"aquickbrownfoxran\")\n[p=[p=1 q=11] q=[~ [p=\"aquickbrow\" q=[p=[p=1 q=11] q=\"nfoxran\"]]]]\n\n> ((stun [5 10] prn) [1 1] \"aquickbro\")\n[p=[p=1 q=10] q=[~ [p=\"aquickbro\" q=[p=[p=1 q=10] q=\"\"]]]]\n\n> ((stun [5 10] prn) [1 1] \"aqui\")\n[p=[p=1 q=5] q=~]\n```\n\n---\n",
    "rash": "## `++rash`\n\nParse or crash\n\nParse a cord with a given `rule` and crash if the `cord` isn't entirely\nparsed.\n\n#### Accepts\n\n`naf` is an atom.\n\n`sab` is a `rule`.\n\n#### Produces\n\nThe value of the parse result, or crash.\n\n#### Source\n\n```hoon\n++  rash  |*([naf=@ sab=rule] (scan (trip naf) sab))\n```\n\n#### Examples\n\n```\n> (rash 'I was the world in which I walked, and what I saw' (star (shim 0 200)))\n\"I was the world in which I walked, and what I saw\"\n\n> (rash 'abc' (just 'a'))\n! {1 2}\n! 'syntax-error'\n! exit\n\n> (rash 'abc' (jest 'abc'))\n'abc'\n\n> (rash 'abc' (jest 'ab'))\n! {1 3}\n! 'syntax-error'\n! exit\n```\n\n---\n",
    "rose": "## `++rose`\n\nParse to each\n\nParse `tape` `los` with `rule` `sab`, producing an `(each @ud (unit *))`. If\n`los` was not fully consumed, the result is `%.n` and `p` contains the column\nnumber before failure occurred. If `los` was fully consumed, the result is\n`%.y` and `p` contains either `sab`'s result in a `unit`, or a null `unit` if\nparsing failed.\n\n#### Accepts\n\n`los` is a `tape`.\n\n`sab` is a `rule`.\n\n#### Produces\n\n`(each @ud (unit *))`, where the `*` is whatever type the `rule` produces.\n\n#### Source\n\n```hoon\n++  rose  |*  [los=tape sab=rule]\n          =+  vex=(sab [[1 1] los])\n          =+  len=(lent los)\n          ?.  =(+(len) q.p.vex)  [%| p=(dec q.p.vex)]\n          ?~  q.vex\n            [%& p=~]\n          [%& p=[~ u=p.u.q.vex]]\n```\n\n#### Examples\n\n```\n> (rose \"!\" zap)\n[%.y p=[~ u='!']]\n\n> (rose \"?\" zap)\n[%.n p=0]\n\n> (rose \"!?\" zap)\n[%.n p=1]\n\n> (rose \"!\" ;~(plug zap fail))\n[%.y p=~]\n```\n\n---\n",
    "rush": "## `++rush`\n\nParse or null\n\nParse an atom with a given rule and produce null if the cord isn't\nentirely parsed.\n\n#### Accepts\n\n`naf` is an atom.\n\n`sab` is a rule.\n\n#### Produces\n\nThe value of the parse result, or null.\n\n#### Source\n\n```hoon\n++  rush  |*([naf=@ sab=rule] (rust (trip naf) sab))\n```\n\n#### Examples\n\n```\n> (rush 'I was the world in which I walked, and what I saw' (star (shim 0 200)))\n[~ \"I was the world in which I walked, and what I saw\"]\n\n> (rush 'abc' (just 'a'))\n~\n\n> (rush 'abc' (jest 'abc'))\n[~ 'abc']\n\n> (rush 'abc' (jest 'ac'))\n~\n\n> (rush 'abc' (jest 'ab'))\n~\n```\n\n---\n",
    "rust": "## `++rust`\n\nParse tape or null\n\nParse a `tape` with a given `rule` and produce null if the `tape` isn't\nentirely parsed.\n\n#### Accepts\n\n`los` is a `tape`.\n\n`sab` is a `rule`.\n\n#### Produces\n\nA `(unit *)`, where `*` is the type produced by `sab`.\n\n#### Source\n\n```hoon\n++  rust  |*  [los=tape sab=rule]\n          =+  vex=((full sab) [[1 1] los])\n          ?~(q.vex ~ [~ u=p.u.q.vex])\n```\n\n#### Examples\n\n```\n> (rust \"I was the world in which I walked, and what I saw\" (star (shim 0 200)))\n[~ \"I was the world in which I walked, and what I saw\"]\n\n> (rust \"Or heard or felt came not but from myself;\" (star (shim 0 200)))\n[~ \"Or heard or felt came not but from myself;\"]\n\n> (rust \"And there I found myself more truly and more strange.\" (jest 'And there I'))\n~\n```\n\n---\n",
    "scan": "## `++scan`\n\nParse tape or crash\n\nParse a `tape` with a given `rule` and crash if the `tape` isn't entirely\nparsed.\n\n#### Accepts\n\n`los` is a `tape`.\n\n`sab` is a `rule`.\n\n#### Produces\n\nEither a `tape` or a crash.\n\n#### Source\n\n```hoon\n++  scan  |*  [los=tape sab=rule]\n          =+  vex=((full sab) [[1 1] los])\n          ?~  q.vex\n            ~_  (show [%m '{%d %d}'] p.p.vex q.p.vex ~)\n            ~_(leaf+\"syntax error\" !!)\n          p.u.q.vex\n```\n\n#### Examples\n\n```\n> (scan \"I was the world in which I walked, and what I saw\" (star (shim 0 200)))\n\"I was the world in which I walked, and what I saw\"\n\n> (scan \"Or heard or felt came not but from myself;\" (star (shim 0 200)))\n\"Or heard or felt came not but from myself;\"\n\n> (scan \"And there I found myself more truly and more strange.\" (jest 'And there I'))\n! {1 12}\n! 'syntax-error'\n! exit\n```\n\n---\n",
    "ace": "## `++ace`\n\nParse space\n\nParses ASCII character 32, space.\n\n#### Source\n\n```hoon\n++  ace  (just ' ')\n```\n\n#### Examples\n\n```\n> (scan \" \" ace)\n' '\n```\n\n---\n",
    "bar": "## `++bar`\n\nParse vertical bar\n\nParses ASCII character 124, the vertical bar.\n\n#### Source\n\n```hoon\n++  bar  (just '|')\n```\n\n#### Examples\n\n```\n> (scan \"|\" bar)\n'|'\n```\n\n---\n",
    "bas": "## `++bas`\n\nParse backslash\n\nParses ASCII character 92, the backslash. Note the extra `\\` in the calling of\n`bas` with [`just`](/reference/hoon/stdlib/4f#just) is to escape the escape\ncharacter, `\\`.\n\n#### Source\n\n```hoon\n++  bas  (just '\\\\')\n```\n\n#### Examples\n\n```\n> (scan \"\\\\\" bas)\n'\\\\'\n```\n\n---\n",
    "buc": "## `++buc`\n\nParse dollar sign\n\nParses ASCII character 36, the dollar sign.\n\n#### Source\n\n```hoon\n++  buc  (just '$')\n```\n\n#### Examples\n\n```\n> (scan \"$\" buc)\n'$'\n```\n\n---\n",
    "cab": "## `++cab`\n\nParse underscore\n\nParses ASCII character 95, the underscore.\n\n#### Source\n\n```hoon\n++  cab  (just '_')\n```\n\n#### Examples\n\n```\n> (scan \"_\" cab)\n'_'\n```\n\n---\n",
    "cen": "## `++cen`\n\nParses percent sign\n\nParses ASCII character 37, the percent sign.\n\n#### Source\n\n```hoon\n++  cen  (just '%')\n```\n\n#### Examples\n\n```\n> (scan \"%\" cen)\n'%'\n```\n\n---\n",
    "col": "## `++col`\n\nParse colon\n\nParses ASCII character 58, the colon\n\n#### Source\n\n```hoon\n++  col  (just ':')\n```\n\n#### Examples\n\n```\n> (scan \":\" col)\n':'\n```\n\n---\n",
    "com": "## `++com`\n\nParse comma\n\nParses ASCII character 44, the comma.\n\n#### Source\n\n```hoon\n++  com  (just ',')\n```\n\n#### Examples\n\n```\n> (scan \",\" com)\n','\n```\n\n---\n",
    "doq": "## `++doq`\n\nParse double quote\n\nParses ASCII character 34, the double quote.\n\n#### Source\n\n```hoon\n++  doq  (just '\"')\n```\n\n#### Examples\n\n```\n> (scan \"\\\"\" doq)\n'\"'\n```\n\n---\n",
    "dot": "## `++dot`\n\nParse period\n\nParses ASCII character 46, the period.\n\n#### Source\n\n```hoon\n++  dot  (just '.')\n```\n\n#### Examples\n\n```\n> (scan \".\" dot)\n'.'\n```\n\n---\n",
    "fas": "## `++fas`\n\nParse forward slash\n\nParses ASCII character 47, the forward slash.\n\n#### Source\n\n```hoon\n++  fas  (just '/')\n```\n\n#### Examples\n\n```\n> (scan \"/\" fas)\n'/'\n```\n\n---\n",
    "gal": "## `++gal`\n\nParse less-than sign\n\nParses ASCII character 60, the less-than sign.\n\n#### Source\n\n```hoon\n++  gal  (just '<')\n```\n\n#### Examples\n\n```\n> (scan \"<\" gal)\n'<'\n```\n\n---\n",
    "gar": "## `++gar`\n\nParse greater-than sign\n\nParses ASCII character 62, the greater-than sign.\n\n#### Source\n\n```hoon\n++  gar  (just '>')\n```\n\n#### Examples\n\n```\n> (scan \">\" gar)\n'>'\n```\n\n---\n",
    "hax": "## `++hax`\n\nParse number sign\n\nParses ASCII character 35, the number sign.\n\n#### Source\n\n```hoon\n++  hax  (just '#')\n```\n\n#### Examples\n\n```\n> (scan \"#\" hax)\n'#'\n```\n\n---\n",
    "hep": "## `++hep`\n\nParse hyphen\n\nParses ASCII character 45, the hyphen.\n\n#### Source\n\n```hoon\n++  hep  (just '-')\n```\n\n#### Examples\n\n```\n> (scan \"-\" hep)\n'-'\n```\n\n---\n",
    "kel": "## `++kel`\n\nParse left curley bracket\n\nParses ASCII character 123, the left curly bracket. Note that `{` (`kel`) opens\na Hoon expression for Hoon string interpolation. To parse it, therefore, it must\nbe escaped.\n\n#### Source\n\n```hoon\n++  kel  (just '{')\n```\n\n#### Examples\n\n```\n> (scan \"\\{\" kel)\n'{'\n```\n\n---\n",
    "ker": "## `++ker`\n\nParse right curley bracket\n\nParses ASCII character 125, the right curly bracket.\n\n#### Source\n\n```hoon\n++  ker  (just '}')\n```\n\n#### Examples\n\n```\n> (scan \"}\" ker)\n'}'\n```\n\n---\n",
    "ket": "## `++ket`\n\nParse caret\n\nParses ASCII character 94, the caret.\n\n#### Source\n\n```hoon\n++  ket  (just '^')\n```\n\n#### Examples\n\n```\n> (scan \"^\" ket)\n'^'\n```\n\n---\n",
    "lus": "## `++lus`\n\nParse plus sign\n\nParses ASCII character 43, the plus sign.\n\n#### Source\n\n```hoon\n++  lus  (just '+')\n```\n\n#### Examples\n\n```\n> (scan \"+\" lus)\n'+'\n```\n\n---\n",
    "mic": "## `++mic`\n\nParse semicolon\n\nParses ASCII character 59, the semicolon.\n\n#### Source\n\n```hoon\n++  mic  (just ';')\n```\n\n#### Examples\n\n```\n> (scan \";\" mic)\n';'\n```\n\n---\n",
    "pal": "## `++pal`\n\nParse left parenthesis\n\nParses ASCII character 40, the left parenthesis.\n\n#### Source\n\n```hoon\n++  pal  (just '(')\n```\n\n#### Examples\n\n```\n> (scan \"(\" pal)\n'('\n```\n\n---\n",
    "pam": "## `++pam`\n\nParse ampersand\n\nParses ASCII character 38, the ampersand.\n\n#### Source\n\n```hoon\n++  pam  (just '&')\n```\n\n#### Examples\n\n```\n> (scan \"&\" pam)\n'&'\n```\n\n---\n",
    "par": "## `++par`\n\nParse right parenthesis\n\nParses ASCII character 41, the right parenthesis.\n\n#### Source\n\n```hoon\n++  par  (just ')')\n```\n\n#### Examples\n\n```\n> (scan \")\" par)\n')'\n```\n\n---\n",
    "pat": "## `++pat`\n\nParse \"at\" sign\n\nParses ASCII character 64, the \"at\" sign.\n\n#### Source\n\n```hoon\n++  pat  (just '@')\n```\n\n#### Examples\n\n```\n> (scan \"@\" pat)\n'@'\n```\n\n---\n",
    "sel": "## `++sel`\n\nParse left square bracket\n\nParses ASCII character 91, the left square bracket.\n\n#### Source\n\n```hoon\n++  sel  (just '[')\n```\n\n#### Examples\n\n```\n> (scan \"[\" sel)\n'['\n```\n\n---\n",
    "ser": "## `++ser`\n\nParse right square bracket\n\nParses ASCII character 93, the right square bracket.\n\n#### Source\n\n```hoon\n++  ser  (just ']')\n```\n\n#### Examples\n\n```\n> (scan \"]\" ser)\n']'\n```\n\n---\n",
    "sig": "## `++sig`\n\nParse tilde\n\nParses ASCII character 126, the tilde.\n\n#### Source\n\n```hoon\n++  sig  (just '~')\n```\n\n#### Examples\n\n```\n> (scan \"~\" sig)\n'~'\n```\n\n---\n",
    "soq": "## `++soq`\n\nParse single quote\n\nParses ASCII character 39, soq. Note the `\\` in the example is to escape the soq\nbecause soq delimits a `cord`.\n\n#### Source\n\n```hoon\n++  soq  (just '\\'')\n```\n\n#### Examples\n\n```\n> (scan \"'\" soq)\n'\\''\n```\n\n---\n",
    "tar": "## `++tar`\n\nParse asterisk\n\nParses ASCII character 42, the asterisk.\n\n#### Source\n\n```hoon\n++  tar  (just '*')\n```\n\n#### Examples\n\n```\n> (scan \"*\" tar)\n'*'\n```\n\n---\n",
    "tic": "## `++tic`\n\nParse backtick\n\nParses ASCII character 96, the backtick.\n\n#### Source\n\n```hoon\n++  tic  (just '`')\n```\n\n#### Examples\n\n```\n> (scan \"`\" tic)\n'`'\n```\n\n---\n",
    "tis": "## `++tis`\n\nParse equals sign\n\nParses ASCII character 61, the equals sign.\n\n#### Source\n\n```hoon\n++  tis  (just '=')\n```\n\n#### Examples\n\n```\n> (scan \"=\" tis)\n'='\n```\n\n---\n",
    "wut": "## `++wut`\n\nParses question mark\n\nParses ASCII character 63, the question mark.\n\n#### Source\n\n```hoon\n++  wut  (just '?')\n```\n\n#### Examples\n\n```\n> (scan \"?\" wut)\n'?'\n```\n\n---\n",
    "zap": "## `++zap`\n\nExclamation point\n\nParses ASCII character 33, the exclamation point zap.\n\n#### Source\n\n```hoon\n++  zap  (just '!')\n```\n\n#### Examples\n\n```\n> (scan \"!\" zap)\n'!'\n```\n\n---\n",
    "alf": "## `++alf`\n\nAlphabetic characters\n\nParse alphabetic characters, both upper and lowercase.\n\n#### Source\n\n```hoon\n++  alf  ;~(pose low hig)\n```\n\n#### Examples\n\n```\n> (scan \"a\" alf)\n'a'\n\n> (scan \"A\" alf)\n'A'\n\n> `tape`(scan \"AaBbCc\" (star alf))\n\"AaBbCc\"\n```\n\n---\n",
    "aln": "## `++aln`\n\nAlphanumeric characters\n\nParse alphanumeric characters - both alphabetic characters and numbers.\n\n#### Source\n\n```hoon\n++  aln  ;~(pose low hig nud)\n```\n\n#### Examples\n\n```\n> (scan \"0\" aln)\n'0'\n\n> `tape`(scan \"alf42\" (star aln))\n\"alf42\"\n```\n\n---\n",
    "alp": "## `++alp`\n\nAlphanumeric and `-`\n\nParse alphanumeric strings and hep, \"-\".\n\n#### Source\n\n```hoon\n++  alp  ;~(pose low hig nud hep)\n```\n\n#### Examples\n\n```\n> (scan \"7\" alp)\n'7'\n\n> (scan \"s\" alp)\n's'\n\n> `tape`(scan \"123abc-\" (star alp))\n\"123abc-\"\n```\n\n---\n",
    "bet": "## `++bet`\n\nAxis syntax `-`, `+`\n\nParse the hep and lus axis syntax.\n\n#### Source\n\n```hoon\n++  bet  ;~(pose (cold 2 hep) (cold 3 lus))\n```\n\n#### Examples\n\n```\n> (scan \"-\" bet)\n2\n\n> (scan \"+\" bet)\n3\n```\n\n---\n",
    "bin": "## `++bin`\n\nBinary to atom\n\nParse a tape of binary (0s and 1s) and produce its atomic representation.\n\n#### Source\n\n```hoon\n++  bin  (bass 2 (most gon but))\n```\n\n#### Examples\n\n```\n> (scan \"0000\" bin)\n0\n\n> (scan \"0001\" bin)\n1\n\n> (scan \"0010\" bin)\n2\n\n> (scan \"100000001111\" bin)\n2.063\n```\n\n---\n",
    "but": "## `++but`\n\nBinary digit\n\nParse a single binary digit.\n\n#### Source\n\n```hoon\n++  but  (cook |=(a=@ (sub a '0')) (shim '0' '1'))\n```\n\n#### Examples\n\n```\n> (scan \"0\" but)\n0\n\n> (scan \"1\" but)\n1\n\n> (scan \"01\" but)\n! {1 2}\n! 'syntax-error'\n! exit\n\n> (scan \"01\" (star but))\n~[0 1]\n```\n\n---\n",
    "cit": "## `++cit`\n\nOctal digit\n\nParse a single octal digit.\n\n#### Source\n\n```hoon\n++  cit  (cook |=(a=@ (sub a '0')) (shim '0' '7'))\n```\n\n#### Examples\n\n```\n> (scan \"1\" cit)\n1\n> (scan \"7\" cit)\n7\n> (scan \"8\" cit)\n! {1 1}\n! 'syntax-error'\n! exit\n> (scan \"60\" (star cit))\n~[6 0]\n```\n\n---\n",
    "dem": "## `++dem`\n\nDecimal to atom\n\nParse a decimal number to an atom.\n\n#### Source\n\n```hoon\n++  dem  (bass 10 (most gon dit))\n```\n\n#### Examples\n\n```\n> (scan \"7\" dem)\n7\n\n> (scan \"42\" dem)\n42\n\n> (scan \"150000000\" dem)\n150.000.000\n\n> (scan \"12456\" dem)\n12.456\n```\n\n---\n",
    "dit": "## `++dit`\n\nDecimal digit\n\nParse a single decimal digit.\n\n#### Source\n\n```hoon\n++  dit  (cook |=(a=@ (sub a '0')) (shim '0' '9'))\n```\n\n#### Examples\n\n```\n> (scan \"7\" dit)\n7\n\n> (scan \"42\" (star dit))\n~[4 2]\n\n> (scan \"26000\" (star dit))\n~[2 6 0 0 0]\n```\n\n---\n",
    "dog": "## `++dog`\n\n`.` optional gap\n\nDot followed by an optional gap, used with numbers.\n\n#### Source\n\n```hoon\n++  dog  ;~(plug dot gay)\n```\n\n#### Examples\n\n```\n> (scan \".\" dog)\n['.' ~]\n\n> (scan \"a.        \" ;~(pfix alf dog))\n['.' ~]\n```\n\n---\n",
    "dof": "## `++dof`\n\n`-` optional gap\n\nHep followed by an optional gap, used with `@p` & `@q` syntax.\n\n#### Source\n\n```hoon\n++  dof  ;~(plug hep gay)\n```\n\n#### Examples\n\n```\n> (scan \"-\" dof)\n['-' ~]\n\n> (scan \"-     \" dof)\n['-' ~]\n```\n\n---\n",
    "doh": "## `++doh`\n\n`@p` separator\n\nPhonetic base phrase separator\n\n#### Source\n\n```hoon\n++  doh  ;~(plug ;~(plug hep hep) gay)\n```\n\n#### Examples\n\n```\n> (scan \"--\" doh)\n[['-' '-'] ~]\n\n> (scan \"--     \" doh)\n[['-' '-'] ~]\n```\n\n---\n",
    "dun": "## `++dun`\n\n`--` to `~`\n\nParse phep, `--`, to null, `~`.\n\n#### Source\n\n```hoon\n++  dun  (cold ~ ;~(plug hep hep))\n```\n\n#### Examples\n\n```\n> (scan \"--\" dun)\n~\n```\n\n---\n",
    "duz": "## `++duz`\n\n`==` to `~`\n\nParse stet, `==`, to null `~`.\n\n#### Source\n\n```hoon\n++  duz  (cold ~ ;~(plug tis tis))\n```\n\n#### Examples\n\n```\n> (scan \"==\" duz)\n~\n```\n\n---\n",
    "gah": "## `++gah`\n\nNewline or ' '\n\nWhitespace component, either newline or space.\n\n#### Source\n\n```hoon\n++  gah  (mask [`@`10 ' ' ~])\n```\n\n#### Examples\n\n```\n> `tape`(scan \" \\0a \\0a\" (star gah))\n\" \\0a \\0a\"\n```\n\n---\n",
    "gap": "## `++gap`\n\nPlural whitespace\n\nSeparates tall runes\n\n#### Source\n\n```hoon\n++  gap  (cold ~ ;~(plug gaq (star ;~(pose vul gah))))\n```\n\n#### Examples\n\n```\n> `tape`(scan \" \\0a \\0a\" gap)\n\"\"\n\n> (scan \"\\0a   \\0a XYZ\" ;~(pfix gap (jest 'XYZ')))\n'XYZ'\n```\n\n---\n",
    "gaq": "## `++gaq`\n\nEnd of line\n\nTwo spaces, a newline, or comment.\n\n#### Source\n\n```hoon\n++  gaq  ;~  pose\n             (just `@`10)\n             ;~(plug gah ;~(pose gah vul))\n             vul\n         ==\n```\n\n#### Examples\n\n```\n> (scan \"123\\0a\" ;~(sfix dem gaq))\n123\n\n> (scan \"123 :: foo\\0a\" ;~(sfix dem gaq))\n123\n```\n\n---\n",
    "gaw": "## `++gaw`\n\nClassic whitespace\n\nTerran whitespace.\n\n#### Source\n\n```hoon\n++  gaw  (cold ~ (star ;~(pose vul gah)))\n```\n\n#### Examples\n\n```\n> (scan \"  \\0a  :: foo  \\0a\" gaw)\n~\n\n> (scan \"  \" gaw)\n~\n\n> (scan \"\\0a\" gaw)\n~\n```\n\n---\n",
    "gay": "## `++gay`\n\nOptional gap\n\nOptional gap.\n\n#### Source\n\n```hoon\n++  gay  ;~(pose gap (easy ~))\n```\n\n#### Examples\n\n```\n> (scan \"  \" gay)\n~\n\n> (scan \"     \" gay)\n~\n\n> (scan \"\\0a\" gay)\n~\n\n> (scan \"\" gay)\n~\n```\n\n---\n",
    "gon": "## `++gon`\n\nLong numbers\n\nParse long numbers - Numbers which wrap around the shell with the line\n\n#### Source\n\n```hoon\n++  gon  ;~(pose ;~(plug bas gay fas) (easy ~))\n```\n\n#### Examples\n\n```\n> 'abc\\\n  /def'\n'abcdef'\n\n> (scan \"\\\\\\0a/\" gon)\n['\\\\' ~ '/']\n```\n\n---\n",
    "gul": "## `++gul`\n\nAxis syntax `<` or `>`\n\nParse the axis gal and gar axis syntax.\n\n#### Source\n\n```hoon\n++  gul  ;~(pose (cold 2 gal) (cold 3 gar))\n```\n\n#### Examples\n\n```\n> (scan \"<\" gul)\n2\n\n> (scan \">\" gul)\n3\n```\n\n---\n",
    "hex": "## `++hex`\n\nHex to atom\n\nParse any hexadecimal number to an atom.\n\n#### Source\n\n```hoon\n++  hex  (bass 16 (most gon hit))\n```\n\n#### Examples\n\n```\n> (scan \"a\" hex)\n10\n\n> (scan \"A\" hex)\n10\n\n> (scan \"2A\" hex)\n42\n\n> (scan \"1ee7\" hex)\n7.911\n\n> (scan \"1EE7\" hex)\n7.911\n\n> (scan \"1EE7F7\" hex)\n2.025.463\n\n> `@ux`(scan \"1EE7F7\" hex)\n0x1e.e7f7\n```\n\n---\n",
    "hig": "## `++hig`\n\nUppercase\n\nParse a single uppercase letter.\n\n#### Source\n\n```hoon\n++  hig  (shim 'A' 'Z')\n```\n\n#### Examples\n\n```\n> (scan \"G\" hig)\n'G'\n\n> (scan \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (star hig))\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n```\n\n---\n",
    "hit": "## `++hit`\n\nHex digits\n\nParse a single hexadecimal digit.\n\n#### Source\n\n```hoon\n++  hit  ;~  pose\n           dit\n           (cook |=(a=char (sub a 87)) (shim 'a' 'f'))\n           (cook |=(a=char (sub a 55)) (shim 'A' 'F'))\n         ==\n```\n\n#### Examples\n\n```\n> (scan \"a\" hit)\n10\n\n> (scan \"A\" hit)\n10\n\n> (scan \"2A\" (star hit))\n~[2 10]\n```\n\n---\n",
    "iny": "## `++iny`\n\nIndentation block\n\nApply `rule` to indented block starting at current column number, omitting\nthe leading whitespace.\n\n#### Accepts\n\n`sef` is a `rule`\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  iny\n  |*  sef=rule\n  |=  nail  ^+  (sef)\n  =+  [har tap]=[p q]:+<\n  =+  lev=(fil 3 (dec q.har) ' ')\n  =+  eol=(just `@t`10)\n  =+  =-  roq=((star ;~(pose prn ;~(sfix eol (jest lev)) -)) har tap)\n      ;~(simu ;~(plug eol eol) eol)\n  ?~  q.roq  roq\n  =+  vex=(sef har(q 1) p.u.q.roq)\n  =+  fur=p.vex(q (add (dec q.har) q.p.vex))\n  ?~  q.vex  vex(p fur)\n  =-  vex(p fur, u.q -)\n  :+  &3.vex\n    &4.vex(q.p (add (dec q.har) q.p.&4.vex))\n  =+  res=|4.vex\n  |-  ?~  res  |4.roq\n  ?.  =(10 -.res)  [-.res $(res +.res)]\n  (welp [`@t`10 (trip lev)] $(res +.res))\n```\n\n#### Examples\n\n```\n> `tape`(scan \"   foo\\0a   bar\" ;~(pfix ace ace ace (iny (star ;~(pose prn (just '\\0a'))))))\n\"foo\\0abar\"\n```\n\n#### Discussion\n\nNote the amount of indentation whitespace to be stripped from the beginning of\neach line is determined by the value of `q` (the column) in the `hair` when\n`++iny` is first called. This means something like the `pfix` expression in the\nexample above is necessary to set the level of indentation. Additionally, the\n`rule` given to `++iny` must consume the whole line including the line ending.\n\n---\n",
    "low": "## `++low`\n\nLowercase\n\nParse a single lowercase letter.\n\n#### Source\n\n```hoon\n++  low  (shim 'a' 'z')\n```\n\n#### Examples\n\n```\n> (scan \"g\" low)\n'g'\n```\n\n---\n",
    "mes": "## `++mes`\n\nHexbyte\n\nParse a hexbyte.\n\n#### Source\n\n```hoon\n++  mes  %+  cook\n           |=({a/@ b/@} (add (mul 16 a) b))\n         ;~(plug hit hit)\n```\n\n#### Examples\n\n```\n> (scan \"2A\" mes)\n42\n\n> (scan \"42\" mes)\n66\n```\n\n---\n",
    "nix": "## `++nix`\n\nLetters and underscore\n\nParse Letters and `_`.\n\n#### Source\n\n```hoon\n++  nix  (boss 256 (star ;~(pose aln cab)))\n```\n\n#### Examples\n\n```\n> `@t`(scan \"as_me\" nix)\n'as_me'\n```\n\n---\n",
    "nud": "## `++nud`\n\nNumeric\n\nParse a numeric character - A number.\n\n#### Source\n\n```hoon\n++  nud  (shim '0' '9')\n```\n\n#### Examples\n\n```\n> (scan \"0\" nud)\n'0'\n\n> (scan \"7\" nud)\n'7'\n```\n\n---\n",
    "prn": "## `++prn`\n\nPrintable character\n\nParse any printable character.\n\n#### Source\n\n```hoon\n++  prn  ;~(less (just `@`127) (shim 32 256))\n```\n\n#### Examples\n\n```\n> (scan \"h\" prn)\n'h'\n\n> (scan \"!\" prn)\n'!'\n\n> (scan \"\\01\" prn)\n! {1 1}\n! exit\n```\n\n---\n",
    "qat": "## `++qat`\n\nChars in blockcord\n\nParse a single character contained in a mult-line cord block.\n\n#### Source\n\n```hoon\n++  qat  ;~  pose\n             prn\n             ;~(less ;~(plug (just `@`10) soz) (just `@`10))\n         ==\n```\n\n#### Examples\n\n```\n> ^-  tape\n  %+  scan\n    \"'''\\0aabc\\0adef\\0aghi\\0a'''\"\n  %+  ifix\n    :-  ;~(plug soz (just `@`10))\n    ;~(plug (just `@`10) soz)\n  (star qat)\n\"abc\\0adef\\0aghi\"\n```\n\n---\n",
    "qit": "## `++qit`\n\nChars in cord\n\nParse an individual character to its cord atom representation. Escaped\ncharacters are converted to the value they represent.\n\n#### Source\n\n```hoon\n++  qit  ;~  pose                                       ::  chars in a cord\n             ;~(less bas soq prn)\n             ;~(pfix bas ;~(pose bas soq mes))          ::  escape chars\n         ==\n```\n\n#### Examples\n\n```\n> (scan \"%\" qit)\n'%'\n\n> `tape`(scan \"cord\" (star qit))\n\"cord\"\n\n> `tape`(scan \"\\\\0a\" (star qit))\n\"\\0a\"\n```\n\n---\n",
    "qut": "## `++qut`\n\nCord\n\nParse single-soq cord with `\\{gap}/` anywhere in the middle, or triple-single\nquote (aka triple-soq) cord, between which must be in an indented block.\n\n#### Source\n\n```hoon\n++  qut  ;~  simu  soq\n           ;~  pose\n             ;~  less  soz\n               (ifix [soq soq] (boss 256 (more gon qit)))\n             ==\n             =+  hed=;~(pose ;~(plug (plus ace) vul) (just '\\0a'))\n             %-  iny  %+  ifix\n               :-  ;~(plug soz hed)\n               ;~(plug (just '\\0a') soz)\n             (boss 256 (star qat))\n           ==\n         ==\n```\n\n#### Examples\n\n```\n> `@t`(scan \"'cord'\" qut)\n'cord'\n\n> `@t`(scan \"'''\\0aabc\\0adef\\0a'''\" qut)\n'abc\\0adef'\n```\n\n---\n",
    "soz": "## `++soz`\n\nDelimiting `'''`\n\nParse a triple-single quote, used for multiline strings.\n\n#### Source\n\n```hoon\n++  soz  ;~(plug soq soq soq)\n```\n\n#### Examples\n\n```\n> (scan \"'''\" soz)\n['\\'' '\\'' '\\'']\n```\n\n---\n",
    "sym": "## `++sym`\n\nTerm\n\nA term: a lowercase letter, followed by letters, numbers, or `-`.\n\n#### Source\n\n```hoon\n++  sym\n  %+  cook\n    |=(a=tape (rap 3 ^-((list @) a)))\n  ;~(plug low (star ;~(pose nud low hep)))\n```\n\n#### Examples\n\n```\n> `term`(scan \"sam-2\" sym)\n%sam-2\n```\n\n---\n",
    "mixed-case-symbol": "## `++mixed-case-symbol`\n\nMixed-case term\n\nThe same as [`++sym`](#sym) but allowing uppercase letters.\n\n#### Source\n\n```hoon\n++  mixed-case-symbol\n  %+  cook\n    |=(a=tape (rap 3 ^-((list @) a)))\n  ;~(plug alf (star alp))\n```\n\n#### Examples\n\n```\n> `term`(scan \"sAm-2\" mixed-case-symbol)\n%sAm-2\n```\n\n---\n",
    "ven": "## `++ven`\n\n`+>-` axis syntax\n\nAxis syntax parser\n\n#### Source\n\n```hoon\n++  ven  ;~  (comp |=([a=@ b=@] (peg a b)))\n           bet\n           =+  hom=`?`|\n           |=  tub=nail\n           ^-  (like @)\n           =+  vex=?:(hom (bet tub) (gul tub))\n           ?~  q.vex\n             [p.tub [~ 1 tub]]\n           =+  wag=$(p.tub p.vex, hom !hom, tub q.u.q.vex)\n           ?>  ?=(^ q.wag)\n           [p.wag [~ (peg p.u.q.vex p.u.q.wag) q.u.q.wag]]\n         ==\n```\n\n#### Examples\n\n```\n> (scan \"->+\" ven)\n11\n\n> (scan \"->+<-\" ven)\n44\n```\n\n---\n",
    "vit": "## `++vit`\n\nBase64 digit\n\nParse a standard base64 digit.\n\n#### Source\n\n```hoon\n++  vit\n  ;~  pose\n    (cook |=(a=@ (sub a 65)) (shim 'A' 'Z'))\n    (cook |=(a=@ (sub a 71)) (shim 'a' 'z'))\n    (cook |=(a=@ (add a 4)) (shim '0' '9'))\n    (cold 62 (just '-'))\n    (cold 63 (just '+'))\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"C\" vit)\n2\n\n> (scan \"c\" vit)\n28\n\n> (scan \"2\" vit)\n54\n\n> (scan \"-\" vit)\n62\n```\n\n---\n",
    "vul": "## `++vul`\n\nComments to null\n\nParse comments and produce a null. Note that a comment must be ended\nwith a newline character.\n\n#### Source\n\n```hoon\n++  vul  %+  cold   ~\n         ;~  plug  col  col\n           (star prn)\n           (just `@`10)\n         ==\n```\n\n#### Examples\n\n```\n> (scan \"::this is a comment \\0a\" vul)\n~\n\n> (scan \"::this is a comment \" vul)\n! {1 21}\n! exit\n```\n\n---\n",
    "ab": "## `++ab`\n\nPrimitive parser engine\n\nA core containing numeric parser primitives.\n\n#### Source\n\n```hoon\n++  ab\n  |%\n```\n\n#### Examples\n\n```\n> ab\n<36.ecc 414.gly 100.xkc 1.ypj %164>\n```\n\n---\n\n### `++bix:ab`\n\nParse hex pair\n\nParsing `rule`. Parses a pair of base-16 digits. Used in escapes.\n\n#### Source\n\n```hoon\n++  bix  (bass 16 (stun [2 2] six))\n```\n\n#### Examples\n\n```\n> (scan \"07\" bix:ab)\n7\n> (scan \"51\" bix:ab)\n81\n> (scan \"a3\" bix:ab)\n163\n```\n\n---\n\n### `++fem:ab`\n\nParse base58check char\n\nParse a single base58check character.\n\n#### Source\n\n```hoon\n++  fem  (sear |=(a=@ (cha:fa a)) aln)\n```\n\n#### Examples\n\n```\n> (scan \"6\" fem:ab)\n5\n\n> (scan \"Z\" fem:ab)\n32\n\n> (scan \"j\" fem:ab)\n42\n```\n\n---\n\n### `++haf:ab`\n\nParse non-doz phonetic pair\n\nParsing `rule`. Parses an atom of aura `@pE`, a phrase of two bytes encoded\nphonetically. If the leading syllable is `doz` (`0`), parsing will fail.\n\n#### Source\n\n```hoon\n++  haf  (bass 256 ;~(plug tep tiq (easy ~)))\n```\n\n#### Examples\n\n```\n> `@p`(scan \"sampel\" haf:ab)\n~sampel\n\n> `@p`(scan \"dozpel\" haf:ab)\n{1 4}\nsyntax error\n```\n\n---\n\n### `++hef:ab`\n\nParse non-dozzod phonetic pair\n\nParsing `rule`. Parses an atom of aura `@pE` without leading `~` or `.~`, a\nphrase of two bytes encoded phonetically. If it's `dozzod`, parsing will fail.\n\n#### Source\n\n```hoon\n++  hef  %+  sear  |=(a=@ ?:(=(a 0) ~ (some a)))\n         %+  bass  256\n         ;~(plug tip tiq (easy ~))\n```\n\n#### Examples\n\n```\n> `@p`(scan \"sampel\" hef:ab)\n~sampel\n\n> `@p`(scan \"dozpel\" hef:ab)\n~pel\n\n> `@p`(scan \"dozzod\" hef:ab)\n{1 7}\nsyntax error\n```\n\n---\n\n### `++hif:ab`\n\nParse phonetic pair\n\nParsing `rule`. Parses an atom of aura `@pE`, without leading `~` or `.~`. A\nphrase of two bytes encoded phonetically.\n\n#### Source\n\n```hoon\n++  hif  (boss 256 ;~(plug tip tiq (easy ~)))\n```\n\n#### Examples\n\n```\n> `@p`(scan \"doznec\" hif:ab)\n~nec\n\n> `@p`(scan \"pittyp\" hif:ab)\n~pittyp\n```\n\n---\n\n### `++hof:ab`\n\nParse 2-4 @q phonetic pairs\n\nParsing `rule`. Parses an atom of aura `@q` (non-scrambled `@p`), without\nleading `~` or `.~`, of between two and four phrases.\n\n#### Source\n\n```hoon\n++  hof  (bass 0x1.0000 ;~(plug hef (stun [1 3] ;~(pfix hep hif))))\n```\n\n#### Example\n\n```\n> `@q`(scan \"sampel-palnet\" hof:ab)\n.~sampel-palnet\n\n> `@q`(scan \"sampel-sampel-palnet\" hof:ab)\n.~sampel-sampel-palnet\n\n> `@q`(scan \"sampel-sampel-sampel-palnet\" hof:ab)\n.~sampel-sampel-sampel-palnet\n```\n\n---\n\n### `++huf:ab`\n\nParse 1-4 @q phonetic pairs\n\nParsing `rule`. Parses an atom of aura `@q` (non-scrambled `@p`), without\nleading `~` or `.~`, of between one and four phrases.\n\n#### Source\n\n```hoon\n++  huf  (bass 0x1.0000 ;~(plug hef (stun [0 3] ;~(pfix hep hif))))\n```\n\n#### Examples\n\n```\n> `@q`(scan \"sampel\" huf:ab)\n.~sampel\n\n> `@q`(scan \"sampel-palnet\" huf:ab)\n.~sampel-palnet\n\n> `@q`(scan \"sampel-sampel-palnet\" huf:ab)\n.~sampel-sampel-palnet\n\n> `@q`(scan \"sampel-sampel-sampel-palnet\" huf:ab)\n.~sampel-sampel-sampel-palnet\n```\n\n---\n\n### `++hyf:ab`\n\nParse four @q phonetic pairs\n\nParsing `rule`. Parses an atom of aura `@q` (non-scrambled `@p`), without\nleading `~` or `.~`, of exactly four phrases.\n\n#### Source\n\n```hoon\n++  hyf  (bass 0x1.0000 ;~(plug hif (stun [3 3] ;~(pfix hep hif))))\n```\n\n#### Examples\n\n```\n> `@q`(scan \"sampel-sampel-sampel-palnet\" hyf:ab)\n.~sampel-sampel-sampel-palnet\n```\n\n---\n\n### `++pev:ab`\n\nParse 1-5 @uv base-32 chars\n\nParsing `rule`. Parses one to five `@uv` base-32 digits without the leading `0v`\nor leading zeros.\n\n#### Source\n\n```hoon\n++  pev  (bass 32 ;~(plug sev (stun [0 4] siv)))\n```\n\n#### Examples\n\n```\n> `@uv`(scan \"du3ja\" pev:ab)\n0vdu3ja\n\n> `@uv`(scan \"3ja\" pev:ab)\n0v3ja\n\n> `@uv`(scan \"a\" pev:ab)\n0va\n```\n\n---\n\n### `++pew:ab`\n\nParse 1-5 @uw base-64 chars\n\nParsing `rule`. Parses one to five `@uw` base-64 digits without the leading `0w`\nor leading zeros.\n\n#### Source\n\n```hoon\n++  pew  (bass 64 ;~(plug sew (stun [0 4] siw)))\n```\n\n#### Examples\n\n```\n> `@uw`(scan \"6U0gP\" pew:ab)\n0w6U0gP\n\n> `@uw`(scan \"gP\" pew:ab)\n0wgP\n\n> `@uw`(scan \"P\" pew:ab)\n0wP\n```\n\n---\n\n### `++piv:ab`\n\nParse 5 @uv base-32 chars\n\nParsing `rule`. Parses exactly five `@uv` base-32 digits without the leading\n`0v` or leading zeros.\n\n#### Source\n\n```hoon\n++  piv  (bass 32 (stun [5 5] siv))\n```\n\n#### Examples\n\n```\n> `@uv`(scan \"du3ja\" piv:ab)\n0vdu3ja\n\n> `@uv`(scan \"u3ja\" piv:ab)\n{1 5}\nsyntax error\n```\n\n---\n\n### `++piw:ab`\n\nParse 5 @uw base-64 chars\n\nParsing `rule`. Parses exactly five `@uw` base-64 digits without the leading\n`0w` or leading zeros.\n\n#### Source\n\n```hoon\n++  piw  (bass 64 (stun [5 5] siw))\n```\n\n#### Examples\n\n```\n> `@uw`(scan \"6U0gP\" piw:ab)\n0w6U0gP\n\n> `@uw`(scan \"U0gP\" piw:ab)\n{1 5}\nsyntax error\n```\n\n---\n\n### `++qeb:ab`\n\nParse 1-4 binary digits\n\nParsing `rule`. Parses a binary number of up to 4 digits in length without a\nleading zero.\n\n#### Source\n\n```hoon\n++  qeb  (bass 2 ;~(plug seb (stun [0 3] sib)))\n```\n\n#### Examples\n\n```\n> `@ub`(scan \"1010\" qeb:ab)\n0b1010\n\n> `@ub`(scan \"10\" qeb:ab)\n0b10\n\n> `@ub`(scan \"1\" qeb:ab)\n0b1\n\n> `@ub`(scan \"0\" qeb:ab)\n{1 1}\nsyntax error\n```\n\n---\n\n### `++qex:ab`\n\nParse 1-4 hex digits\n\nParsing `rule`. Parses a hexadecimal number of up to 4 digits in length without\na leading zero.\n\n#### Source\n\n```hoon\n++  qex  (bass 16 ;~(plug sex (stun [0 3] hit)))\n```\n\n#### Examples\n\n```\n> `@ux`(scan \"beef\" qex:ab)\n0xbeef\n\n> `@ux`(scan \"ef\" qex:ab)\n0xef\n\n> `@ux`(scan \"f\" qex:ab)\n0xf\n```\n\n---\n\n### `++qib:ab`\n\nParse 4 binary\n\nParsing `rule`. Parses exactly four binary digits - may have leading zeros.\n\n#### Source\n\n```hoon\n++  qib  (bass 2 (stun [4 4] sib))\n```\n\n#### Examples\n\n```\n> `@ub`(scan \"0001\" qib:ab)\n0b1\n\n> `@ub`(scan \"1001\" qib:ab)\n0b1001\n\n> `@ub`(scan \"1\" qib:ab)\n{1 2}\nsyntax error\n```\n\n---\n\n### `++qix:ab`\n\nParse 4 hex\n\nParsing `rule`. Parses exactly four hexadecimal digits - may have leading zeros.\n\n#### Source\n\n```hoon\n++  qix  (bass 16 (stun [4 4] six))\n```\n\n#### Examples\n\n```\n> `@ux`(scan \"beef\" qix:ab)\n0xbeef\n\n> `@ux`(scan \"0000\" qix:ab)\n0x0\n\n> `@ux`(scan \"ef\" qix:ab)\n{1 3}\nsyntax error\n```\n\n---\n\n### `++seb:ab`\n\nParse 1\n\nParsing `rule`. Parses the number 1.\n\n#### Source\n\n```hoon\n++  seb  (cold 1 (just '1'))\n```\n\n#### Examples\n\n```\n> (scan \"1\" seb:ab)\n1\n\n> (scan \"2\" seb:ab)\n{1 1}\nsyntax error\n```\n\n---\n\n### `++sed:ab`\n\nParse decimal\n\nParsing `rule`. Parses a nonzero decimal digit.\n\n#### Source\n\n```hoon\n++  sed  (cook |=(a=@ (sub a '0')) (shim '1' '9'))\n```\n\n#### Examples\n\n```\n> (scan \"5\" sed:ab)\n5\n\n> (scan \"0\" sed:ab)\n{1 1}\nsyntax error\n```\n\n---\n\n### `++sev:ab`\n\nParse base-32\n\nParsing `rule`. Parses a nonzero base-32 digit.\n\n#### Source\n\n```hoon\n++  sev  ;~(pose sed sov)\n```\n\n#### Examples\n\n```\n> `@uv`(scan \"2\" sev:ab)\n0v2\n\n> `@uv`(scan \"j\" sev:ab)\n0vj\n\n> `@uv`(scan \"0\" sev:ab)\n{1 1}\nsyntax error\n```\n\n---\n\n### `++sew:ab`\n\nParse base-64\n\nParsing `rule`. Parses a nonzero base-64 digit.\n\n#### Source\n\n```hoon\n++  sew  ;~(pose sed sow)\n```\n\n#### Examples\n\n```\n> `@uw`(scan \"I\" sew:ab)\n0wI\n\n> `@uw`(scan \"2\" sew:ab)\n0w2\n\n> `@uw`(scan \"0\" sew:ab)\n{1 1}\nsyntax error\n```\n\n---\n\n### `++sex:ab`\n\nParse hex\n\nParsing `rule`. Parses a non-zero hexadecimal digit.\n\n#### Source\n\n```hoon\n++  sex  ;~(pose sed sox)\n```\n\n#### Examples\n\n```\n> `@ux`(scan \"a\" sex:ab)\n0xa\n\n> `@ux`(scan \"2\" sex:ab)\n0x2\n\n> `@ux`(scan \"0\" sex:ab)\n{1 1}\nsyntax error\n```\n\n---\n\n### `++sib:ab`\n\nParse binary\n\nParsing `rule`. Parses a binary digit.\n\n#### Source\n\n```hoon\n++  sib  (cook |=(a=@ (sub a '0')) (shim '0' '1'))\n```\n\n#### Examples\n\n```\n> `@ub`(scan \"1\" sib:ab)\n0b1\n\n> `@ub`(scan \"0\" sib:ab)\n0b0\n```\n\n---\n\n### `++sid:ab`\n\nParse decimal\n\nParsing `rule`. Parses a decimal digit.\n\n#### Source\n\n```hoon\n++  sid  (cook |=(a=@ (sub a '0')) (shim '0' '9'))\n```\n\n#### Examples\n\n```\n> (scan \"5\" sid:ab)\n5\n\n> (scan \"0\" sid:ab)\n0\n```\n\n---\n\n### `++siv:ab`\n\nParse base-32\n\nParsing `rule`. Parses a base-32 digit.\n\n#### Source\n\n```hoon\n++  siv  ;~(pose sid sov)\n```\n\n#### Examples\n\n```\n> `@uv`(scan \"r\" siv:ab)\n0vr\n\n> `@uv`(scan \"5\" siv:ab)\n0v5\n\n> `@uv`(scan \"0\" siv:ab)\n0v0\n```\n\n---\n\n### `++siw:ab`\n\nParse base-64\n\nParsing `rule`. Parses a base-64 digit.\n\n#### Source\n\n```hoon\n++  siw  ;~(pose sid sow)\n```\n\n#### Examples\n\n```\n> `@uw`(scan \"M\" siw:ab)\n0wM\n\n> `@uw`(scan \"0\" siw:ab)\n0w0\n\n> `@uw`(scan \"c\" siw:ab)\n0wc\n```\n\n---\n\n### `++six:ab`\n\nParse hex\n\nParsing `rule`. Parses a hexadecimal digit.\n\n#### Source\n\n```hoon\n++  six  ;~(pose sid sox)\n```\n\n#### Examples\n\n```\n> `@ux`(scan \"e\" six:ab)\n0xe\n\n> `@ux`(scan \"0\" six:ab)\n0x0\n```\n\n---\n\n### `++sov:ab`\n\nParse @uv base-32 letter\n\nParsing `rule`. Parses a `@uv` base-32 letter (but not a number).\n\n#### Source\n\n```hoon\n++  sov  (cook |=(a=@ (sub a 87)) (shim 'a' 'v'))\n```\n\n#### Examples\n\n```\n> `@uv`(scan \"c\" sov:ab)\n0vc\n\n> `@uv`(scan \"j\" sov:ab)\n0vj\n\n> `@uv`(scan \"5\" sov:ab)\n{1 1}\nsyntax error\n```\n\n---\n\n### `++sow:ab`\n\nParse @uw base-64 letter/symbol\n\nParsing `rule`. Parses a base-64 letter/symbol (but not number).\n\n#### Source\n\n```hoon\n++  sow  ;~  pose\n           (cook |=(a=@ (sub a 87)) (shim 'a' 'z'))\n           (cook |=(a=@ (sub a 29)) (shim 'A' 'Z'))\n           (cold 62 (just '-'))\n           (cold 63 (just '~'))\n         ==\n```\n\n#### Examples\n\n```\n> `@uw`(scan \"M\" sow:ab)\n0wM\n\n> `@uw`(scan \"5\" sow:ab)\n{1 1}\nsyntax error\n```\n\n---\n\n### `++sox:ab`\n\nParse hex letter\n\nParsing `rule`. Parses a hexadecimal letter (but not number).\n\n#### Source\n\n```hoon\n++  sox  (cook |=(a=@ (sub a 87)) (shim 'a' 'f'))\n```\n\n#### Examples\n\n```\n> `@ux`(scan \"e\" sox:ab)\n0xe\n\n> `@ux`(scan \"5\" sox:ab)\n{1 1}\nsyntax error\n```\n\n---\n\n### `++ted:ab`\n\nParse 1-999 decimal\n\nParsing `rule`. Parses a decimal number of up to 3 digits without a\nleading zero.\n\n#### Source\n\n```hoon\n++  ted  (bass 10 ;~(plug sed (stun [0 2] sid)))\n```\n\n#### Examples\n\n```\n> (scan \"214\" ted:ab)\n214\n\n> (scan \"2\" ted:ab)\n2\n\n> (scan \"2161\" ted:ab)\n{1 4}\nsyntax error\n```\n\n---\n\n### `++tep:ab`\n\nParse non-doz leading phonetic byte\n\nParsing `rule`. Parses the leading phonetic byte , which represents a syllable.\nFails if it is `doz`.\n\n#### Source\n\n```hoon\n++  tep  (sear |=(a=@ ?:(=(a 'doz') ~ (ins:po a))) til)\n```\n\n#### Examples\n\n```\n> (scan \"sam\" tep:ab)\n4\n\n> (scan \"wic\" tep:ab)\n99\n```\n\n---\n\n### `++tip:ab`\n\nLeading phonetic byte\n\nParsing `rule`. Parses the leading phonetic byte, which represents a syllable.\n\n#### Source\n\n```hoon\n++  tip  (sear |=(a=@ (ins:po a)) til)\n```\n\n#### Examples\n\n```\n> (scan \"doz\" tip:ab)\n0\n\n> (scan \"pit\" tip:ab)\n242\n```\n\n---\n\n### `++tiq:ab`\n\nTrailing phonetic syllable\n\nParsing `rule`. Parses the trailing phonetic byte, which represents a syllable.\n\n#### Source\n\n```hoon\n++  tiq  (sear |=(a=@ (ind:po a)) til)\n```\n\n#### Examples\n\n```\n> (scan \"zod\" tiq:ab)\n0\n> (scan \"nec\" tiq:ab)\n1\n```\n\n---\n\n### `++tid:ab`\n\nParse 3 decimal digits\n\nParsing `rule`. Parses exactly three decimal digits.\n\n#### Source\n\n```hoon\n++  tid  (bass 10 (stun [3 3] sid))\n```\n\n#### Examples\n\n```\n> (scan \"013\" tid:ab)\n13\n\n> (scan \"999\" tid:ab)\n999\n\n> (scan \"99\" tid:ab)\n{1 3}\nsyntax error\n```\n\n---\n\n### `++til:ab`\n\nParse 3 lowercase\n\nParsing `rule`. Parses exactly three lowercase letters.\n\n#### Source\n\n```hoon\n++  til  (boss 256 (stun [3 3] low))\n```\n\n#### Examples\n\n```\n> `@t`(scan \"mer\" til:ab)\n'mer'\n\n> `@t`(scan \"me\" til:ab)\n{1 3}\nsyntax error\n```\n\n---\n\n### `++urs:ab`\n\nParse knot characters\n\nParsing rule. Parses characters from an atom of the knot aura `@ta`.\n\n#### Source\n\n```hoon\n++  urs  %+  cook\n           |=(a=tape (rap 3 ^-((list @) a)))\n         (star ;~(pose nud low hep dot sig cab))\n```\n\n#### Examples\n\n```\n> `@ta`(scan \"asa-lom_tak\" urs:ab)\n~.asa-lom_tak\n```\n\n---\n\n### `++urt:ab`\n\nParse knot without underscores\n\nParsing `rule`. Parses all characters of the knot aura `@ta` except for cab,\n`_`.\n\n#### Source\n\n```hoon\n++  urt  %+  cook\n           |=(a=tape (rap 3 ^-((list @) a)))\n         (star ;~(pose nud low hep dot sig))\n```\n\n#### Examples\n\n```\n> `@ta`(scan \"asa-lom.t0k\" urt:ab)\n~.asa-lom.t0k\n```\n\n---\n\n### `++voy:ab`\n\nParse bas, soq, or bix\n\nParsing `rule`. Parses an escaped backslash, single quote, or hex pair byte.\n\n#### Source\n\n```hoon\n++  voy  ;~(pfix bas ;~(pose bas soq bix))\n```\n\n#### Examples\n\n```\n> (scan \"\\\\\\\\\" voy:ab)\n'\\\\'\n\n> (scan \"\\\\'\" voy:ab)\n'\\''\n\n> (scan \"\\\\0a\" voy:ab)\n'\\0a'\n```\n\n---\n",
    "ag": "## `++ag`\n\nTop-level atom parser engine\n\nA core containing top-level atom parsers.\n\n#### Source\n\n```hoon\n++  ag\n  |%\n```\n\n---\n\n### `++ape:ag`\n\nParse 0 or rule\n\nParser modifier. Parses 0 or the sample rule `fel`.\n\n#### Accepts\n\n`fel` is a `rule`.\n\n#### Produces\n\nA `rule`.\n\n#### Source\n\n```hoon\n++  ape  |*(fel=rule ;~(pose (cold 0 (just '0')) fel))\n```\n\n#### Examples\n\n```\n> (scan \"0\" (ape:ag (cold 2 (just '2'))))\n0\n\n> (scan \"2\" (ape:ag (cold 2 (just '2'))))\n2\n\n> (scan \"3\" (ape:ag (cold 2 (just '2'))))\n{1 1}\nsyntax error\n```\n\n---\n\n### `++bay:ag`\n\nParses binary number\n\nParsing `rule`. Parses a binary number without a leading zero.\n\n#### Source\n\n```hoon\n++  bay  (ape (bass 16 ;~(plug qeb:ab (star ;~(pfix dog qib:ab)))))\n```\n\n#### Examples\n\n```\n> `@ub`(scan \"101.1100.0011.1010\" bay:ag)\n0b101.1100.0011.1010\n```\n\n---\n\n### `++bip:ag`\n\nParse IPv6\n\nParsing rule. Parses a `@is`, an IPv6 address.\n\n#### Source\n\n```hoon\n++  bip  =+  tod=(ape qex:ab)\n         (bass 0x1.0000 ;~(plug tod (stun [7 7] ;~(pfix dog tod))))\n```\n\n#### Examples\n\n```\n> `@is`(scan \"0.0.ea.3e6c.0.0.0.0\" bip:ag)\n.0.0.ea.3e6c.0.0.0.0\n```\n\n---\n\n### `++dem:ag`\n\nParse decimal with dots\n\nParsing `rule`. Parses a decimal number that includes dot separators.\n\n#### Source\n\n```hoon\n++  dem  (ape (bass 1.000 ;~(plug ted:ab (star ;~(pfix dog tid:ab)))))\n```\n\n#### Examples\n\n```\n> (scan \"52\" dem:ag)\n52\n> (scan \"13.507\" dem:ag)\n13.507\n```\n\n---\n\n### `++dim:ag`\n\nParse decimal number\n\nParsing rule. Parses a decimal number without a leading zero.\n\n#### Source\n\n```hoon\n++  dim  (ape dip)\n```\n\n#### Examples\n\n```\n> (scan \"52\" dim:ag)\n52\n\n> (scan \"0\" dim:ag)\n0\n\n> (scan \"13507\" dim:ag)\n13.507\n\n> (scan \"013507\" dim:ag)\n{1 2}\nsyntax error\n```\n\n---\n\n### `++dum:ag`\n\nParse decimal with leading `0`\n\nParsing rule. Parses a decmial number with leading zeroes.\n\n#### Source\n\n```hoon\n++  dum  (bass 10 (plus sid:ab))\n```\n\n#### Examples\n\n```\n> (scan \"52\" dum:ag)\n52\n> (scan \"0000052\" dum:ag)\n52\n> (scan \"13507\" dim:ag)\n13.507\n```\n\n---\n\n### `++fed:ag`\n\nParse phonetic base\n\nParsing rule. Parses an atom of aura `@p`, the phonetic base.\n\n#### Source\n\n```hoon\n++  fed  %+  cook  fynd:ob\n         ;~  pose\n           %+  bass  0x1.0000.0000.0000.0000          ::  oversized\n             ;~  plug\n               huf:ab\n               (plus ;~(pfix doh hyf:ab))\n             ==\n           hof:ab                                     ::  planet or moon\n           haf:ab                                     ::  star\n           tiq:ab                                     ::  galaxy\n         ==\n```\n\n#### Examples\n\n```\n> `@p`(scan \"zod\" fed:ag)\n~zod\n\n> `@p`(scan \"sampel\" fed:ag)\n~sampel\n\n> `@p`(scan \"sampel-palnet\" fed:ag)\n~sampel-palnet\n\n> `@p`(scan \"sampel-palnet-sampel-palnet\" fed:ag)\n~sampel-palnet-sampel-palnet\n\n> `@p`(scan \"tillyn-nillyt-tasfyn-partyv--novweb-talrud-talmud-sonfyr\" fed:ag)\n~tillyn-nillyt-tasfyn-partyv--novweb-talrud-talmud-sonfyr\n```\n\n---\n\n### `++feq:ag`\n\nParse `@q` phonetic base\n\nParsing rule. Parses an atom of aura `@q` (an unscrambled `@p`).\n\n#### Source\n\n```hoon\n++  feq  %+  cook  |=(a=(list @) (rep 4 (flop a)))\n         ;~  plug\n           ;~(pose hif:ab tiq:ab)\n           (star ;~(pfix dof hif:ab))\n         ==\n```\n\n#### Examples\n\n```\n> `@q`(scan \"sampel\" feq:ag)\n.~sampel\n\n> `@q`(scan \"sampel-palnet\" feq:ag)\n.~sampel-palnet\n\n> `@q`(scan \"sampel-sampel-palnet\" feq:ag)\n.~sampel-sampel-palnet\n\n> `@q`(scan \"sampel-palnet-sampel-palnet\" feq:ag)\n.~sampel-palnet-sampel-palnet\n\n> `@q`(scan \"sampel-sampel-sampel-sampel-palnet-sampel-palnet\" feq:ag)\n.~sampel-sampel-sampel-sampel-palnet-sampel-palnet\n```\n\n---\n\n### `++fim:ag`\n\nParse base58check\n\nParse a base58check value, check checksum, and return decoded value sans-checksum. If\nthe checksum check fails, parsing will fail.\n\n#### Source\n\n```hoon\n++  fim  (sear den:fa (bass 58 (plus fem:ab)))\n```\n\n#### Examples\n\nWith valid checksum:\n\n```\n> (enc:fa 0xdead.beef)\n0xdead.beef.938b.8b0c\n> (c-co:co 0xdead.beef.938b.8b0c)\n\"eFGDJSVvRHd\"\n> `@ux`(scan \"eFGDJSVvRHd\" fim:ag)\n0xdead.beef\n```\n\nWith invalid checksum:\n\n```\n> (c-co:co 0xdead.beef.ffff)\n\"2utUWE41U\"\n> `@ux`(scan \"2utUWE41U\" fim:ag)\n{1 10}\nsyntax error\n```\n\n---\n\n### `++hex:ag`\n\nParse hex\n\nParsing `rule`. Parses a hexadecimal number\n\n#### Source\n\n```hoon\n++  hex  (ape (bass 0x1.0000 ;~(plug qex:ab (star ;~(pfix dog qix:ab)))))\n```\n\n#### Examples\n\n```\n> `@ux`(scan \"4\" hex:ag)\n0x4\n\n> `@ux`(scan \"1a\" hex:ag)\n0x1a\n\n> `@ux`(scan \"3.ac8d\" hex:ag)\n0x3.ac8d\n```\n\n---\n\n### `++lip:ag`\n\nParse IPv4 address\n\nParsing `rule`. Parses an IPv4 address.\n\n#### Source\n\n```hoon\n++  lip  =+  tod=(ape ted:ab)\n         (bass 256 ;~(plug tod (stun [3 3] ;~(pfix dog tod))))\n```\n\n#### Examples\n\n```\n> `@if`(scan \"127.0.0.1\" lip:ag)\n.127.0.0.1\n```\n\n---\n\n### `++mot:ag`\n\nParse numerical month\n\nParse a numerical month (1-12).\n\n#### Source\n\n```hoon\n++  mot  ;~  pose\n           ;~  pfix\n             (just '1')\n             (cook |=(a=@ (add 10 (sub a '0'))) (shim '0' '2'))\n           ==\n           sed:ab\n         ==\n```\n\n#### Examples\n\n```\n> (scan \"0\" mot:ag)\n{1 1}\nsyntax error\n\n> (scan \"1\" mot:ag)\n1\n\n> (scan \"6\" mot:ag)\n6\n\n> (scan \"12\" mot:ag)\n12\n\n> (scan \"13\" mot:ag)\n{1 2}\nsyntax error\n```\n\n---\n\n### `++viz:ag`\n\nParse Base-32 with dots\n\nParsing `rule`. Parses a Base-32 number with dot separators.\n\n#### Source\n\n```hoon\n++  viz  (ape (bass 0x200.0000 ;~(plug pev:ab (star ;~(pfix dog piv:ab)))))\n```\n\n#### Examples\n\n```\n> `@uv`(scan \"e2.ol4pm\" viz:ag)\n0ve2.ol4pm\n```\n\n---\n\n### `++vum:ag`\n\nParse base-32 string\n\nParsing `rule`. Parses a raw base-32 string (without dots).\n\n#### Source\n\n```hoon\n++  vum  (bass 32 (plus siv:ab))\n```\n\n#### Examples\n\n```\n> `@uv`(scan \"e2ol4pm\" vum:ag)\n0ve2.ol4pm\n```\n\n---\n\n### `++wiz:ag`\n\nParse base-64\n\nParsing `rule`. Parses a base-64 number.\n\n#### Source\n\n```hoon\n++  wiz  (ape (bass 0x4000.0000 ;~(plug pew:ab (star ;~(pfix dog piw:ab)))))\n```\n\n#### Examples\n\n```\n> `@uw`(scan \"e2O.l4Xpm\" wiz:ag)\n0we2O.l4Xpm\n```\n\n---\n",
    "mu": "## `++mu`\n\nCore used to scramble 16-bit atoms\n\nA door that contains arms that are used to scramble two atoms, `top`\nand `bot`. Used especially in the phonetic base to disguise the\nrelationship between a planet and its star.\n\n#### Accepts\n\n`top` is an atom.\n\n`bot` is an atom.\n\n#### Source\n\n```hoon\n++  mu\n  |_  [top=@ bot=@]\n```\n\n---\n\n### `++zag:mu`\n\nAdd bottom into top\n\nProduces the cell of `top` and `bot` with `top` scrambled to the result\nof adding `bot` to `top` modulo 16. Used to scramble the name of a\nplanet.\n\n#### Accepts\n\n`top` & `bot` are atoms, and are the sample of `+mu`.\n\n#### Produces\n\nA `(pair @ @)`.\n\n#### Source\n\n```hoon\n++  zag  [p=(end 4 (add top bot)) q=bot]\n```\n\n#### Examples\n\n```\n> `[@ux @ux]`~(zag mu 0x20e0 0x201)\n[0x22e1 0x201]\n```\n\n---\n\n### `++zig:mu`\n\nSubtract bottom from top\n\nThe inverse of [`++zag`](#zagmu). Produces the cell of `top` and `bot` with\n`top` unscrambled. The unscrambled `top` is the sum of the sample `top` and the\n16-bit complement of `bot`. Used to unscramble the name of the planet.\n\n#### Accepts\n\n`top` & `bot` are atoms, and are the sample of `+mu`.\n\n#### Produces\n\nA `(pair @ @)`.\n\n#### Source\n\n```hoon\n++  zig  [p=(end 4 (add top (sub 0x1.0000 bot))) q=bot]\n```\n\n#### Examples\n\n```\n> `[@ux @ux]`~(zig mu 0x22e1 0x201)\n[0x20e0 0x201]\n```\n\n---\n\n### `++zug:mu`\n\nConcatenate into atom\n\nProduces the concatenation of `top` and `bot`. Used to assemble a\nplanet name.\n\n#### Accepts\n\n`top` & `bot` are atoms, and are the sample of `+mu`.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  zug  (mix (lsh 4 top) bot)\n```\n\n#### Examples\n\n```\n> `@ux`~(zug mu 0x22e1 0x201)\n0x22e1.0201\n```\n\n---\n",
    "ne": "## `++ne`\n\nDigit rendering engine\n\nA door containing arms that render digits at bases 10, 16, 32, and 64.\n\n#### Accepts\n\n`tig` is an `atom`.\n\n#### Source\n\n```hoon\n++  ne\n  |_  tig=@\n```\n\n---\n\n### `++c:ne`\n\nRender base58check\n\nRender a single base58check character.\n\n#### Accepts\n\n`tig` is an `atom`, and is the sample of `+ne`.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  c  (cut 3 [tig 1] key:fa)\n```\n\n#### Examples\n\n```\n> `@t`~(c ne 7)\n'8'\n\n> `@t`~(c ne 27)\n'U'\n\n> `@t`~(c ne 57)\n'z'\n\n> `@t`~(c ne 58)\n''\n```\n\n---\n\n### `++d:ne`\n\nRender decimal\n\nRenders a decimal digit as an atom of an ACII byte value.\n\n#### Accepts\n\n`tig` is an `atom`, and is the sample of `+ne`.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  d  (add tig '0')\n```\n\n#### Examples\n\n```\n> `@t`~(d ne 7)\n'7'\n```\n\n---\n\n### `++x:ne`\n\nRender hex\n\nRenders a hexadecimal digit as an atom of an ASCII byte value.\n\n#### Accepts\n\n`tig` is an `atom`, and is the sample of `+ne`.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  x  ?:((gte tig 10) (add tig 87) d)\n```\n\n#### Examples\n\n```\n> `@t`~(x ne 7)\n'7'\n\n> `@t`~(x ne 14)\n'e'\n```\n\n---\n\n### `++v:ne`\n\nRender base-32\n\nRenders a base-32 digit as an atom of an ASCII byte value.\n\n#### Accepts\n\n`tig` is an `atom`, and is the sample of `+ne`.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  v  ?:((gte tig 10) (add tig 87) d)\n```\n\n#### Examples\n\n```\n> `@t`~(v ne 7)\n'7'\n\n> `@t`~(v ne 14)\n'e'\n\n> `@t`~(v ne 25)\n'p'\n```\n\n---\n\n### `++w:ne`\n\nRender base-64\n\nRenders a base-64 digit as an atom of an ASCII byte value.\n\n#### Accepts\n\n`tig` is an `atom`, and is the sample of `+ne`.\n\n#### Produces\n\nAn atom.\n\n#### Source\n\n```hoon\n++  w  ?:(=(tig 63) '~' ?:(=(tig 62) '-' ?:((gte tig 36) (add tig 29) x)))\n```\n\n#### Examples\n\n```\n> `@t`~(w ne 7)\n'7'\n\n> `@t`~(w ne 14)\n'e'\n\n> `@t`~(w ne 25)\n'p'\n\n> `@t`~(w ne 52)\n'Q'\n\n> `@t`~(w ne 61)\n'Z'\n\n> `@t`~(w ne 63)\n'~'\n\n> `@t`~(w ne 62)\n'-'\n```\n\n---\n",
    "co": "## `++co`\n\nLiteral rendering engine\n\n`++co` contains three parts:\n\n- A door that contains arms that operate on the sample coin `lot`.\n- A core of rendering idioms.\n- A core of additional formatting functions used internally.\n\n#### Accepts\n\n`lot` is a `coin`.\n\n#### Source\n\nThe arm begins with the door:\n\n```hoon\n++  co\n  !:\n  ~%  %co  ..co  ~\n  =<  |_  lot=coin\n```\n\nThen after that the rendering idiom core begins with:\n\n```hoon\n=|  rep=tape\n=<  |%\n```\n\nAnd finally the third core:\n\n```hoon\n|%\n```\n\n---\n\n### `++rear:co`\n\nPrepend & render as tape\n\nRenders a coin `lot` as a tape prepended to the sample tape `rom`.\n\n#### Accepts\n\n`lot` is a `coin`, and is the sample of `++co`.\n\n`rom` is a `tape`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rear  |=(rom=tape rend(rep rom))\n```\n\n#### Examples\n\n```\n> (~(rear co %$ %ux 200) \"--ha\")\n\"0xc8--ha\"\n```\n\n---\n\n### `++rent:co`\n\nRender as knot\n\nRenders a coin `lot` as a `knot`.\n\n#### Accepts\n\n`lot` is a `coin`, and is the sample of `++co`.\n\n#### Produces\n\nA `knot`.\n\n#### Source\n\n```hoon\n++  rent  ~+  `@ta`(rap 3 rend)\n```\n\n#### Examples\n\n```\n> ~(rent co %$ %ux 200)\n~.0xc8\n\n> `@t`~(rent co %$ %ux 200)\n'0xc8'\n```\n\n---\n\n### `++rend:co`\n\nRender as tape\n\nRenders a coin `lot` as a `tape`.\n\n#### Accepts\n\n`lot` is a `coin`, and is the sample of `++co`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  rend\n  ^-  tape\n  ~+\n  ?:  ?=(%blob -.lot)\n    ['~' '0' ((v-co 1) (jam p.lot))]\n  ?:  ?=(%many -.lot)\n    :-  '.'\n    |-  ^-  tape\n    ?~   p.lot\n      ['_' '_' rep]\n    ['_' (weld (trip (wack rent(lot i.p.lot))) $(p.lot t.p.lot))]\n  =+  [yed=(end 3 p.p.lot) hay=(cut 3 [1 1] p.p.lot)]\n  |-  ^-  tape\n  ?+    yed  (z-co q.p.lot)\n      %c   ['~' '-' (weld (rip 3 (wood (tuft q.p.lot))) rep)]\n      %d\n    ?+    hay  (z-co q.p.lot)\n        %a\n      =+  yod=(yore q.p.lot)\n      =?  rep  ?=(^ f.t.yod)  ['.' (s-co f.t.yod)]\n      =?  rep  !&(?=(~ f) =(0 h) =(0 m) =(0 s)):t.yod\n        =.  rep  ['.' (y-co s.t.yod)]\n        =.  rep  ['.' (y-co m.t.yod)]\n        ['.' '.' (y-co h.t.yod)]\n      =.  rep  ['.' (a-co d.t.yod)]\n      =.  rep  ['.' (a-co m.yod)]\n      =?  rep  !a.yod  ['-' rep]\n      ['~' (a-co y.yod)]\n    ::\n        %r\n      =+  yug=(yell q.p.lot)\n      =?  rep  ?=(^ f.yug)  ['.' (s-co f.yug)]\n      :-  '~'\n      ?:  &(=(0 d.yug) =(0 m.yug) =(0 h.yug) =(0 s.yug))\n        ['s' '0' rep]\n      =?  rep  !=(0 s.yug)  ['.' 's' (a-co s.yug)]\n      =?  rep  !=(0 m.yug)  ['.' 'm' (a-co m.yug)]\n      =?  rep  !=(0 h.yug)  ['.' 'h' (a-co h.yug)]\n      =?  rep  !=(0 d.yug)  ['.' 'd' (a-co d.yug)]\n      +.rep\n    ==\n  ::\n      %f\n    ?:  =(& q.p.lot)\n      ['.' 'y' rep]\n    ?:(=(| q.p.lot) ['.' 'n' rep] (z-co q.p.lot))\n  ::\n      %n   ['~' rep]\n      %i\n    ?+  hay  (z-co q.p.lot)\n      %f  ((ro-co [3 10 4] |=(a=@ ~(d ne a))) q.p.lot)\n      %s  ((ro-co [4 16 8] |=(a=@ ~(x ne a))) q.p.lot)\n    ==\n  ::\n      %p\n    =+  sxz=(fein:ob q.p.lot)\n    =+  dyx=(met 3 sxz)\n    :-  '~'\n    ?:  (lte dyx 1)\n      (weld (trip (tod:po sxz)) rep)\n    =+  dyy=(met 4 sxz)\n    =|  imp=@ud\n    |-  ^-  tape\n    ?:  =(imp dyy)\n      rep\n    %=  $\n      imp  +(imp)\n      rep  =/  log  (cut 4 [imp 1] sxz)\n           ;:  weld\n             (trip (tos:po (rsh 3 log)))\n             (trip (tod:po (end 3 log)))\n             ?:(=((mod imp 4) 0) ?:(=(imp 0) \"\" \"--\") \"-\")\n             rep\n    ==     ==\n  ::\n      %q\n    :+  '.'  '~'\n    =;  res=(pair ? tape)\n      (weld q.res rep)\n    %+  roll\n      =*  val  q.p.lot\n      ?:(=(0 val) ~[0] (rip 3 val))\n    |=  [q=@ s=? r=tape]\n    :-  !s\n    %+  weld\n     (trip (?:(s tod:po tos:po) q))\n    ?.(&(s !=(r \"\")) r ['-' r])\n  ::\n      %r\n    ?+  hay  (z-co q.p.lot)\n      %d  ['.' '~' (r-co (rlyd q.p.lot))]\n      %h  ['.' '~' '~' (r-co (rlyh q.p.lot))]\n      %q  ['.' '~' '~' '~' (r-co (rlyq q.p.lot))]\n      %s  ['.' (r-co (rlys q.p.lot))]\n    ==\n  ::\n      %u\n    ?:  ?=(%c hay)\n      %+  welp  ['0' 'c' (reap (pad:fa q.p.lot) '1')]\n      (c-co (enc:fa q.p.lot))\n    ::\n    =;  gam=(pair tape tape)\n      (weld p.gam ?:(=(0 q.p.lot) `tape`['0' ~] q.gam))\n    ?+  hay  [~ ((ox-co [10 3] |=(a=@ ~(d ne a))) q.p.lot)]\n      %b  [['0' 'b' ~] ((ox-co [2 4] |=(a=@ ~(d ne a))) q.p.lot)]\n      %i  [['0' 'i' ~] ((d-co 1) q.p.lot)]\n      %x  [['0' 'x' ~] ((ox-co [16 4] |=(a=@ ~(x ne a))) q.p.lot)]\n      %v  [['0' 'v' ~] ((ox-co [32 5] |=(a=@ ~(x ne a))) q.p.lot)]\n      %w  [['0' 'w' ~] ((ox-co [64 5] |=(a=@ ~(w ne a))) q.p.lot)]\n    ==\n  ::\n      %s\n    %+  weld\n      ?:((syn:si q.p.lot) \"--\" \"-\")\n    $(yed 'u', q.p.lot (abs:si q.p.lot))\n  ::\n      %t\n    ?:  =('a' hay)\n      ?:  =('s' (cut 3 [2 1] p.p.lot))\n        (weld (rip 3 q.p.lot) rep)\n      ['~' '.' (weld (rip 3 q.p.lot) rep)]\n    ['~' '~' (weld (rip 3 (wood q.p.lot)) rep)]\n  ==\n```\n\n#### Examples\n\n```\n> ~(rend co %$ %ux 200)\n\"0xc8\"\n\n> ~(rend co %many ~[[%$ ux+200] [%$ p+40]])\n\"._0xc8_~~tem__\"\n\n> ~(rend co %$ %p 32.819)\n\"~lasmev\"\n\n> ~(rend co %$ %ux 18)\n\"0x12\"\n\n> ~(rend co [%$ p=[p=%if q=0x7f00.0001]])\n\".127.0.0.1\"\n\n> ~(rend co %many ~[[%$ %ud 20] [%$ %uw 133] [%$ %tas 'sam']])\n\"._20_0w25_sam__\"\n\n> ~(rend co %blob [1 1])\n\"~0ph\"\n```\n\n---\n\n### `++a-co:co`\n\nRender decimal\n\nRender `dat` as a decimal integer without separators.\n\n#### Accepts\n\n`dat` is an atom.\n\n#### Produces\n\nA `tape`\n\n#### Source\n\n```hoon\n++  a-co  |=(dat=@ ((d-co 1) dat))\n```\n\n#### Examples\n\n```\n> (a-co:co 123.456.789)\n\"123456789\"\n```\n\n---\n\n### `++c-co:co`\n\nRender base58check\n\nRenders the given `atom` as a base58check `tape`.\n\n#### Accepts\n\nAn `atom`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  c-co  (em-co [58 1] |=([? b=@ c=tape] [~(c ne b) c]))\n```\n\n#### Examples\n\n```\n> (enc:fa 0xdead.beef)\n0xdead.beef.938b.8b0c\n\n> (c-co:co 0xdead.beef.938b.8b0c)\n\"eFGDJSVvRHd\"\n```\n\n---\n\n### `++d-co:co`\n\nRender decimal with min length\n\nRender `hol` as a decimal integer without separators and with a minimum length\nof `min`. If `hol` has less than `min` digits, leading zeros will be added to\nmake up the difference.\n\n#### Accepts\n\n`min` is an atom.\n\n`hol` is an atom.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  d-co  |=(min=@ (em-co [10 min] |=([? b=@ c=tape] [~(d ne b) c])))\n```\n\n#### Examples\n\n```\n> ((d-co:co 1) 123.456)\n\"123456\"\n\n> ((d-co:co 9) 123.456)\n\"000123456\"\n```\n\n---\n\n### `++r-co:co`\n\nRender floating point\n\nRender decimal float `a` as a `tape`.\n\n#### Accepts\n\n`a` is a `++dn`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  r-co\n  |=  a=dn\n  ?:  ?=([%i *] a)  (weld ?:(s.a \"inf\" \"-inf\") rep)\n  ?:  ?=([%n *] a)  (weld \"nan\" rep)\n  =;  rep  ?:(s.a rep ['-' rep])\n  =/  f  ((d-co 1) a.a)\n  =^  e  e.a\n    =/  e=@s  (sun:si (lent f))\n    =/  sci  :(sum:si e.a e -1)\n    ?:  (syn:si (dif:si e.a --3))  [--1 sci]  :: 12000 -> 12e3 e>+2\n    ?:  !(syn:si (dif:si sci -2))  [--1 sci]  :: 0.001 -> 1e-3 e<-2\n    [(sum:si sci --1) --0] :: 1.234e2 -> '.'@3 -> 123 .4\n  =?  rep  !=(--0 e.a)\n    :(weld ?:((syn:si e.a) \"e\" \"e-\") ((d-co 1) (abs:si e.a)))\n  (weld (ed-co e f) rep)\n```\n\n#### Examples\n\n```\n> `tape`(r-co:co (rlys .3.14))\n\"3.14\"\n\n> `tape`(r-co:co (rlys .1.681557e-39))\n\"1.681557e-39\"\n```\n\n---\n\n### `++s-co:co`\n\nRender hex list\n\nRender `esc`, a list of atoms, as hex with a dot before each value. Values less\nthan two bytes in length will be padded with zeros.\n\n#### Accepts\n\n`esc` is a `(list @)`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  s-co\n  |=  esc=(list @)  ^-  tape\n  ?~  esc  rep\n  ['.' =>(.(rep $(esc t.esc)) ((x-co 4) i.esc))]\n```\n\n#### Examples\n\n```\n> `tape`(s-co:co ~[0xdead 0xbeef 0xcafe])\n\".dead.beef.cafe\"\n\n> `tape`(s-co:co ~[0xa 0xb 0xc])\n\".000a.000b.000c\"\n\n> `tape`(s-co:co ~[0xdead.beef])\n\".deadbeef\"\n```\n\n---\n\n### `++v-co:co`\n\nRender base-32 with minimum length\n\nRender `hol` as base-32 with a minimum length of `min`. If `hol` is shorter than\n`min` it will be padded with zeros.\n\n#### Accepts\n\n`min` is a `@ud`.\n\n`hol` is an atom.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  v-co  |=(min=@ (em-co [32 min] |=([? b=@ c=tape] [~(v ne b) c])))\n```\n\n#### Examples\n\n```\n> `tape`((v-co:co 1) 0v2l7.eiug3.0mbd9)\n\"2l7eiug30mbd9\"\n\n> `tape`((v-co:co 20) 0v2l7.eiug3.0mbd9)\n\"00000002l7eiug30mbd9\"\n```\n\n---\n\n### `++w-co:co`\n\nRender base-64 with minimum length\n\nRender `hol` as base-64 with a minimum length of `min`. If `hol` is horter than\n`min` it will be padded with zeros.\n\n#### Accepts\n\n`min` is a `@ud`.\n\n`hol` is an atom.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  w-co  |=(min=@ (em-co [64 min] |=([? b=@ c=tape] [~(w ne b) c])))\n```\n\n#### Examples\n\n```\n> `tape`((w-co:co 1) 0w2.OtBSR.pPVeT)\n\"2OtBSRpPVeT\"\n\n> `tape`((w-co:co 20) 0w2.OtBSR.pPVeT)\n\"0000000002OtBSRpPVeT\"\n```\n\n---\n\n### `++x-co:co`\n\nRender hex with minimum length\n\nRender `hol` as hex with a minimum length of `min`. If `hol` is horter than\n`min` it will be padded with zeros.\n\n#### Accepts\n\n`min` is a `@ud`.\n\n`hol` is an atom.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  x-co  |=(min=@ (em-co [16 min] |=([? b=@ c=tape] [~(x ne b) c])))\n```\n\n#### Examples\n\n```\n> `tape`((x-co:co 1) 0xdead.beef)\n\"deadbeef\"\n\n> `tape`((x-co:co 20) 0xdead.beef)\n\"000000000000deadbeef\"\n```\n\n---\n\n### `++y-co:co`\n\nRender decimal with at least two digits\n\nRender `dat` as a decimal with a minimum of two digits. If `dat` is less than\ntwo digits it will be padded with zeros.\n\n#### Accepts\n\n`dat` is an atom.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  y-co  |=(dat=@ ((d-co 2) dat))\n```\n\n#### Examples\n\n```\n> (y-co:co 0)\n\"00\"\n\n> (y-co:co 1)\n\"01\"\n\n> (y-co:co 123)\n\"123\"\n\n> (y-co:co 123.456)\n\"123456\"\n```\n\n---\n\n### `++z-co:co`\n\nRender '0x'-prefixed hex\n\nRender `dat` as hex with a `0x` prefix.\n\n#### Accepts\n\n`dat` is an atom.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  z-co  |=(dat=@ `tape`['0' 'x' ((x-co 1) dat)])\n```\n\n#### Examples\n\n```\n> (z-co:co 123)\n\"0x7b\"\n\n> (z-co:co 0xdead.beef)\n\"0xdeadbeef\"\n\n> (z-co:co 0)\n\"0x0\"\n```\n\n---\n\n### `++em-co:co`\n\nRender in numeric base\n\nIn base `bas`, format `min` digits of `hol` with `par`. This is used internally\nby other rendering functions.\n\n- `hol` is processed least-significant digit first.\n- All available digits in `hol` will be processed, but\n  `min` digits can exceed the number available in `hol`\n- `par` handles all accumulated output on each call, and can edit it, prepend or\n  append digits, etc.\n- Until `hol` is exhausted, `par`'s sample is `[| digit output]`, subsequently,\n  it's `[& 0 output]`.\n\n#### Accepts\n\n`[bas=@ min=@]`, where `bas` is the numeric base and `min` is the minimum\nlength.\n\n`par` is a `gate` of `$-([? @ tape] tape)`.\n\n`hol` is an atom.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  em-co\n  |=  [[bas=@ min=@] par=$-([? @ tape] tape)]\n  |=  hol=@\n  ^-  tape\n  ?:  &(=(0 hol) =(0 min))\n    rep\n  =/  [dar=@ rad=@]  (dvr hol bas)\n  %=  $\n    min  ?:(=(0 min) 0 (dec min))\n    hol  dar\n    rep  (par =(0 dar) rad rep)\n  ==\n```\n\n#### Examples\n\n```\n> ((em-co:co [16 10] |=([? b=@ c=tape] [~(x ne b) c])) 0xbeef)\n\"000000beef\"\n```\n\n---\n\n### `++ed-co:co`\n\nFormat with decimal place\n\nFormat `int` by specifying its size with `exp`, which may be negative. This is\nused internally by other rendering functions.\n\n#### Accepts\n\n`exp` is a `@s`.\n\n`int` is a `tape`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  ed-co\n  |=  [exp=@s int=tape]  ^-  tape\n  =/  [pos=? dig=@u]  [=(--1 (cmp:si exp --0)) (abs:si exp)]\n  ?.  pos\n    (into (weld (reap +(dig) '0') int) 1 '.')\n  =/  len  (lent int)\n  ?:  (lth dig len)  (into int dig '.')\n  (weld int (reap (sub dig len) '0'))\n```\n\n#### Examples\n\n```\n> (ed-co:co --3 \"100\")\n\"100\"\n\n> (ed-co:co --5 \"100\")\n\"10000\"\n\n> (ed-co:co -1 \"100\")\n\"0.0100\"\n\n> (ed-co:co -5 \"100\")\n\"0.00000100\"\n```\n\n---\n\n### `++ox-co:co`\n\nFormat dot-separated digits in numeric base\n\nIn base `bas`, format each digit of `hol` with gate `dug`, with '.' separators\nevery `gop` digits. This is used internally by other rendering functions.\n\n- `hol` is processed least-significant digit first.\n- `dug` handles individual digits, output is prepended.\n- Every segment but the last is zero-padded to `gop`.\n\n#### Accepts\n\n`[bas=@ gop=@]` where `bas` is the numeric base and `gop` is dot separator\nfrequency.\n\n`dug` is a `gate` of `$-(@ @)`.\n\n`hol` is an atom.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  ox-co\n  |=  [[bas=@ gop=@] dug=$-(@ @)]\n  %+  em-co\n    [(pow bas gop) 0]\n  |=  [top=? seg=@ res=tape]\n  %+  weld\n    ?:(top ~ `tape`['.' ~])\n  %.  seg\n  %+  em-co(rep res)\n    [bas ?:(top 0 gop)]\n  |=([? b=@ c=tape] [(dug b) c])\n```\n\n#### Examples\n\n```\n> ((ox-co:co [2 4] |=(a=@ ~(d ne a))) 0b1011.1101)\n\"1011.1101\"\n\n> ((ox-co:co [2 1] |=(a=@ ~(d ne a))) 0b1011.1101)\n\"1.0.1.1.1.1.0.1\"\n\n> ((ox-co:co [2 100] |=(a=@ ~(d ne a))) 0b1011.1101)\n\"10111101\"\n```\n\n---\n\n### `++ro-co:co`\n\nFormat dot-prefixed bloqs in numeric base\n\nIn base `bas`, for `buz` bloqs 0 to `dop`, format at least one digit of `hol`,\nprefixed with `.`. This is used internally for `@i` address rendering functions.\n\n#### Accepts\n\n`[buz=@ bas=@ dop=@]` where `buz` is the bloq size, `bas` is the numeric base,\nand `dop` is the number of bloqs.\n\n`dug` is a `gate` of `$-(@ @)`.\n\n`hol` is an atom.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  ro-co\n  |=  [[buz=@ bas=@ dop=@] dug=$-(@ @)]\n  |=  hol=@\n  ^-  tape\n  ?:  =(0 dop)\n    rep\n  :-  '.'\n  =/  pod  (dec dop)\n  %.  (cut buz [pod 1] hol)\n  %+  em-co(rep $(dop pod))\n    [bas 1]\n  |=([? b=@ c=tape] [(dug b) c])\n```\n\n#### Examples\n\n```\n> ((ro-co:co [3 10 4] |=(a=@ ~(d ne a))) .127.0.0.1)\n\".127.0.0.1\"\n```\n\n---\n",
    "so": "## `++so`\n\nCoin parser engine\n\nCore containing arms that parse atoms encoded in strings.\n\n#### Source\n\n```hoon\n++  so\n  ~%  %so  +  ~\n  |%\n```\n\n---\n\n### `++bisk:so`\n\nParse aura-atom pair\n\nParsing `rule`. Parses an `@u` of any permitted base,\nproducing a `dime`.\n\n#### Source\n\n```hoon\n++  bisk\n  ~+\n  ;~  pose\n    ;~  pfix  (just '0')\n      ;~  pose\n        (stag %ub ;~(pfix (just 'b') bay:ag))\n        (stag %uc ;~(pfix (just 'c') fim:ag))\n        (stag %ui ;~(pfix (just 'i') dim:ag))\n        (stag %ux ;~(pfix (just 'x') hex:ag))\n        (stag %uv ;~(pfix (just 'v') viz:ag))\n        (stag %uw ;~(pfix (just 'w') wiz:ag))\n      ==\n    ==\n    (stag %ud dem:ag)\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"25\" bisk:so)\n[%ud 25]\n\n> (scan \"0x12.6401\" bisk:so)\n[%ux 1.205.249]\n```\n\n---\n\n### `++crub:so`\n\nParse `@da`, `@dr`, `@p`, `@t`\n\nParsing `rule`. Parses any atom of any of the following auras after a leading\nsig: `@da`, `@dr`, `@p`, and `@t`. Produces a `dime`.\n\n#### Source\n\n```hoon\n++  crub\n  ~+\n  ;~  pose\n    (cook |=(det=date `dime`[%da (year det)]) when)\n  ::\n    %+  cook\n      |=  [a=(list [p=?(%d %h %m %s) q=@]) b=(list @)]\n      =+  rop=`tarp`[0 0 0 0 b]\n      |-  ^-  dime\n      ?~  a\n        [%dr (yule rop)]\n      ?-  p.i.a\n        %d  $(a t.a, d.rop (add q.i.a d.rop))\n        %h  $(a t.a, h.rop (add q.i.a h.rop))\n        %m  $(a t.a, m.rop (add q.i.a m.rop))\n        %s  $(a t.a, s.rop (add q.i.a s.rop))\n      ==\n    ;~  plug\n      %+  most\n        dot\n      ;~  pose\n        ;~(pfix (just 'd') (stag %d dim:ag))\n        ;~(pfix (just 'h') (stag %h dim:ag))\n        ;~(pfix (just 'm') (stag %m dim:ag))\n        ;~(pfix (just 's') (stag %s dim:ag))\n      ==\n      ;~(pose ;~(pfix ;~(plug dot dot) (most dot qix:ab)) (easy ~))\n    ==\n  ::\n    (stag %p fed:ag)\n    ;~(pfix dot (stag %ta urs:ab))\n    ;~(pfix sig (stag %t urx:ab))\n    ;~(pfix hep (stag %c (cook taft urx:ab)))\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"1926.5.12\" crub:so)\n[p=~.da q=170.141.184.449.747.016.871.285.095.307.149.312.000]\n\n> ;;([%da @da] (scan \"1926.5.12\" crub:so))\n[%da ~1926.5.12]\n\n> (scan \"s10\" crub:so)\n[p=~.dr q=184.467.440.737.095.516.160]\n\n> ;;([%dr @dr] (scan \"s10\" crub:so))\n[%dr ~s10]\n\n> (scan \"sampel\" crub:so)\n[%p 1.135]\n\n> (scan \".mas\" crub:so)\n[%ta 7.561.581]\n```\n\n---\n\n### `++nuck:so`\n\nTop-level coin parser\n\nParsing `rule`. Switches on the first character and applies the\ncorresponding `coin` parser.\n\n#### Source\n\n```hoon\n++  nuck\n  ~/  %nuck  |=  a=nail  %.  a\n  %+  knee  *coin  |.  ~+\n  %-  stew\n  ^.  stet  ^.  limo\n  :~  :-  ['a' 'z']  (cook |=(a=@ta [%$ %tas a]) sym)\n      :-  ['0' '9']  (stag %$ bisk)\n      :-  '-'        (stag %$ tash)\n      :-  '.'        ;~(pfix dot perd)\n      :-  '~'        ;~(pfix sig ;~(pose twid (easy [%$ %n 0])))\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"~pillyt\" nuck:so)\n[%$ p=[p=~.p q=13.184]]\n\n> (scan \"0x12\" nuck:so)\n[%$ p=[p=~.ux q=18]]\n\n> (scan \".127.0.0.1\" nuck:so)\n[%$ p=[p=~.if q=2.130.706.433]]\n\n> (scan \"._20_0w25_sam__\" nuck:so)\n[ %many\n    p\n  ~[\n    [%$ p=[p=~.ud q=20]]\n    [%$ p=[p=~.uw q=133]]\n    [%$ p=[p=~.tas q=7.168.371]]\n  ]\n]\n```\n\n---\n\n### `++nusk:so`\n\nParse coin literal with escapes\n\nParsing `rule`. Parses a coin literal with escapes.\n\n#### Source\n\n```hoon\n++  nusk\n  ~+\n  :(sear |=(a=@ta (rush a nuck)) wick urt:ab)\n```\n\n#### Examples\n\n```\n> ~.asd_a\n~.asd_a\n\n> ._1_~~.asd~-a__\n[1 ~.asd_a]\n\n> (scan \"~~.asd~-a\" nusk:so)\n[%$ p=[p=~.ta q=418.212.246.369]]\n```\n\n---\n\n### `++perd:so`\n\nParsing coin literal without prefixes\n\nParsing `rule`. Parses a dime or tuple without their respective standard\nprefixes.\n\n#### Source\n\n```hoon\n++  perd\n  ~+\n  ;~  pose\n    (stag %$ zust)\n    (stag %many (ifix [cab ;~(plug cab cab)] (more cab nusk)))\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"y\" perd:so)\n[%$ [%f %.y]]\n\n> (scan \"n\" perd:so)\n[%$ [%f %.n]]\n\n> (scan \"_20_x__\" perd:so)\n[%many [[%$ p=[p=~.ud q=20]] [i=[%$ p=[p=~.tas q=120]] t=~]]]\n```\n\n---\n\n### `++royl:so`\n\nParse dime float\n\nParsing `rule`. Parses a number into a `dime` float.\n\n#### Source\n\n```hoon\n++  royl\n  ~+\n  ;~  pose\n    (stag %rh royl-rh)\n    (stag %rq royl-rq)\n    (stag %rd royl-rd)\n    (stag %rs royl-rs)\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"~3.14\" royl:so)\n[%rd .~3.14]\n\n> (scan \"3.14\" royl:so)\n[%rs .3.14]\n```\n\n---\n\n### `++royl-rh:so`\n\nParse half-precision float\n\nParsing `rule`. Parses a `@rh`.\n\n#### Source\n\n```hoon\n++  royl-rh  (cook rylh ;~(pfix ;~(plug sig sig) (cook royl-cell royl-rn)))\n```\n\n#### Examples\n\n```\n> (scan \"~~3.14\" royl-rh:so)\n.~~3.14\n```\n\n---\n\n### `++royl-rq:so`\n\nParse quad-precision float\n\nParsing `rule`. Parses a `@rq`.\n\n#### Source\n\n```hoon\n++  royl-rq  (cook rylq ;~(pfix ;~(plug sig sig sig) (cook royl-cell royl-rn)))\n```\n\n#### Examples\n\n```\n> (scan \"~~~3.14\" royl-rq:so)\n.~~~3.14\n```\n\n---\n\n### `++royl-rd:so`\n\nParse double-precision float\n\nParsing `rule`. Parses a `@rd`.\n\n#### Source\n\n```hoon\n++  royl-rd  (cook ryld ;~(pfix sig (cook royl-cell royl-rn)))\n```\n\n#### Examples\n\n```\n> (scan \"~3.14\" royl-rd:so)\n.~3.14\n```\n\n---\n\n### `++royl-rs:so`\n\nParse single-precision float\n\nParsing `rule`. Parses a `@rs`.\n\n#### Source\n\n```hoon\n++  royl-rs  (cook ryls (cook royl-cell royl-rn))\n```\n\n#### Examples\n\n```\n> (scan \"3.14\" royl-rs:so)\n.3.14\n```\n\n---\n\n### `++royl-rn:so`\n\nParse real number\n\nParsing `rule`. Parses a real number to a [`++rn`](/reference/hoon/stdlib/3b#rn).\n\n#### Source\n\n```hoon\n++  royl-rn\n  =/  moo\n    |=  a=tape\n    :-  (lent a)\n    (scan a (bass 10 (plus sid:ab)))\n  ;~  pose\n    ;~  plug\n      (easy %d)\n      ;~(pose (cold | hep) (easy &))\n      ;~  plug  dim:ag\n        ;~  pose\n          ;~(pfix dot (cook moo (plus (shim '0' '9'))))\n          (easy [0 0])\n        ==\n        ;~  pose\n          ;~  pfix\n            (just 'e')\n            ;~(plug ;~(pose (cold | hep) (easy &)) dim:ag)\n          ==\n          (easy [& 0])\n        ==\n      ==\n    ==\n    ::\n    ;~  plug\n      (easy %i)\n      ;~  sfix\n        ;~(pose (cold | hep) (easy &))\n        (jest 'inf')\n      ==\n    ==\n    ::\n    ;~  plug\n      (easy %n)\n      (cold ~ (jest 'nan'))\n    ==\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"3.14\" royl-rn:so)\n[%d %.y 3 [2 14] [%.y 0]]\n\n> (scan \"-3.14e-39\" royl-rn:so)\n[%d %.n 3 [2 14] [%.n 39]]\n\n> (scan \"3\" royl-rn:so)\n[%d %.y 3 [0 0] [%.y 0]]\n```\n\n---\n\n### `++royl-cell:so`\n\nConvert rn to dn\n\nIntermediate parsed float converter. Convert a\n[`++rn`](/reference/hoon/stdlib/3b#rn) to\n[`++dn`](/reference/hoon/stdlib/3b#dn).\n\n#### Accepts\n\nA `++rn`.\n\n#### Produces\n\nA `++dn`.\n\n#### Source\n\n```hoon\n++  royl-cell\n  |=  rn\n  ^-  dn\n  ?.  ?=([%d *] +<)  +<\n  =+  ^=  h\n    (dif:si (new:si f.b i.b) (sun:si d.b))\n  [%d a h (add (mul c.b (pow 10 d.b)) e.b)]\n```\n\n#### Examples\n\n```\n> (royl-cell:so (scan \"3.14\" royl-rn:so))\n[%d s=%.y e=-2 a=314]\n\n> (ryls (royl-cell:so (scan \"3.14\" royl-rn:so)))\n.3.14\n```\n\n---\n\n### `++tash:so`\n\nParse signed dime\n\nParsing `rule`. Parse a `@s` to a `dime`.\n\n#### Source\n\n```hoon\n++  tash\n  ~+\n  =+  ^=  neg\n      |=  [syn=? mol=dime]  ^-  dime\n      ?>  =('u' (end 3 p.mol))\n      [(cat 3 's' (rsh 3 p.mol)) (new:si syn q.mol)]\n  ;~  pfix  hep\n    ;~  pose\n      (cook |=(a=dime (neg | a)) bisk)\n      ;~(pfix hep (cook |=(a=dime (neg & a)) bisk))\n    ==\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"-20\" tash:so)\n[p=~.sd q=39]\n\n> ;;([%sd @sd] (scan \"-20\" tash:so))\n[%sd -20]\n\n> ;;([%sd @sd] (scan \"--20\" tash:so))\n[%sd --20]\n\n> ;;([%sx @sx] (scan \"--0x2e\" tash:so))\n[%sx --0x2e]\n```\n\n---\n\n### `++twid:so`\n\nParse coins without `~` prefix\n\nParsing rule. Parses coins after a leading sig, `~`.\n\n#### Source\n\n```hoon\n++  twid\n  ~+\n  ;~  pose\n    %+  stag  %blob\n    %+  sear  |=(a=@ (mole |.((cue a))))\n    ;~(pfix (just '0') vum:ag)\n  ::\n    (stag %$ crub)\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"zod\" twid:so)\n[%$ [%p 0]]\n\n> (scan \".sam\" twid:so)\n[%$ [%ta 7.168.371]]\n\n> (scan \"0ph\" twid:so)\n[%blob [1 1]]\n```\n\n---\n\n### `++when:so`\n\nParse date\n\nParsing `rule`. Parse a `@da`-formatted date string (sans the leading `~`) to a\n`date`.\n\n#### Source\n\n```hoon\n++  when\n  ~+\n  ;~  plug\n    %+  cook\n      |=([a=@ b=?] [b a])\n    ;~(plug dim:ag ;~(pose (cold | hep) (easy &)))\n    ;~(pfix dot mot:ag)   ::  month\n    ;~(pfix dot dip:ag)   ::  day\n    ;~  pose\n      ;~  pfix\n        ;~(plug dot dot)\n        ;~  plug\n          dum:ag\n          ;~(pfix dot dum:ag)\n          ;~(pfix dot dum:ag)\n          ;~(pose ;~(pfix ;~(plug dot dot) (most dot qix:ab)) (easy ~))\n        ==\n      ==\n      (easy [0 0 0 ~])\n    ==\n  ==\n```\n\n#### Examples\n\n```\n> `date`(scan \"2000.1.1..12.00.00..ffff\" when:so)\n[[a=%.y y=2.000] m=1 t=[d=1 h=12 m=0 s=0 f=~[0xffff]]]\n```\n\n---\n\n### `++zust:so`\n\nParse dimes from `@i`, `@f`, `@r` or `@q`\n\nParsing rule. Parses an atom of either `@if` (IP address), `@f` (loobean), `@r`\n(floating point) into a `dime`. The `@q` alone requires a leading `~`.\n\n#### Source\n\n```hoon\n++  zust\n  ~+\n  ;~  pose\n    (stag %is bip:ag)\n    (stag %if lip:ag)\n    royl\n    (stag %f ;~(pose (cold & (just 'y')) (cold | (just 'n'))))\n    (stag %q ;~(pfix sig feq:ag))\n  ==\n```\n\n#### Examples\n\n```\n> (scan \"~sampel\" zust:so)\n[%q 1.135]\n\n> (scan \"y\" zust:so)\n[%f %.y]\n\n> (scan \"127.0.0.1\" zust:so)\n[%if 2.130.706.433]\n\n> (scan \"af.0.0.0.0.e7a5.30d2.7\" zust:so)\n[%is 908.651.950.243.594.834.993.091.554.288.205.831]\n\n> (scan \"12.09\" zust:so)\n[%rs .12.09]\n```\n\n---\n",
    "scot": "## `++scot`\n\nRender dime as cord\n\nRenders a dime `mol` as a cord.\n\n#### Accepts\n\n`mol` is a `dime`.\n\n#### Produces\n\nA `cord`.\n\n#### Source\n\n```hoon\n++  scot\n  ~/  %scot\n  |=(mol=dime ~(rent co %$ mol))\n```\n\n#### Examples\n\n```\n> (scot %p ~pillyt)\n~.~pillyt\n\n> `@t`(scot %p ~pillyt)\n'~pillyt'\n\n> `@t`(scot %ux 0x12)\n'0x12'\n\n> `@t`(scot %if .127.0.0.1)\n'.127.0.0.1'\n\n> `@t`(scot %ta ~.asd_a)\n'~.asd_a'\n```\n\n---\n",
    "scow": "## `++scow`\n\nRender dime as tape\n\nRenders a dime `mol` as a tape.\n\n#### Accepts\n\n`mol` is a `dime`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  scow\n  ~/  %scow\n  |=(mol=dime ~(rend co %$ mol))\n```\n\n#### Examples\n\n```\n> (scow %p ~pillyt)\n\"~pillyt\"\n\n> (scow %ux 0x12)\n\"0x12\"\n\n> (scow %if .127.0.0.1)\n\".127.0.0.1\"\n\n> (scow %ta ~.asd_a)\n\"~.asd_a\"\n```\n\n---\n",
    "slat": "## `++slat`\n\nCurried slaw\n\nProduces a `gate` that parses a `knot` `txt` to a `unit` containing the atom of\nthe aura specified by `mod`. The `unit` will be null if parsing failed.\n\n#### Accepts\n\n`mod` is a `knot`.\n\n`txt` is a `cord`.\n\n#### Produces\n\nA `(unit @)`.\n\n#### Source\n\n```hoon\n++  slat  |=(mod=@tas |=(txt=@ta (slaw mod txt)))\n```\n\n#### Examples\n\n```\n> `(unit @p)`((slat %p) '~pillyt')\n[~ ~pillyt]\n\n> `(unit @ux)`((slat %ux) '0x12')\n[~ 0x12]\n\n> `(unit @if)`((slat %if) '.127.0.0.1')\n[~ .127.0.0.1]\n\n> `(unit @ta)`((slat %ta) '~.asd_a')\n[~ ~.asd_a]\n```\n\n---\n",
    "slav": "## `++slav`\n\nDemand: parse cord with input aura\n\nParses a cord `txt` to an atom of the aura specificed by `mod`.\nCrashes if it fails to parse.\n\n#### Accepts\n\n`mod` is a `term`\n\n`txt` is a `knot`.\n\n#### Produces\n\nan atom.\n\n#### Source\n\n```hoon\n++  slav  |=([mod=@tas txt=@ta] (need (slaw mod txt)))\n```\n\n#### Examples\n\n```\n> `@p`(slav %p '~pillyt')\n~pillyt\n\n> `@p`(slav %p '~pillam')\n! exit\n\n> `@ux`(slav %ux '0x12')\n0x12\n\n> `@ux`(slav %ux '0b10')\n! exit\n\n> `@if`(slav %if '.127.0.0.1')\n.127.0.0.1\n\n> `@if`(slav %if '.fe80.0.0.202')\n! exit\n\n> `@ta`(slav %ta '~.asd_a')\n~.asd_a\n\n> `@ta`(slav %ta '~~asd-a')\n! exit\n```\n\n---\n",
    "slaw": "## `++slaw`\n\nParse cord to input aura\n\nParses a cord `txt` to a `unit` containing the atom of the aura specified by\n`mod`. The `unit` is null if parsing failed.\n\n#### Accepts\n\n`mod` is a `term`.\n\n`txt` is a `knot`.\n\n#### Produces\n\nA `(unit @)`.\n\n#### Source\n\n```hoon\n++  slaw\n  ~/  %slaw\n  |=  [mod=@tas txt=@ta]\n  ^-  (unit @)\n  ?+    mod\n      ::  slow fallback case to the full slay\n      ::\n      =+  con=(slay txt)\n      ?.(&(?=([~ %$ @ @] con) =(p.p.u.con mod)) ~ [~ q.p.u.con])\n  ::\n      %da\n    (rush txt ;~(pfix sig (cook year when:so)))\n  ::\n      %p\n    (rush txt ;~(pfix sig fed:ag))\n  ::\n      %ud\n    (rush txt dem:ag)\n  ::\n      %ux\n    (rush txt ;~(pfix (jest '0x') hex:ag))\n  ::\n      %uv\n    (rush txt ;~(pfix (jest '0v') viz:ag))\n  ::\n      %ta\n    (rush txt ;~(pfix ;~(plug sig dot) urs:ab))\n  ::\n      %tas\n    (rush txt sym)\n  ==\n```\n\n#### Examples\n\n```\n> `(unit @p)`(slaw %p '~pillyt')\n[~ ~pillyt]\n\n> `(unit @p)`(slaw %p '~pillam')\n~\n\n> `(unit @ux)`(slaw %ux '0x12')\n[~ 0x12]\n\n> `(unit @ux)`(slaw %ux '0b10')\n~\n\n> `(unit @if)`(slaw %if '.127.0.0.1')\n[~ .127.0.0.1]\n\n> `(unit @if)`(slaw %if '.fe80.0.0.202')\n~\n\n> `(unit @ta)`(slaw %ta '~.asd_a')\n[~ ~.asd_a]\n\n> `(unit @ta)`(slaw %ta '~~asd-a')\n~\n```\n\n---\n",
    "slay": "## `++slay`\n\nParse cord to coin\n\nParses a cord `txt` to the unit of a `coin`.\n\n#### Accepts\n\n`txt` is a `@ta`.\n\n#### Produces\n\nA `(unit coin)`.\n\n#### Source\n\n```hoon\n++  slay\n  |=  txt=@ta  ^-  (unit coin)\n  =+  ^=  vex\n      ?:  (gth 0x7fff.ffff txt)                         ::  XX  petty cache\n        ~+  ((full nuck:so) [[1 1] (trip txt)])\n      ((full nuck:so) [[1 1] (trip txt)])\n  ?~  q.vex\n    ~\n  [~ p.u.q.vex]\n```\n\n#### Examples\n\n```\n> (slay '~pillyt')\n[~ [%$ p=[p=~.p q=13.184]]]\n\n> (slay '0x12')\n[~ [%$ p=[p=~.ux q=18]]]\n\n> (slay '.127.0.0.1')\n[~ [%$ p=[p=~.if q=2.130.706.433]]]\n\n> (slay '!')\n~\n```\n\n---\n",
    "smyt": "## `++smyt`\n\nRender path as tank\n\nRenders the path `bon` as a `tank`, which is used for\npretty-printing.\n\n#### Accepts\n\n`bon` is a `path`.\n\n#### Produces\n\nA `tank`.\n\n#### Source\n\n```hoon\n++  smyt\n  |=  bon=path  ^-  tank\n  :+  %rose  [['/' ~] ['/' ~] ~]\n  (turn bon |=(a=@ [%leaf (trip a)]))\n```\n\n#### Examples\n\n```\n> (smyt %)\n[ %rose\n  p=[p=\"/\" q=\"/\" r=\"\"]\n    q\n  ~[\n    [%leaf p=\"~zod\"]\n    [%leaf p=\"base\"]\n    [%leaf p=\"~2022.1.6..14.22.14..40bf\"]\n  ]\n]\n\n> (smyt /as/les/top)\n[ %rose\n  p=[p=\"/\" q=\"/\" r=\"\"]\n  q=~[[%leaf p=\"as\"] [%leaf p=\"les\"] [%leaf p=\"top\"]]\n]\n```\n\n---\n",
    "spat": "## `++spat`\n\nRender path as cord\n\nRenders a path `pax` as cord.\n\n#### Accepts\n\n`pax` is a `path`.\n\n#### Produces\n\nA `cord`.\n\n#### Source\n\n```hoon\n++  spat  |=(pax=path (crip (spud pax)))\n```\n\n#### Examples\n\n```\n> (spat %)\n'/~zod/base/~2022.1.6..14.23.31..e367'\n\n> (spat %/lib)\n'/~zod/base/~2022.1.6..14.23.43..829e/lib'\n\n> (spat /as/les/top)\n'/as/les/top'\n```\n\n---\n",
    "spud": "## `++spud`\n\nRender path as tape\n\nRenders a path `pax` as tape.\n\n#### Accepts\n\n`pax` is a `path`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  spud  |=(pax=path ~(ram re (smyt pax)))\n```\n\n#### Examples\n\n```\n> (spud %)\n\"/~zod/base/~2022.1.6..14.24.35..cddf\"\n\n> (spud %/lib)\n\"/~zod/base/~2022.1.6..14.24.43..3efb/lib\"\n\n> (spud /as/les/top)\n\"/as/les/top\"\n```\n\n---\n",
    "stab": "## `++stab`\n\nParse cord to path\n\nParses a cord `zep` to a static `path`.\nCrashes if it fails to parse.\n\n#### Accepts\n\n`zep` is a `@t`.\n\n#### Produces\n\nA `path`, or crash.\n\n#### Source\n\n```hoon\n++  stab  |=(zep=@t `path`(rash zep stap))\n```\n\n#### Examples\n\n```\n> (stab '/as/lek/tor')\n/as/lek/tor\n```\n\n---\n",
    "stap": "## `++stap`\n\nPath parser\n\nParsing `rule`. Parses a `path`, used internally by `++stab`.\n\n#### Source\n\n```hoon\n++  stap\n  %+  sear\n    |=  p=path\n    ^-  (unit path)\n    ?:  ?=([~ ~] p)  `~\n    ?.  =(~ (rear p))  `p\n    ~\n  ;~(pfix fas (most fas urs:ab))\n```\n\n#### Examples\n\n```\n> (scan \"/foo/bar/baz\" stap)\n/foo/bar/baz\n```\n\n---\n",
    "mack": "## `++mack`\n\nNock subject to unit\n\nAccepts a nock subject-formula cell and wraps it into a `unit`.\n`fol` is pure nock, meaning that nock `11` operations result in a block,\nproducing a `~`.\n\n#### Accepts\n\n`sub` is a subject noun.\n\n`fol` is a formula noun, which is generally a `nock`.\n\n#### Produces\n\nThe `unit` of a noun.\n\n#### Source\n\n```hoon\n++  mack\n  |=  [sub=* fol=*]\n  ^-  (unit)\n  =/  ton  (mink [sub fol] |~(^ ~))\n  ?.(?=(%0 -.ton) ~ `product.ton)\n```\n\n#### Examples\n\n```\n> (mack [[1 2 3] [0 1]])\n[~ [1 2 3]]\n\n> (mack [41 4 0 1])\n[~ 42]\n\n> (mack [4 0 4])\n~\n\n> (mack [[[0 2] [1 3]] 4 4 4 4 0 5])\n[~ 6]\n\n> ;;((unit @tas) (mack [[1 %yes %no] 6 [0 2] [0 6] 0 7]))\n[~ %no]\n```\n\n---\n",
    "mink": "## `++mink`\n\nMock interpreter\n\nBottom-level mock (virtual nock) interpreter. Produces a\n`tone`, a nock computation result. If nock 12 is invoked, `scry`\ncomputes on the subject and produces a `(unit (unit))` result. An empty\nresult becomes a `%1` `tone`, indicating a block.\n\n#### Accepts\n\n`subject` is the subject as a noun.\n\n`formula` is the formula as a noun.\n\n`scry` is an `%iron` gate invoked with nock operator 12.\n\n#### Produces\n\nA `tone`.\n\n#### Source\n\n```hoon\n++  mink  !.\n  ~/  %mink\n  |=  $:  [subject=* formula=*]\n          scry=$-(^ (unit (unit)))\n      ==\n  =|  trace=(list [@ta *])\n  |^  ^-  tone\n      ?+  formula  [%2 trace]\n          [^ *]\n        =/  head  $(formula -.formula)\n        ?.  ?=(%0 -.head)  head\n        =/  tail  $(formula +.formula)\n        ?.  ?=(%0 -.tail)  tail\n        [%0 product.head product.tail]\n      ::\n          [%0 axis=@]\n        =/  part  (frag axis.formula subject)\n        ?~  part  [%2 trace]\n        [%0 u.part]\n      ::\n          [%1 constant=*]\n        [%0 constant.formula]\n      ::\n          [%2 subject=* formula=*]\n        =/  subject  $(formula subject.formula)\n        ?.  ?=(%0 -.subject)  subject\n        =/  formula  $(formula formula.formula)\n        ?.  ?=(%0 -.formula)  formula\n        %=  $\n          subject  product.subject\n          formula  product.formula\n        ==\n      ::\n          [%3 argument=*]\n        =/  argument  $(formula argument.formula)\n        ?.  ?=(%0 -.argument)  argument\n        [%0 .?(product.argument)]\n      ::\n          [%4 argument=*]\n        =/  argument  $(formula argument.formula)\n        ?.  ?=(%0 -.argument)  argument\n        ?^  product.argument  [%2 trace]\n        [%0 .+(product.argument)]\n      ::\n          [%5 a=* b=*]\n        =/  a  $(formula a.formula)\n        ?.  ?=(%0 -.a)  a\n        =/  b  $(formula b.formula)\n        ?.  ?=(%0 -.b)  b\n        [%0 =(product.a product.b)]\n      ::\n          [%6 test=* yes=* no=*]\n        =/  result  $(formula test.formula)\n        ?.  ?=(%0 -.result)  result\n        ?+  product.result\n              [%2 trace]\n          %&  $(formula yes.formula)\n          %|  $(formula no.formula)\n        ==\n      ::\n          [%7 subject=* next=*]\n        =/  subject  $(formula subject.formula)\n        ?.  ?=(%0 -.subject)  subject\n        %=  $\n          subject  product.subject\n          formula  next.formula\n        ==\n      ::\n          [%8 head=* next=*]\n        =/  head  $(formula head.formula)\n        ?.  ?=(%0 -.head)  head\n        %=  $\n          subject  [product.head subject]\n          formula  next.formula\n        ==\n      ::\n          [%9 axis=@ core=*]\n        =/  core  $(formula core.formula)\n        ?.  ?=(%0 -.core)  core\n        =/  arm  (frag axis.formula product.core)\n        ?~  arm  [%2 trace]\n        %=  $\n          subject  product.core\n          formula  u.arm\n        ==\n      ::\n          [%10 [axis=@ value=*] target=*]\n        ?:  =(0 axis.formula)  [%2 trace]\n        =/  target  $(formula target.formula)\n        ?.  ?=(%0 -.target)  target\n        =/  value  $(formula value.formula)\n        ?.  ?=(%0 -.value)  value\n        =/  mutant=(unit *)\n          (edit axis.formula product.target product.value)\n        ?~  mutant  [%2 trace]\n        [%0 u.mutant]\n      ::\n          [%11 tag=@ next=*]\n        =/  next  $(formula next.formula)\n        ?.  ?=(%0 -.next)  next\n        :-  %0\n        .*  subject\n        [11 tag.formula 1 product.next]\n      ::\n          [%11 [tag=@ clue=*] next=*]\n        =/  clue  $(formula clue.formula)\n        ?.  ?=(%0 -.clue)  clue\n        =/  next\n          =?    trace\n              ?=(?(%hunk %hand %lose %mean %spot) tag.formula)\n            [[tag.formula product.clue] trace]\n          $(formula next.formula)\n        ?.  ?=(%0 -.next)  next\n        :-  %0\n        .*  subject\n        [11 [tag.formula 1 product.clue] 1 product.next]\n      ::\n          [%12 ref=* path=*]\n        =/  ref  $(formula ref.formula)\n        ?.  ?=(%0 -.ref)  ref\n        =/  path  $(formula path.formula)\n        ?.  ?=(%0 -.path)  path\n        =/  result  (scry product.ref product.path)\n        ?~  result\n          [%1 product.path]\n        ?~  u.result\n          [%2 [%hunk product.ref product.path] trace]\n        [%0 u.u.result]\n      ==\n  ::\n  ++  frag\n    |=  [axis=@ noun=*]\n    ^-  (unit)\n    ?:  =(0 axis)  ~\n    |-  ^-  (unit)\n    ?:  =(1 axis)  `noun\n    ?@  noun  ~\n    =/  pick  (cap axis)\n    %=  $\n      axis  (mas axis)\n      noun  ?-(pick %2 -.noun, %3 +.noun)\n    ==\n  ::\n  ++  edit\n    |=  [axis=@ target=* value=*]\n    ^-  (unit)\n    ?:  =(1 axis)  `value\n    ?@  target  ~\n    =/  pick  (cap axis)\n    =/  mutant\n      %=  $\n        axis    (mas axis)\n        target  ?-(pick %2 -.target, %3 +.target)\n      ==\n    ?~  mutant  ~\n    ?-  pick\n      %2  `[u.mutant +.target]\n      %3  `[-.target u.mutant]\n    ==\n  --\n```\n\n#### Examples\n\n```\n> (mink [20 [4 0 1]] ,~)\n[%0 product=21]\n\n> (mink [[[4 5] [6 14 15]] [0 7]] ,~)\n[%0 product=[14 15]]\n\n> (mink [42 12 [0 1] [1 73]] |=(a=^ ``(add (,[@ @] a))))\n[%0 product=115]\n\n> (mink [0 12 [1 0] [1 0]] |=(* ~))\n[%1 block=0]\n\n> (mink [42 0 2] ,~)\n[%2 trace=~]\n```\n\n---\n",
    "mock": "## `++mock`\n\nCompute formula on subject with hint\n\nProduces a `toon`, which is either a sucessful, blocked, or\ncrashed result. If nock 11 is invoked, `gul` computes on the subject and\nproduces a `(unit (unit))` result. An empty result becomes a `%1` `tune`,\nindicating a block.\n\n#### Accepts\n\n`sub` is the subject as a noun.\n\n`fol` is the formula as a noun.\n\n`gul` is an %iron gate invoked with nock operator 11.\n\n#### Produces\n\nThe `unit` of a noun.\n\n#### Source\n\n```hoon\n++  mock\n  |=  [[sub=* fol=*] gul=$-(^ (unit (unit)))]\n  (mook (mink [sub fol] gul))\n```\n\n#### Examples\n\n```\n> (mock [5 4 0 1] ,~)\n[%0 p=6]\n\n> (mock [0 12 [0 1] [0 1]] |=(* ``999))\n[%0 p=999]\n\n> (mock [42 12 [0 1] [0 1]] |=(* ~))\n[%1 p=42]\n\n> (mock [42 0 2] ,~)\n[%2 p=~]\n```\n\n---\n",
    "mook": "## `++mook`\n\nIntelligently render crash annotation\n\nConverts a `%2` `tone` nock stack trace to a list of `tank`. Each may be a\n`tank`, `cord`, `spot`, or trapped `tank`.\n\n#### Accepts\n\n`ton` is a `tone`.\n\n#### Produces\n\nA `toon`.\n\n#### Source\n\n```hoon\n++  mook\n  |=  ton=tone\n  ^-  toon\n  ?.  ?=([%2 *] ton)\n    ton\n  |^  [%2 (turn skip rend)]\n  ::\n  ++  skip\n    ^+  trace.ton\n    =/  yel  (lent trace.ton)\n    ?.  (gth yel 1.024)  trace.ton\n    %+  weld\n      (scag 512 trace.ton)\n    ^+  trace.ton\n    :_  (slag (sub yel 512) trace.ton)\n    :-  %lose\n    (crip \"[skipped {(scow %ud (sub yel 1.024))} frames]\")\n  ::\n  ::  +rend: raw stack frame to tank\n  ::\n  ::    $%  [%hunk ref=* path]            ::  failed scry ([~ ~])\n  ::        [%lose cord]                  ::  skipped frames\n  ::        [%hand *]                     ::  mug any\n  ::        [%mean $@(cord (trap tank))]  ::  ~_ et al\n  ::        [%spot spot]                  ::  source location\n  ::    ==\n  ::\n  ++  rend\n    |=  [tag=@ta dat=*]\n    ^-  tank\n    ?+    tag\n    ::\n      leaf+\"mook.{(rip 3 tag)}\"\n    ::\n        %hunk\n      ?@  dat  leaf+\"mook.hunk\"\n      =/  sof=(unit path)  ((soft path) +.dat)\n      ?~  sof  leaf+\"mook.hunk\"\n      (smyt u.sof)\n    ::\n        %lose\n      ?^  dat  leaf+\"mook.lose\"\n      leaf+(rip 3 dat)\n    ::\n        %hand\n      leaf+(scow %p (mug dat))\n    ::\n        %mean\n      ?@  dat  leaf+(rip 3 dat)\n      =/  mac  (mack dat -.dat)\n      ?~  mac  leaf+\"####\"\n      =/  sof  ((soft tank) u.mac)\n      ?~  sof  leaf+\"mook.mean\"\n      u.sof\n    ::\n        %spot\n      =/  sof=(unit spot)  ((soft spot) dat)\n      ?~  sof  leaf+\"mook.spot\"\n      :+  %rose  [\":\" ~ ~]\n      :~  (smyt p.u.sof)\n          =*  l   p.q.u.sof\n          =*  r   q.q.u.sof\n          =/  ud  |=(a=@u (scow %ud a))\n          leaf+\"<[{(ud p.l)} {(ud q.l)}].[{(ud p.r)} {(ud q.r)}]>\"\n      ==\n    ==\n  --\n```\n\n#### Examples\n\n```\n> (mook [%0 5 4 5 1])\n[%0 p=[5 4 5 1]]\n\n> (mook [%2 ~[[%hunk %rose [\"<\" \",\" \">\"] ~[[%leaf \"err\"]]]]])\n[%2 p=~[[%leaf p=\"mook.hunk\"]]]\n\n> (mook [%2 ~[[%mean |.(>(add 5 6)<)]]])\n[%2 p=~[[%leaf p=\"11\"]]]\n\n> (mook [%2 ~[[%spot /b/repl [1 1]^[1 2]] [%mean |.(!!)]]])\n[ %2\n    p\n  ~[\n    [ %rose\n      p=[p=\":\" q=\"\" r=\"\"]\n        q\n      [   i\n        [ %rose\n          p=[p=\"/\" q=\"/\" r=\"\"]\n          q=[i=[%leaf p=\"b\"] t=[i=[%leaf p=\"repl\"] t=~]]\n        ]\n        t=[i=[%leaf p=\"<[1 1].[1 2]>\"] t=~]\n      ]\n    ]\n    [%leaf p=\"####\"]\n  ]\n]\n```\n\n---\n",
    "mole": "## `++mole`\n\nTyped unitary virtual\n\nKicks a `trap`, producing its result in a `unit` if successful, or a null `unit`\nif it crashed. Unitized version of [`++mule`](#mule).\n\n#### Accepts\n\n`tap` is a `trap`.\n\n#### Produces\n\nA `(unit *)`, where the `*` will be the type produced by the expression.\n\n#### Source\n\n```hoon\n++  mole\n  ~/  %mole\n  |*  tap=(trap)\n  ^-  (unit _$:tap)\n  =/  mur  (mure tap)\n  ?~(mur ~ `$:tap)\n```\n\n#### Examples\n\n```\n> (mole |.(`@t`(add 50 47)))\n[~ 'a']\n\n> (mole |.(~|('Error!' !!)))\n~\n```\n\n---\n",
    "mong": "## `++mong`\n\nSlam gate with sample\n\nProduces a `toon` computation result from slamming `gat` with\n`sam`, using `gul` to compute or block on nock 11 when applicable.\n\n#### Accepts\n\n`gat` is a noun that is generally a `gate`.\n\n`sam` is a sample noun.\n\n`gul` is an `%iron` gate invoked with nock operator 11.\n\n#### Produces\n\nA `toon`.\n\n#### Source\n\n```hoon\n++  mong\n  |=  [[gat=* sam=*] gul=$-(^ (unit (unit)))]\n  ^-  toon\n  ?.  ?=([* ^] gat)  [%2 ~]\n  (mock [gat(+< sam) %9 2 %0 1] gul)\n```\n\n#### Examples\n\n```\n> (mong [|=(@ 20) ~] ,~)\n[%0 p=20]\n\n> (mong [|=(@ !!) ~] ,~)\n[%2 p=~]\n\n> (mong [|=(a=@ (add 20 a)) ~] ,~)\n[%0 p=20]\n\n> (mong [|=(a=[@ @] (add 20 -.a)) ~] ,~)\n[%2 p=~]\n\n> (mong [|=(a=[@ @] (add 20 -.a)) [4 6]] ,~)\n[%0 p=24]\n\n> (mong [|=(a=@ .^(* a)) 99] |=(^ ``+<))\n[%0 p=[[140 1.853.189.998] 99]]\n\n> (mong [|=(a=@ .^(@ a)) 99] |=([* a=*] ``+((,@ a))))\n[%0 p=100]\n```\n\n---\n",
    "mule": "## `++mule`\n\nTyped virtual\n\nKicks a `trap`, producing its results or any errors that occur along\nthe way. Used to lazily compute stack traces.\n\n#### Accepts\n\n`tap` is a `trap`, generally producing a list of `tank`s.\n\n#### Produces\n\nAn `(each * (list tank))` - `%.y` indicates success and `%.n` indicates a crash.\n\n#### Source\n\n```hoon\n++  mule\n  ~/  %mule\n  |*  tap=(trap)\n  =/  mud  (mute tap)\n  ?-  -.mud\n    %&  [%& p=$:tap]\n    %|  [%| p=p.mud]\n  ==\n```\n\n#### Examples\n\n```\n> (mule |.((add 1 1)))\n[%.y p=2]\n\n> (mule |.(~|(%error !!)))\n[%.n p=~[[%leaf p=\"%error\"]]]\n```\n\n---\n",
    "mure": "## `++mure`\n\nUntyped unitary virtual\n\nKicks a `trap`, producing its results in a `unit` which is null if it crashed.\nThe result is just a noun, no type information is preserved.\n\n#### Accepts\n\nA `trap`.\n\n#### Produces\n\nA `(unit *)`.\n\n#### Source\n\n```hoon\n++  mure\n  |=  tap=(trap)\n  ^-  (unit)\n  =/  ton  (mink [tap %9 2 %0 1] |=((pair) ``.*(~ [%12 1+p 1+q])))\n  ?.(?=(%0 -.ton) ~ `product.ton)\n```\n\n#### Examples\n\n```\n> (mure |.(~|(%error !!)))\n~\n\n> (mure |.((add 1 1)))\n[~ 2]\n\n> (mure |.('foo'))\n[~ 7.303.014]\n\n> ((unit @t) (mure |.('foo')))\n[~ 'foo']\n```\n\n---\n",
    "mute": "## `++mute`\n\nUntyped virtual\n\nKicks a `trap`, producing its result as a noun or the tanks of any error that\noccurs. Similar to [`++mule`](#mule), but preserves no type information.\n\n#### Accepts\n\n`tap` is a `trap`.\n\n#### Produces\n\nA `(each * (list tank))`, where `%.y` indicates success and `%.n` indicates\nfailure.\n\n#### Source\n\n```hoon\n++  mute\n  |=  tap=(trap)\n  ^-  (each * (list tank))\n  =/  ton  (mock [tap %9 2 %0 1] |=((pair) ``.*(~ [%12 1+p 1+q])))\n  ?-  -.ton\n    %0  [%& p.ton]\n  ::\n    %1  =/  sof=(unit path)  ((soft path) p.ton)\n        [%| ?~(sof leaf+\"mute.hunk\" (smyt u.sof)) ~]\n  ::\n    %2  [%| p.ton]\n  ==\n```\n\n#### Examples\n\n```\n> (mute |.(leaf+\"hello\"))\n[%.y p=[1.717.658.988 104 101 108 108 111 0]]\n\n> (mute |.(!!))\n[%.n p=~]\n\n> (mute |.(~|(%error !!)))\n[%.n p=~[[%leaf p=\"%error\"]]]\n\n> (mute |.((cat 3 'foo' 'bar')))\n[%.y p=125.762.588.864.358]\n```\n\n---\n",
    "slum": "## `++slum`\n\nSlam a gate on a sample using raw nock, untyped\n\nSlam `gat` with `sam`. Uses a raw `.*` nock expression internally and does not\npreserve type information for the result. This will crash if evaluation crashes.\n\n#### Examples\n\n```\n> (slum |=([a=@ b=@] (add a b)) [7 9])\n16\n\n> (slum (cury cat 3) ['foo' 'bar'])\n125.762.588.864.358\n\n> (@t (slum (cury cat 3) ['foo' 'bar']))\n'foobar'\n\n> (slum |=(* !!) 42)\ndojo: hoon expression failed\n```\n\n---\n",
    "soft": "## `++soft`\n\nVirtual clam\n\nClam (mold) noun `fud` with `mold` `han`, producing a `unit` of the result. The\n`unit` is null if clamming failed. This is curried, so the soft-clamming gate can\nbe stored and called repeatedly.\n\n#### Accepts\n\n`han` is a `mold`.\n\n`fud` is a noun.\n\n#### Produces\n\nA `(unit *)`, where the `*` will be the type produced by the mold.\n\n#### Source\n\n```hoon\n++  soft\n  |*  han=$-(* *)\n  |=(fud=* (mole |.((han fud))))\n```\n\n#### Examples\n\n```\n> ((soft @t) 97)\n[~ 'a']\n\n> ((soft @t) [1 2])\n~\n\n> ((soft ,[@ux @ux]) ['a' 'b'])\n[~ [0x61 0x62]]\n```\n\n---\n",
    "abel": "## `+$abel`\n\nOriginal sin: type\n\nOld type, same as the new `type`.\n\n#### Source\n\n```hoon\n+$  abel  typo\n```\n\n#### Examples\n\n```\n> *abel\n#t/*\n```\n\n---\n",
    "alas": "## `+$alas`\n\nAlias list\n\nThis is the type used in `%brcb` (`|_` door) `hoon` type for `+*` alias arms.\n\n#### Source\n\n```hoon\n+$  alas  (list (pair term hoon))\n```\n\n---\n",
    "atom": "## `+$atom`\n\nJust an atom\n\nThis is the same as `@`.\n\n#### Source\n\n```hoon\n+$  atom  @\n```\n\n#### Examples\n\n```\n> *atom\n0\n\n> `atom`'foo'\n7.303.014\n```\n\n---\n",
    "aura": "## `+$aura`\n\n'type' of atom\n\nBy convention, a short name for a category of atom. `aura` is circularly\ndefined, with `@ta` being the `aura` of the ASCII subset commonly used in urbit.\n\n#### Source\n\n```hoon\n+$  aura  @ta\n```\n\n#### Examples\n\nSee also: [`+$base`](#base), aura reference\n\n```\n> `aura`'ux'\n~.ux\n```\n\n---\n",
    "base": "## `+$base`\n\nBase type\n\nA base type that nouns are built from. A `base` is either a noun, atom with\naura, cell, boolean, null, or an empty set.\n\n#### Source\n\n```hoon\n+$  base            ::  base mold\n  $@  $?  %noun     ::  any noun\n          %cell     ::  any cell\n          %flag     ::  loobean\n          %null     ::  ~ == 0\n          %void     ::  empty set\n      ==            ::\n  [%atom p=aura]    ::  atom\n```\n\n#### Examples\n\n```\n> *base\n%void\n\n> (ream '=|(^ !!)')\n[%tsbr p=[%base p=%cell] q=[%zpzp ~]]\n```\n\n---\n",
    "woof": "## `+$woof`\n\nSimple embed\n\nAn atom or some `hoon`.\n\n#### Source\n\n```hoon\n+$  woof  $@(@ [~ p=hoon])\n```\n\n#### Examples\n\n```\n> *woof\n0\n\n> `woof`[~ %base p=%cell]\n[~ p=[%base p=%cell]]\n\n> `woof`'foo'\n7.303.014\n```\n\n---\n",
    "chum": "## `+$chum`\n\nJet hint information\n\nJet hint information that must be present in the body of a `~/` or `~%` rune. A\n`chum` can optionally contain a kelvin version, jet vendor, and version number.\n\n#### Source\n\n```hoon\n+$  chum  $?  lef=term                                  ::  jet name\n              [std=term kel=@]                          ::  kelvin version\n              [ven=term pro=term kel=@]                 ::  vendor and product\n              [ven=term pro=term ver=@ kel=@]           ::  all of the above\n          ==                                            ::\n```\n\n#### Examples\n\n```\n> `chum`'hi'\nlef=%hi\n\n> (ream '~/(%lob.314 !!)')\n[%sgfs p=[std=%lob kel=314] q=[%zpzp ~]]\n```\n\n---\n",
    "coil": "## `+$coil`\n\nTuple of core information\n\nVariance `p`, subject type `q`, and `r`: optional compiled nock, and arms. Used\nas an intermediate step during compilation and converted to a core.\n\n#### Source\n\n```hoon\n+$  coil  $:  p=garb                               ::  name, wet=dry, vary\n              q=type                               ::  context\n              r=(pair seminoun (map term tome))    ::  chapters\n          ==                                       ::\n```\n\n---\n",
    "garb": "## `+$garb`\n\nCore metadata\n\nA triple of an optional name, polarity (wet/dry), and variance (`%iron`, etc).\n\n#### Source\n\n```hoon\n+$  garb  (trel (unit term) poly vair)\n```\n\n---\n",
    "poly": "## `+$poly`\n\nPolarity\n\nWhether a core is wet or dry.\n\n#### Source\n\n```hoon\n+$  poly  ?(%wet %dry)\n```\n\n---\n",
    "foot": "## `+$foot`\n\nCases of arms by variance model.\n\n#### Source\n\n```hoon\n+$  foot  $%  [%dry p=hoon]    ::  dry arm, geometric\n              [%wet p=hoon]    ::  wet arm, generic\n          ==\n```\n\n---\n",
    "link": "## `+$link`\n\nLexical segment\n\nUsed for documentation.\n\n#### Source\n\n```hoon\n+$  link                               ::  lexical segment\n          $%  [%chat p=term]           ::  |chapter\n              [%cone p=aura q=atom]    ::  %constant\n              [%frag p=term]           ::  .leg\n              [%funk p=term]           ::  +arm\n          ==\n```\n\n---\n",
    "crib": "## `+$crib`\n\nSummary and details\n\nSummary and details for documentation.\n\n#### Source\n\n```hoon\n+$  crib  [summary=cord details=(list sect)]\n```\n\n---\n",
    "help": "## `+$help`\n\nDocumentation\n\n#### Source\n\n```hoon\n+$  help  [links=(list link) =crib]\n```\n\n---\n",
    "limb": "## `+$limb`\n\nWing element\n\nReference into subject by tree address or name.\n\n#### Source\n\n```hoon\n+$  limb  $@  term                                      ::  wing element\n          $%  [%& p=axis]                               ::  by geometry\n              [%| p=@ud q=(unit term)]                  ::  by name\n          ==                                            ::\n```\n\n#### Examples\n\n```\n> (ream '^^$')\n[%wing p=~[[%.n p=2 q=[~ %$]]]]\n```\n\n---\n",
    "null": "## `+$null`\n\nNull, nil, etc\n\nJust `~`.\n\n#### Source\n\n```hoon\n+$  null  ~\n```\n\n#### Examples\n\n```\n> *null\n~\n```\n\n---\n",
    "onyx": "## `+$onyx`\n\nArm activation\n\n#### Source\n\n```hoon\n+$  onyx  (list (pair type foot))\n```\n\n---\n",
    "opal": "## `+$opal`\n\nWing match\n\nArm or leg of a wing.\n\n#### Source\n\n```hoon\n+$  opal                                            ::  limb match\n          $%  [%& p=type]                           ::  leg\n              [%| p=axis q=(set [p=type q=foot])]   ::  arm\n          ==                                        ::\n```\n\n---\n",
    "pica": "## `+$pica`\n\nProse or code\n\nA `(pair ? cord)`. If `%.y` it's prose and if `%.n` it's code. Used in\ndocumentation.\n\n#### Source\n\n```hoon\n+$  pica  (pair ? cord)\n```\n\n---\n",
    "palo": "## `+$palo`\n\nWing trace, match\n\nA [`$vein`](#vein) and a [`$opal`](#opal).\n\n#### Source\n\n```hoon\n+$  palo  (pair vein opal)\n```\n\n---\n",
    "plat": "## `+$plat`\n\n%hoon, %type, %nock or %tank\n\n#### Source\n\n```hoon\n+$  plat\n          $?  %hoon\n              %type\n              %nock\n              %tank\n          ==\n```\n\n---\n",
    "pock": "## `+$pock`\n\nChanges\n\n#### Source\n\n```hoon\n+$  pock  (pair axis nock)\n```\n\n---\n",
    "port": "## `+$port`\n\nSuccessful wing match\n\n#### Source\n\n```hoon\n+$  port  (each palo (pair type nock))\n```\n\n---\n",
    "spec": "## `+$spec`\n\nStructure definition AST.\n\n#### Source\n\n```hoon\n+$  spec                                                ::  structure definition\n          $~  [%base %null]                             ::\n          $%  [%base p=base]                            ::  base type\n              [%dbug p=spot q=spec]                     ::  set debug\n              [%leaf p=term q=@]                        ::  constant atom\n              [%like p=wing q=(list wing)]              ::  reference\n              [%loop p=term]                            ::  hygienic reference\n              [%made p=(pair term (list term)) q=spec]  ::  annotate synthetic\n              [%make p=hoon q=(list spec)]              ::  composed spec\n              [%name p=term q=spec]                     ::  annotate simple\n              [%over p=wing q=spec]                     ::  relative to subject\n          ::                                            ::\n              [%bcgr p=spec q=spec]                     ::  $>, filter: require\n              [%bcbc p=spec q=(map term spec)]          ::  $$, recursion\n              [%bcbr p=spec q=hoon]                     ::  $|, verify\n              [%bccb p=hoon]                            ::  $_, example\n              [%bccl p=[i=spec t=(list spec)]]          ::  $:, tuple\n              [%bccn p=[i=spec t=(list spec)]]          ::  $%, head pick\n              [%bcdt p=spec q=(map term spec)]          ::  $., read-write core\n              [%bcgl p=spec q=spec]                     ::  $<, filter: exclude\n              [%bchp p=spec q=spec]                     ::  $-, function core\n              [%bckt p=spec q=spec]                     ::  $^, cons pick\n              [%bcls p=stud q=spec]                     ::  $+, standard\n              [%bcfs p=spec q=(map term spec)]          ::  $/, write-only core\n              [%bcmc p=hoon]                            ::  $;, manual\n              [%bcpm p=spec q=hoon]                     ::  $&, repair\n              [%bcsg p=hoon q=spec]                     ::  $~, default\n              [%bctc p=spec q=(map term spec)]          ::  $`, read-only core\n              [%bcts p=skin q=spec]                     ::  $=, name\n              [%bcpt p=spec q=spec]                     ::  $@, atom pick\n              [%bcwt p=[i=spec t=(list spec)]]          ::  $?, full pick\n              [%bczp p=spec q=(map term spec)]          ::  $!, opaque core\n          ==                                            ::\n```\n\n#### Examples\n\n```\n> *spec\n[%base p=%null]\n\n> `spec`[%bccl ~[leaf+ud+1 leaf+ud+2]]\n[%bccl p=[i=[%leaf p=%ud q=1] t=~[[%leaf p=%ud q=2]]]]\n```\n\n---\n",
    "tent": "## `+$tent`\n\nModel builder\n\n#### Source\n\n```hoon\n+$  tent\n          $%  [%| p=wing q=tent r=(list spec)]    ::  ~(p q r...)\n              [%& p=(list wing)]                  ::  a.b:c.d\n          ==                                      ::\n```\n\n---\n",
    "tiki": "## `+$tiki`\n\nTest case\n\nThis is used when compiling `?-` expressions and similar.\n\n#### Source\n\n```hoon\n+$  tiki                                                ::  test case\n          $%  [%& p=(unit term) q=wing]                 ::  simple wing\n              [%| p=(unit term) q=hoon]                 ::  named wing\n          ==                                            ::\n```\n\n---\n",
    "skin": "## `+$skin`\n\nTexture\n\nThis type is used for faces and similar by the compiler.\n\n#### Source\n\n```hoon\n+$  skin                             ::  texture\n          $@  =term                  ::  name/~[term %none]\n          $%  [%base =base]          ::  base match\n              [%cell =skin =skin]    ::  pair\n              [%dbug =spot =skin]    ::  trace\n              [%leaf =aura =atom]    ::  atomic constant\n              [%help =help =skin]    ::  describe\n              [%name =term =skin]    ::  apply label\n              [%over =wing =skin]    ::  relative to\n              [%spec =spec =skin]    ::  cast to\n              [%wash depth=@ud]      ::  strip faces\n          ==                         ::\n```\n\n---\n",
    "tome": "## `+$tome`\n\nCore chapter\n\nThis type is used by the compiler for the contents of arms in cores.\n\n#### Source\n\n```hoon\n+$  tome  (pair what (map term hoon))\n```\n\n---\n",
    "tope": "## `+$tope`\n\nTopographic type\n\nDescribes the structure of a noun.\n\n#### Source\n\n```hoon\n+$  tope              ::  topographic type\n  $@  $?  %&          ::  cell or atom\n          %|          ::  atom\n      ==              ::\n  (pair tope tope)    ::  cell\n```\n\n#### Examples\n\n```\n> *tope\n%.n\n\n> `tope`[%| %&]\n[p=%.n q=%.y]\n```\n\n---\n",
    "hoot": "## `++hoot`\n\nHoon tools\n\nContainer core for internally-used XML structure types. XML structure types\nyou'd typically use directly are defined in [Standard Library section\n5e](/reference/hoon/stdlib/5e).\n\n#### Source\n\n```hoon\n++  hoot\n  |%\n```\n\n---\n\n### `+$beer:hoot`\n\nSimple embed\n\nEither a tape element or interpolated hoon expression in an XML attribute.\n\n#### Source\n\n```hoon\n+$  beer  $@(char [~ p=hoon])\n```\n\n---\n\n### `+$mane:hoot`\n\nXML name+space\n\nXML tag name and optional namespace.\n\n#### Source\n\n```hoon\n+$  mane  $@(@tas [@tas @tas])\n```\n\n#### Examples\n\n```\n> (en-xml:html ;foo;)\n\"<foo></foo>\"\n\n> (en-xml:html ;foo_bar;)\n\"<foo:bar></foo:bar>\"\n\n> `manx:hoot`;foo_bar;\n[g=[n=[%foo %bar] a=~] c=~]\n\n> `mane:hoot`n.g:`manx`;foo_bar;\n[%foo %bar]\n\n> `mane:hoot`n.g:`manx:hoot`;foo;\n%foo\n```\n\n---\n\n### `+$manx:hoot`\n\nDynamic XML node\n\nAn XML element which may contain text, attributes, and other elements.\n\n`g` is a [`$marx:hoot`](#marxhoot) (a tag) and `c` is a\n[`$marl:hoot`](#marlhoot) (its contents).\n\n#### Source\n\n```hoon\n+$  manx  $~([[%$ ~] ~] [g=marx c=marl])\n```\n\n#### Examples\n\n```\n> *manx:hoot\n[g=[n=%$ a=~] c=~\n\n> `manx:hoot`;foo;\n[g=[n=%foo a=~] c=~]\n\n> (en-xml:html `manx:hoot`;foo;)\n\"<foo></foo>\"\n\n> =a ^-  manx:hoot\n     ;foo\n       ;bar: abc\n       ;baz\n         ;xxx: hello\n       ==\n     ==\n\n> a\n[ g=[n=%foo a=~]\n    c\n  ~[\n    [ g=[n=%bar a=~]\n      c=~[[g=[n=%$ a=~[[n=%$ v=\"abc\"]]] c=~]]\n    ]\n    [ g=[n=%baz a=~]\n        c\n      ~[\n        [ g=[n=%xxx a=~]\n          c=~[[g=[n=%$ a=~[[n=%$ v=\"hello\"]]] c=~]]\n        ]\n      ]\n    ]\n  ]\n]\n\n> (en-xml:html a)\n\"<foo><bar>abc</bar><baz><xxx>hello</xxx></baz></foo>\"\n```\n\n---\n\n### `+$marl:hoot`\n\nDynamic XML nodes\n\nA list of XML nodes - maybe with interpolation and recursion. See\n[`$tuna:hoot`](#tunahoot).\n\n#### Source\n\n```hoon\n+$  marl  (list tuna)\n```\n\n#### Examples\n\n```\n> *marl\n~\n\n> ^-  marl:hoot\n  ;=\n    ;foo: abc\n    ;bar: def\n  ==\n~[\n  [g=[n=%foo a=~] c=~[[g=[n=%$ a=~[[n=%$ v=~['a' 'b' 'c']]]] c=~]]]\n  [g=[n=%bar a=~] c=~[[g=[n=%$ a=~[[n=%$ v=~['d' 'e' 'f']]]] c=~]]]\n]\n\n> %-  en-xml:html\n  ;baz\n    ;=\n      ;foo: abc\n      ;bar: def\n    ==\n  ==\n\"<baz><foo>abc</foo><bar>def</bar></baz>\"\n```\n\n---\n\n### `+$mart:hoot`\n\nDynamic XML attributes\n\nA list of atributes for an XML tag. For each list item, `n` is a\n[`$mane:hoot`](#manehoot) (an attribute name with optional namespace) and `v` is\na `(list beer:hoot)` (the attribute itself, maybe with interpolated hoon).\n\n#### Source\n\n```hoon\n+$  mart  (list [n=mane v=(list beer)])\n```\n\n#### Examples\n\n```\n> *mart:hoot\n~\n\n> `manx:hoot`;foo.bar;\n[g=[n=%foo a=~[[n=%class v=~['b' 'a' 'r']]]] c=~]\n\n> `mart:hoot`a.g:`manx:hoot`;foo.bar;\n~[[n=%class v=~['b' 'a' 'r']]]\n\n> (en-xml:html ;foo.bar;)\n\"<foo class=\\\"bar\\\"></foo>\"\n```\n\n---\n\n### `+$marx:hoot`\n\nDynamic XML tag\n\nAn XML tag with optional attributes. `n` is a [`$mane:hoot`](#manehoot) (the tag\nname with optional namespace) and `a` is a [`$mart:hoot`](#marthoot) (any XML\nattributes).\n\n#### Source\n\n```hoon\n+$  marx  $~([%$ ~] [n=mane a=mart])\n```\n\n#### Examples\n\n```\n> `manx:hoot`;foo.bar;\n[g=[n=%foo a=~[[n=%class v=~['b' 'a' 'r']]]] c=~]\n\n> `marx:hoot`g:`manx:hoot`;foo.bar;\n[n=%foo a=~[[n=%class v=~['b' 'a' 'r']]]]\n\n> (en-xml:html ;foo.bar;)\n\"<foo class=\\\"bar\\\"></foo>\"\n```\n\n---\n\n### `+$mare:hoot`\n\nNode or nodes\n\nIf `%.y`, a [`$manx:hoot`](#manxhoot) (single XML node). If `%.n`, a\n[`$marl:hoot`](#marlhoot) (list of XML nodes).\n\n#### Source\n\n```hoon\n+$  mare  (each manx marl)\n```\n\n#### Examples\n\n```\n> *mare:hoot\n[%.y p=[g=[n=%$ a=~] c=~]]\n\n> `mare:hoot`[%.y ;foo.bar;]\n[%.y p=[g=[n=%foo a=~[[n=%class v=~['b' 'a' 'r']]]] c=~]]\n\n> `mare:hoot`[%.n ~[;foo.bar; ;baz;]]\n[%.n p=~[[g=[n=%foo a=~[[n=%class v=~['b' 'a' 'r']]]] c=~] [g=[n=%baz a=~] c=~]]]\n```\n\n---\n\n### `+$maru:hoot`\n\nInterpolation or nodes\n\nIf `%.y`, a [`$tuna:hoot`](#tunahoot). If `%.n`, a [`$marl:hoot`](#marlhoot).\n\n#### Source\n\n```hoon\n+$  maru  (each tuna marl)\n```\n\n---\n\n### `+$tuna:hoot`\n\nMaybe interpolation\n\nKinds of nodes. Either an ordinary [`$manx:hoot`](#manxhoot), or else a plain tape, a\n[`$marl:hoot`](#marlhoot), or a function call.\n\n#### Source\n\n```hoon\n+$  tuna\n    $~  [[%$ ~] ~]\n    $^  manx\n    $:  ?(%tape %manx %marl %call)\n        p=hoon\n    ==\n```\n\n---\n",
    "hoon": "## `+$hoon`\n\nHoon AST\n\nSee the [Rune section](/reference/hoon/rune) of the Hoon reference for\ndetails of what many of these relate to.\n\n#### Source\n\n```hoon\n+$  hoon                                                ::\n  $~  [%zpzp ~]\n  $^  [p=hoon q=hoon]                                   ::\n  $%                                                    ::\n    [%$ p=axis]                                         ::  simple leg\n  ::                                                    ::\n    [%base p=base]                                      ::  base spec\n    [%bust p=base]                                      ::  bunt base\n    [%dbug p=spot q=hoon]                               ::  debug info in trace\n    [%eror p=tape]                                      ::  assembly error\n    [%hand p=type q=nock]                               ::  premade result\n    [%note p=note q=hoon]                               ::  annotate\n    [%fits p=hoon q=wing]                               ::  underlying ?=\n    [%knit p=(list woof)]                               ::  assemble string\n    [%leaf p=(pair term @)]                             ::  symbol spec\n    [%limb p=term]                                      ::  take limb\n    [%lost p=hoon]                                      ::  not to be taken\n    [%rock p=term q=*]                                  ::  fixed constant\n    [%sand p=term q=*]                                  ::  unfixed constant\n    [%tell p=(list hoon)]                               ::  render as tape\n    [%tune p=$@(term tune)]                             ::  minimal face\n    [%wing p=wing]                                      ::  take wing\n    [%yell p=(list hoon)]                               ::  render as tank\n    [%xray p=manx:hoot]                                 ::  ;foo; templating\n  ::                                            ::::::  cores\n    [%brbc sample=(lest term) body=spec]                ::  |$\n    [%brcb p=spec q=alas r=(map term tome)]             ::  |_\n    [%brcl p=hoon q=hoon]                               ::  |:\n    [%brcn p=(unit term) q=(map term tome)]             ::  |%\n    [%brdt p=hoon]                                      ::  |.\n    [%brkt p=hoon q=(map term tome)]                    ::  |^\n    [%brhp p=hoon]                                      ::  |-\n    [%brsg p=spec q=hoon]                               ::  |~\n    [%brtr p=spec q=hoon]                               ::  |*\n    [%brts p=spec q=hoon]                               ::  |=\n    [%brpt p=(unit term) q=(map term tome)]             ::  |@\n    [%brwt p=hoon]                                      ::  |?\n  ::                                            ::::::  tuples\n    [%clcb p=hoon q=hoon]                               ::  :_ [q p]\n    [%clkt p=hoon q=hoon r=hoon s=hoon]                 ::  :^ [p q r s]\n    [%clhp p=hoon q=hoon]                               ::  :- [p q]\n    [%clls p=hoon q=hoon r=hoon]                        ::  :+ [p q r]\n    [%clsg p=(list hoon)]                               ::  :~ [p ~]\n    [%cltr p=(list hoon)]                               ::  :* p as a tuple\n  ::                                            ::::::  invocations\n    [%cncb p=wing q=(list (pair wing hoon))]            ::  %_\n    [%cndt p=hoon q=hoon]                               ::  %.\n    [%cnhp p=hoon q=hoon]                               ::  %-\n    [%cncl p=hoon q=(list hoon)]                        ::  %:\n    [%cntr p=wing q=hoon r=(list (pair wing hoon))]     ::  %*\n    [%cnkt p=hoon q=hoon r=hoon s=hoon]                 ::  %^\n    [%cnls p=hoon q=hoon r=hoon]                        ::  %+\n    [%cnsg p=wing q=hoon r=(list hoon)]                 ::  %~\n    [%cnts p=wing q=(list (pair wing hoon))]            ::  %=\n  ::                                            ::::::  nock\n    [%dtkt p=spec q=hoon]                               ::  .^  nock 11\n    [%dtls p=hoon]                                      ::  .+  nock 4\n    [%dttr p=hoon q=hoon]                               ::  .*  nock 2\n    [%dtts p=hoon q=hoon]                               ::  .=  nock 5\n    [%dtwt p=hoon]                                      ::  .?  nock 3\n  ::                                            ::::::  type conversion\n    [%ktbr p=hoon]                                      ::  ^|  contravariant\n    [%ktdt p=hoon q=hoon]                               ::  ^.  self-cast\n    [%ktls p=hoon q=hoon]                               ::  ^+  expression cast\n    [%kthp p=spec q=hoon]                               ::  ^-  structure cast\n    [%ktpm p=hoon]                                      ::  ^&  covariant\n    [%ktsg p=hoon]                                      ::  ^~  constant\n    [%ktts p=skin q=hoon]                               ::  ^=  label\n    [%ktwt p=hoon]                                      ::  ^?  bivariant\n    [%kttr p=spec]                                      ::  ^*  example\n    [%ktcl p=spec]                                      ::  ^:  filter\n  ::                                            ::::::  hints\n    [%sgbr p=hoon q=hoon]                               ::  ~|  sell on trace\n    [%sgcb p=hoon q=hoon]                               ::  ~_  tank on trace\n    [%sgcn p=chum q=hoon r=tyre s=hoon]                 ::  ~%  general jet hint\n    [%sgfs p=chum q=hoon]                               ::  ~/  function j-hint\n    [%sggl p=$@(term [p=term q=hoon]) q=hoon]           ::  ~<  backward hint\n    [%sggr p=$@(term [p=term q=hoon]) q=hoon]           ::  ~>  forward hint\n    [%sgbc p=term q=hoon]                               ::  ~$  profiler hit\n    [%sgls p=@ q=hoon]                                  ::  ~+  cache=memoize\n    [%sgpm p=@ud q=hoon r=hoon]                         ::  ~&  printf=priority\n    [%sgts p=hoon q=hoon]                               ::  ~=  don't duplicate\n    [%sgwt p=@ud q=hoon r=hoon s=hoon]                  ::  ~?  tested printf\n    [%sgzp p=hoon q=hoon]                               ::  ~!  type on trace\n  ::                                            ::::::  miscellaneous\n    [%mcts p=marl:hoot]                                 ::  ;=  list templating\n    [%mccl p=hoon q=(list hoon)]                        ::  ;:  binary to nary\n    [%mcfs p=hoon]                                      ::  ;/  [%$ [%$ p ~] ~]\n    [%mcgl p=spec q=hoon r=hoon s=hoon]                 ::  ;<  bind\n    [%mcsg p=hoon q=(list hoon)]                        ::  ;~  kleisli arrow\n    [%mcmc p=spec q=hoon]                               ::  ;;  normalize\n  ::                                            ::::::  compositions\n    [%tsbr p=spec q=hoon]                               ::  =|  push bunt\n    [%tscl p=(list (pair wing hoon)) q=hoon]            ::  =:  q w= p changes\n    [%tsfs p=skin q=hoon r=hoon]                        ::  =/  typed variable\n    [%tsmc p=skin q=hoon r=hoon]                        ::  =;  =/(q p r)\n    [%tsdt p=wing q=hoon r=hoon]                        ::  =.  r with p as q\n    [%tswt p=wing q=hoon r=hoon s=hoon]                 ::  =?  conditional =.\n    [%tsgl p=hoon q=hoon]                               ::  =<  =>(q p)\n    [%tshp p=hoon q=hoon]                               ::  =-  =+(q p)\n    [%tsgr p=hoon q=hoon]                               ::  =>  q w=subject p\n    [%tskt p=skin q=wing r=hoon s=hoon]                 ::  =^  state machine\n    [%tsls p=hoon q=hoon]                               ::  =+  q w=[p subject]\n    [%tssg p=(list hoon)]                               ::  =~  hoon stack\n    [%tstr p=(pair term (unit spec)) q=hoon r=hoon]     ::  =*  new style\n    [%tscm p=hoon q=hoon]                               ::  =,  overload p in q\n  ::                                            ::::::  conditionals\n    [%wtbr p=(list hoon)]                               ::  ?|  loobean or\n    [%wthp p=wing q=(list (pair spec hoon))]            ::  ?-  pick case in q\n    [%wtcl p=hoon q=hoon r=hoon]                        ::  ?:  if=then=else\n    [%wtdt p=hoon q=hoon r=hoon]                        ::  ?.  ?:(p r q)\n    [%wtkt p=wing q=hoon r=hoon]                        ::  ?^  if p is a cell\n    [%wtgl p=hoon q=hoon]                               ::  ?<  ?:(p !! q)\n    [%wtgr p=hoon q=hoon]                               ::  ?>  ?:(p q !!)\n    [%wtls p=wing q=hoon r=(list (pair spec hoon))]     ::  ?+  ?-  w=default\n    [%wtpm p=(list hoon)]                               ::  ?&  loobean and\n    [%wtpt p=wing q=hoon r=hoon]                        ::  ?@  if p is atom\n    [%wtsg p=wing q=hoon r=hoon]                        ::  ?~  if p is null\n    [%wthx p=skin q=wing]                               ::  ?#  if q matches p\n    [%wtts p=spec q=wing]                               ::  ?=  if q matches p\n    [%wtzp p=hoon]                                      ::  ?!  loobean not\n  ::                                            ::::::  special\n    [%zpcm p=hoon q=hoon]                               ::  !,\n    [%zpgr p=hoon]                                      ::  !>\n    [%zpgl p=spec q=hoon]                               ::  !<\n    [%zpmc p=hoon q=hoon]                               ::  !;\n    [%zpts p=hoon]                                      ::  !=\n    [%zppt p=(list wing) q=hoon r=hoon]                 ::  !@\n    [%zpwt p=$@(p=@ [p=@ q=@]) q=hoon]                  ::  !?\n    [%zpzp ~]                                           ::  !!\n  ==                                                    ::\n```\n\n#### Examples\n\n```\n> *hoon\n[%zpzp ~]\n\n> `hoon`(ream '|=([a=@ b=@] [b a])')\n[ %brts\n    p\n  [ %bccl\n      p\n    [ i=[%bcts p=term=%a q=[%base p=[%atom p=~.]]]\n      t=~[[%bcts p=term=%b q=[%base p=[%atom p=~.]]]]\n    ]\n  ]\n  q=[%cltr p=~[[%wing p=~[%b]] [%wing p=~[%a]]]]\n]\n```\n\n---\n",
    "tyre": "## `+$tyre`\n\nList, term hoon\n\nAssociative list of `term` `hoon`, used in jet hint processing.\n\n#### Source\n\n```hoon\n+$  tyre  (list [p=term q=hoon])                        ::\n```\n\n---\n",
    "tyke": "## `+$tyke`\n\nList of 'maybe' hoons\n\nList of `unit` `hoon`, or gaps left to be inferred, in `path` parsing. When you\nuse a path such as `/=base=/gen/code` the path is in fact a `tyke`, where the\n`=` are inferred from your current path.\n\n#### Source\n\n```hoon\n+$  tyke  (list (unit hoon))\n```\n\n---\n",
    "nock": "## `+$nock`\n\nVirtual nock.\n\nSee the [Nock documentation](/reference/nock/definition) for details.\n\n#### Source\n\n```hoon\n+$  nock  $^  [p=nock q=nock]                      ::  autocons\n          $%  [%1 p=*]                             ::  constant\n              [%2 p=nock q=nock]                   ::  compose\n              [%3 p=nock]                          ::  cell test\n              [%4 p=nock]                          ::  increment\n              [%5 p=nock q=nock]                   ::  equality test\n              [%6 p=nock q=nock r=nock]            ::  if, then, else\n              [%7 p=nock q=nock]                   ::  serial compose\n              [%8 p=nock q=nock]                   ::  push onto subject\n              [%9 p=@ q=nock]                      ::  select arm and fire\n              [%10 p=[p=@ q=nock] q=nock]          ::  edit\n              [%11 p=$@(@ [p=@ q=nock]) q=nock]    ::  hint\n              [%12 p=nock q=nock]                  ::  grab data from sky\n              [%0 p=@]                             ::  axis select\n          ==                                       ::\n```\n\n#### Examples\n\n```\n> !=([+(.) 20 -<])\n[[4 0 1] [1 20] 0 4]\n\n> (nock !=([+(.) 20]))\n[p=[%4 p=[%0 p=1]] q=[%1 p=20]]\n```\n\n---\n",
    "note": "## `+$note`\n\nType annotation\n\nUsed for documentation.\n\n#### Source\n\n```hoon\n+$  note                                             ::  type annotation\n          $%  [%help p=help]                         ::  documentation\n              [%know p=stud]                         ::  global standard\n              [%made p=term q=(unit (list wing))]    ::  structure\n          ==                                         ::\n```\n\n---\n",
    "type": "## `+$type`\n\nHoon type type\n\n#### Source\n\n```hoon\n+$  type  $~  %noun                                ::\n          $@  $?  %noun                            ::  any nouns\n                  %void                            ::  no noun\n              ==                                   ::\n          $%  [%atom p=term q=(unit @)]            ::  atom / constant\n              [%cell p=type q=type]                ::  ordered pair\n              [%core p=type q=coil]                ::  object\n              [%face p=$@(term tune) q=type]       ::  namespace\n              [%fork p=(set type)]                 ::  union\n              [%hint p=(pair type note) q=type]    ::  annotation\n              [%hold p=type q=hoon]                ::  lazy evaluation\n          ==                                       ::\n```\n\n#### Examples\n\n```\n> `type`[%cell [%atom %ud ~] [%atom %ud ~]]\n#t/[@ud @ud]\n```\n\n---\n",
    "tony": "## `+$tony`\n\n`$tone` done right\n\nAn intermediate Nock computation result. Similar to a\n[`$toon`](/reference/hoon/stdlib/3g#toon) but without a rendered stack\ntrace.\n\n#### Source\n\n```hoon\n+$  tony                               ::  ++tone done right\n          $%  [%0 p=tine q=*]          ::  success\n              [%1 p=(set)]             ::  blocks\n              [%2 p=(list [@ta *])]    ::  error ~_s\n          ==                           ::\n```\n\n---\n",
    "tine": "## `+$tine`\n\nPartial noun\n\n#### Source\n\n```hoon\n+$  tine                            ::  partial noun\n          $@  ~                     ::  open\n          $%  [%& p=tine q=tine]    ::  half-blocked\n              [%| p=(set)]          ::  fully blocked\n          ==                        ::\n```\n\n---\n",
    "tool": "## `+$tool`\n\nType decoration\n\n#### Source\n\n```hoon\n+$  tool  $@(term tune)\n```\n\n---\n",
    "tune": "## `+$tune`\n\nComplex\n\n#### Source\n\n```hoon\n+$  tune                                  ::  complex\n          $~  [~ ~]                       ::\n          $:  p=(map term (unit hoon))    ::  aliases\n              q=(list hoon)               ::  bridges\n          ==                              ::\n```\n\n---\n",
    "typo": "## `+$typo`\n\nOld type\n\nSame as `$type`\n\n#### Source\n\n```hoon\n+$  typo  type\n```\n\n---\n",
    "vase": "## `+$vase`\n\nType-value pair\n\nTyped data. A `$vase` is used wherever typed data is explicitly worked with.\n\n#### Source\n\n```hoon\n+$  vase  [p=type q=*]\n```\n\n#### Examples\n\n```\n> *vase\n[#t/* q=0]\n\n> !>([2 2])\n[#t/[@ud @ud] q=[2 2]]\n\n> !>('foo')\n[#t/@t q=7.303.014]\n```\n\n---\n",
    "vise": "## `+$vise`\n\nOld vase\n\nSame as a [`$vase`](#vase).\n\n#### Source\n\n```hoon\n+$  vise  [p=typo q=*]\n```\n\n---\n",
    "vial": "## `+$vial`\n\nco/contra/in/bi\n\nCovariant, contravariant, invariant, bivariant.\n\n#### Source\n\n```hoon\n+$  vial  ?(%read %rite %both %free)\n```\n\n---\n",
    "vair": "## `+$vair`\n\nin/contra/bi/co\n\nCore variance.\n\n- `%gold` - invariant payload.\n- `%iron` - contravariant sample.\n- `%lead` - bivariant sample.\n- `%zinc` - covariant sample.\n\nSee the Hoon School lesson on [type\npolymorphism](/guides/core/hoon-school/R-metals) for more details.\n\n#### Source\n\n```hoon\n+$  vair  ?(%gold %iron %lead %zinc)\n```\n\n---\n",
    "vein": "## `+$vein`\n\nSearch trace\n\nNoun search trace.\n\n#### Source\n\n```hoon\n+$  vein  (list (unit axis))\n```\n\n---\n",
    "sect": "## `+$sect`\n\nParagraph\n\nUsed in documentation.\n\n#### Source\n\n```hoon\n+$  sect  (list pica)\n```\n\n---\n",
    "whit": "## `+$whit`\n\nDocumentation\n\n#### Source\n\n```hoon\n+$  whit                                                ::\n          $:  lab=(unit term)                           ::  label\n              boy=(unit (pair cord (list sect)))        ::  body\n              def=(map term (pair cord (list sect)))    ::  definitions\n              use=(set term)                            ::  defs used\n          ==                                            ::\n```\n\n---\n",
    "what": "## `+$what`\n\nHelp slogan/section\n\n#### Source\n\n```hoon\n+$  what  (unit (pair cord (list sect)))\n```\n\n---\n",
    "wing": "## `+$wing`\n\nSearch path\n\nAddress in subject. A `$wing` is a path to a value in the subject. A\nterm alone is the trivial case of a `$wing`.\n\n#### Source\n\n```hoon\n+$  wing  (list limb)\n```\n\n#### Examples\n\n```\n> (ream 'a.+.c')\n[%wing p=~[%a [%.y p=3] %c]]\n\n> (wing +:(ream 'a.+.c'))\n~[%a [%.y p=3] %c]\n```\n\n---\n",
    "block": "## `+$block`\n\nAbstract identity of resource awaited\n\n#### Source\n\n```hoon\n+$  block\n  path\n```\n\n---\n",
    "result": "## `+$result`\n\nInternal interpreter result\n\n#### Source\n\n```hoon\n+$  result\n  $@(~ seminoun)\n```\n\n---\n",
    "thunk": "## `+$thunk`\n\nFragment constructor\n\n#### Source\n\n```hoon\n+$  thunk\n  $-(@ud (unit noun))\n```\n\n---\n",
    "doss": "## `+$doss`\n\nProfiling\n\n#### Source\n\n```hoon\n+$  doss\n  $:  mon=moan               ::  sample count\n      hit=(map term @ud)     ::  hit points\n      cut=(map path hump)    ::  cut points\n  ==\n```\n\n---\n",
    "moan": "## `+$moan`\n\nProfiling: sample metric\n\n#### Source\n\n```hoon\n+$  moan         ::  sample metric\n  $:  fun=@ud    ::  samples in C\n      noc=@ud    ::  samples in nock\n      glu=@ud    ::  samples in glue\n      mal=@ud    ::  samples in alloc\n      far=@ud    ::  samples in frag\n      coy=@ud    ::  samples in copy\n      euq=@ud    ::  samples in equal\n  ==             ::\n```\n\n---\n",
    "hump": "## `+$hump`\n\nProfiling\n\n#### Source\n\n```hoon\n+$  hump\n  $:  mon=moan              ::  sample count\n      out=(map path @ud)    ::  calls out of\n      inn=(map path @ud)    ::  calls into\n  ==\n```\n\n---\n",
    "musk": "## `++musk`\n\nNock with block set\n\n#### Source\n\nThis function is extremely large, please refer to `hoon.hoon` for the source.\n\n---\n",
    "bool": "## `++bool`\n\nMake loobean\n\n#### Source\n\n```hoon\n++  bool  `type`(fork [%atom %f `0] [%atom %f `1] ~)\n```\n\n---\n",
    "cell": "## `++cell`\n\nMake `%cell` type\n\n#### Source\n\n```hoon\n++  cell\n  ~/  %cell\n  |=  [hed=type tal=type]\n  ^-  type\n  ?:(=(%void hed) %void ?:(=(%void tal) %void [%cell hed tal]))\n```\n\n---\n",
    "core": "## `++core`\n\nMake `%core` type\n\n#### Source\n\n```hoon\n++  core\n  ~/  %core\n  |=  [pac=type con=coil]\n  ^-  type\n  ?:(=(%void pac) %void [%core pac con])\n```\n\n---\n",
    "hint": "## `++hint`\n\nMake `%hint` type\n\n#### Source\n\n```hoon\n++  hint\n  |=  [p=(pair type note) q=type]\n  ^-  type\n  ?:  =(%void q)  %void\n  ?:  =(%noun q)  %noun\n  [%hint p q]\n```\n\n---\n",
    "face": "## `++face`\n\nMake `%face` type\n\n#### Source\n\n```hoon\n++  face\n  ~/  %face\n  |=  [giz=$@(term tune) der=type]\n  ^-  type\n  ?:  =(%void der)\n    %void\n  [%face giz der]\n```\n\n---\n",
    "fork": "## `++fork`\n\nMake `%fork` type\n\n#### Source\n\n```hoon\n++  fork\n  ~/  %fork\n  |=  yed=(list type)\n  =|  lez=(set type)\n  |-  ^-  type\n  ?~  yed\n    ?~  lez  %void\n    ?:  ?=([* ~ ~] lez)  n.lez\n    [%fork lez]\n  %=    $\n      yed  t.yed\n      lez\n    ?:  =(%void i.yed)  lez\n    ?:  ?=([%fork *] i.yed)  (~(uni in lez) p.i.yed)\n    (~(put in lez) i.yed)\n  ==\n```\n\n---\n",
    "cove": "## `++cove`\n\nExtract [0 *] axis\n\n#### Source\n\n```hoon\n++  cove\n  |=  nug=nock\n  ?-    nug\n      [%0 *]   p.nug\n      [%11 *]  $(nug q.nug)\n      *        ~_(leaf+\"cove\" !!)\n  ==\n```\n\n---\n",
    "comb": "## `++comb`\n\nCombine two formulas\n\n#### Source\n\n```hoon\n++  comb\n  ~/  %comb\n  |=  [mal=nock buz=nock]\n  ^-  nock\n  ?:  ?&(?=([%0 *] mal) !=(0 p.mal))\n    ?:  ?&(?=([%0 *] buz) !=(0 p.buz))\n      [%0 (peg p.mal p.buz)]\n    ?:  ?=([%2 [%0 *] [%0 *]] buz)\n      [%2 [%0 (peg p.mal p.p.buz)] [%0 (peg p.mal p.q.buz)]]\n    [%7 mal buz]\n  ?:  ?=([^ [%0 %1]] mal)\n    [%8 p.mal buz]\n  ?:  =([%0 %1] buz)\n    mal\n  [%7 mal buz]\n```\n\n---\n",
    "cond": "## `++cond`\n\n`?:` compile\n\n#### Source\n\n```hoon\n++  cond\n  ~/  %cond\n  |=  [pex=nock yom=nock woq=nock]\n  ^-  nock\n  ?-  pex\n    [%1 %0]  yom\n    [%1 %1]  woq\n    *        [%6 pex yom woq]\n  ==\n```\n\n---\n",
    "cons": "## `++cons`\n\nMake formula cell\n\n#### Source\n\n```hoon\n++  cons\n  ~/  %cons\n  |=  [vur=nock sed=nock]\n  ^-  nock\n  ::  this optimization can remove crashes which are essential\n  ::\n  ::  ?:  ?=([[%0 *] [%0 *]] +<)\n  ::  ?:  ?&(=(+(p.vur) p.sed) =((div p.vur 2) (div p.sed 2)))\n  ::    [%0 (div p.vur 2)]\n  ::  [vur sed]\n  ?:  ?=([[%1 *] [%1 *]] +<)\n    [%1 p.vur p.sed]\n  [vur sed]\n```\n\n---\n",
    "fitz": "## `++fitz`\n\nAura compatibility\n\n#### Source\n\n```hoon\n++  fitz\n  ~/  %fitz\n  |=  [yaz=term wix=term]\n  =+  ^=  fiz\n      |=  mot=@ta  ^-  [p=@ q=@ta]\n      =+  len=(met 3 mot)\n      ?:  =(0 len)\n        [0 %$]\n      =+  tyl=(rsh [3 (dec len)] mot)\n      ?:  &((gte tyl 'A') (lte tyl 'Z'))\n        [(sub tyl 64) (end [3 (dec len)] mot)]\n      [0 mot]\n  =+  [yoz=(fiz yaz) wux=(fiz wix)]\n  ?&  ?|  =(0 p.yoz)\n          =(0 p.wux)\n          &(!=(0 p.wux) (lte p.wux p.yoz))\n      ==\n      |-  ?|  =(%$ p.yoz)\n              =(%$ p.wux)\n              ?&  =((end 3 p.yoz) (end 3 p.wux))\n                  $(p.yoz (rsh 3 p.yoz), p.wux (rsh 3 p.wux))\n              ==\n          ==\n  ==\n```\n\n---\n",
    "flan": "## `++flan`\n\nLoobean &\n\n#### Source\n\n```hoon\n++  flan\n  ~/  %flan\n  |=  [bos=nock nif=nock]\n  ^-  nock\n  ?:  =(bos nif)  bos\n  ?:  =([%0 0] bos)  nif\n  ?:  =([%0 0] nif)  bos\n  ?-    bos\n      [%1 %1]   bos\n      [%1 %0]   nif\n      *\n    ?-    nif\n        [%1 %1]   nif\n        [%1 %0]   bos\n        *       [%6 bos nif [%1 1]]\n    ==\n  ==\n```\n\n---\n",
    "flip": "## `++flip`\n\nLoobean negation\n\n#### Source\n\n```hoon\n++  flip\n  ~/  %flip\n  |=  dyr=nock\n  ?:  =([%0 0] dyr)  dyr\n  [%6 dyr [%1 1] [%1 0]]\n```\n\n---\n",
    "flor": "## `++flor`\n\nLoobean |\n\n#### Source\n\n```hoon\n++  flor\n  ~/  %flor\n  |=  [bos=nock nif=nock]\n  ^-  nock\n  ?:  =(bos nif)  bos\n  ?:  =([%0 0] bos)  nif\n  ?:  =([%0 0] nif)  bos\n  ?-  bos\n      [%1 %1]   nif\n      [%1 %0]   bos\n      *\n    ?-  nif\n        [%1 %1]   bos\n        [%1 %0]   nif\n        *         [%6 bos [%1 0] nif]\n    ==\n  ==\n```\n\n---\n",
    "hike": "## `++hike`\n\nCompiler utility\n\n#### Source\n\n```hoon\n++  hike\n  ~/  %hike\n  |=  [a=axis pac=(list (pair axis nock))]\n  |^  =/  rel=(map axis nock)  (roll pac insert)\n      =/  ord=(list axis)      (sort ~(tap in ~(key by rel)) gth)\n      |-  ^-  nock\n      ?~  ord\n        [%0 a]\n      =/  b=axis  i.ord\n      =/  c=nock  (~(got by rel) b)\n      =/  d=nock  $(ord t.ord)\n      [%10 [b c] d]\n  ::\n  ++  contains\n    |=  [container=axis contained=axis]\n    ^-  ?\n    =/  big=@    (met 0 container)\n    =/  small=@  (met 0 contained)\n    ?:  (lte small big)  |\n    =/  dif=@  (sub small big)\n    =(container (rsh [0 dif] contained))\n  ::\n  ++  parent\n    |=  a=axis\n    `axis`(rsh 0 a)\n  ::\n  ++  sibling\n    |=  a=axis\n    ^-  axis\n    ?~  (mod a 2)\n      +(a)\n    (dec a)\n  ::\n  ++  insert\n    |=  [e=[axe=axis fol=nock] n=(map axis nock)]\n    ^-  (map axis nock)\n    ?:  =/  a=axis  axe.e\n        |-  ^-  ?\n        ?:  =(1 a)  |\n        ?:  (~(has by n) a)\n          &\n        $(a (parent a))\n      ::  parent already in\n      n\n    =.  n\n      ::  remove children\n      %+  roll  ~(tap by n)\n      |=  [[axe=axis fol=nock] m=_n]\n      ?.  (contains axe.e axe)  m\n      (~(del by m) axe)\n    =/  sib  (sibling axe.e)\n    =/  un   (~(get by n) sib)\n    ?~  un   (~(put by n) axe.e fol.e)\n    ::  replace sibling with parent\n    %=  $\n      n  (~(del by n) sib)\n      e  :-  (parent sib)\n         ?:  (gth sib axe.e)\n           (cons fol.e u.un)\n         (cons u.un fol.e)\n    ==\n  --\n```\n\n---\n",
    "jock": "## `++jock`\n\nCompiler utility\n\n#### Source\n\n```hoon\n++  jock\n  |=  rad=?\n  |=  lot=coin  ^-  hoon\n  ?-    -.lot\n      ~\n    ?:(rad [%rock p.lot] [%sand p.lot])\n  ::\n      %blob\n    ?:  rad\n      [%rock %$ p.lot]\n    ?@(p.lot [%sand %$ p.lot] [$(p.lot -.p.lot) $(p.lot +.p.lot)])\n  ::\n      %many\n    [%cltr (turn p.lot |=(a=coin ^$(lot a)))]\n  ==\n```\n\n---\n",
    "look": "## `++look`\n\nCompiler utility\n\n#### Source\n\n```hoon\n++  look\n  ~/  %look\n  |=  [cog=term dab=(map term hoon)]\n  =+  axe=1\n  |-  ^-  (unit [p=axis q=hoon])\n  ?-  dab\n      ~  ~\n  ::\n      [* ~ ~]\n    ?:(=(cog p.n.dab) [~ axe q.n.dab] ~)\n  ::\n      [* ~ *]\n    ?:  =(cog p.n.dab)\n      [~ (peg axe 2) q.n.dab]\n    ?:  (gor cog p.n.dab)\n      ~\n    $(axe (peg axe 3), dab r.dab)\n  ::\n      [* * ~]\n    ?:  =(cog p.n.dab)\n      [~ (peg axe 2) q.n.dab]\n    ?:  (gor cog p.n.dab)\n      $(axe (peg axe 3), dab l.dab)\n    ~\n  ::\n      [* * *]\n    ?:  =(cog p.n.dab)\n      [~ (peg axe 2) q.n.dab]\n    ?:  (gor cog p.n.dab)\n      $(axe (peg axe 6), dab l.dab)\n    $(axe (peg axe 7), dab r.dab)\n  ==\n```\n\n---\n",
    "loot": "## `++loot`\n\nCompiler utility\n\n#### Source\n\n```hoon\n++  loot\n  ~/  %loot\n  |=  [cog=term dom=(map term tome)]\n  =+  axe=1\n  |-  ^-  (unit [p=axis q=hoon])\n  ?-  dom\n      ~  ~\n  ::\n      [* ~ ~]\n    %+  bind  (look cog q.q.n.dom)\n    |=((pair axis hoon) [(peg axe p) q])\n  ::\n      [* ~ *]\n    =+  yep=(look cog q.q.n.dom)\n    ?^  yep\n      [~ (peg (peg axe 2) p.u.yep) q.u.yep]\n    $(axe (peg axe 3), dom r.dom)\n  ::\n      [* * ~]\n    =+  yep=(look cog q.q.n.dom)\n    ?^  yep\n      [~ (peg (peg axe 2) p.u.yep) q.u.yep]\n    $(axe (peg axe 3), dom l.dom)\n  ::\n      [* * *]\n    =+  yep=(look cog q.q.n.dom)\n    ?^  yep\n      [~ (peg (peg axe 2) p.u.yep) q.u.yep]\n    =+  pey=$(axe (peg axe 6), dom l.dom)\n    ?^  pey  pey\n    $(axe (peg axe 7), dom r.dom)\n  ==\n```\n\n---\n",
    "ah": "## `++ah`\n\nTiki engine\n\n#### Source\n\n```hoon\n++  ah\n  |_  tik=tiki\n  ++  blue\n    |=  gen=hoon\n    ^-  hoon\n    ?.  &(?=(%| -.tik) ?=(~ p.tik))  gen\n    [%tsgr [%$ 3] gen]\n  ::\n  ++  teal\n    |=  mod=spec\n    ^-  spec\n    ?:  ?=(%& -.tik)  mod\n    [%over [%& 3]~ mod]\n  ::\n  ++  tele\n    |=  syn=skin\n    ^-  skin\n    ?:  ?=(%& -.tik)  syn\n    [%over [%& 3]~ syn]\n  ::\n  ++  gray\n    |=  gen=hoon\n    ^-  hoon\n    ?-  -.tik\n      %&  ?~(p.tik gen [%tstr [u.p.tik ~] [%wing q.tik] gen])\n      %|  [%tsls ?~(p.tik q.tik [%ktts u.p.tik q.tik]) gen]\n    ==\n  ::\n  ++  puce\n    ^-  wing\n    ?-  -.tik\n      %&  ?~(p.tik q.tik [u.p.tik ~])\n      %|  [[%& 2] ~]\n    ==\n  ::\n  ++  wthp  |=  opt=(list (pair spec hoon))\n            %+  gray  %wthp\n            [puce (turn opt |=([a=spec b=hoon] [a (blue b)]))]\n  ++  wtkt  |=([sic=hoon non=hoon] (gray [%wtkt puce (blue sic) (blue non)]))\n  ++  wtls  |=  [gen=hoon opt=(list (pair spec hoon))]\n            %+  gray  %wtls\n            [puce (blue gen) (turn opt |=([a=spec b=hoon] [a (blue b)]))]\n  ++  wtpt  |=([sic=hoon non=hoon] (gray [%wtpt puce (blue sic) (blue non)]))\n  ++  wtsg  |=([sic=hoon non=hoon] (gray [%wtsg puce (blue sic) (blue non)]))\n  ++  wthx  |=(syn=skin (gray [%wthx (tele syn) puce]))\n  ++  wtts  |=(mod=spec (gray [%wtts (teal mod) puce]))\n  --\n::\n```\n\n---\n",
    "ax": "## `++ax`\n\nSpec engine\n\n#### Source\n\nThis core is very large, refer to `hoon.hoon` for the source.\n\n---\n",
    "ap": "## `++ap`\n\nHoon engine\n\n#### Source\n\nThis core is very large, refer to `hoon.hoon` for the source.\n\n---\n",
    "ut": "## `++ut`\n\nHoon compiler backend\n\n#### Source\n\nThis core is too large to include here, refer to `hoon.hoon` for the source.\n\n---\n",
    "us": "## `++us`\n\nPretty-printer backend\n\n#### Source\n\nThis core is too large to include here, refer to `hoon.hoon` for the source.\n\n---\n",
    "cain": "## `++cain`\n\nTank pretty-print\n\nPretty-print a `vase` as a `tank` using `++deal`. This is the same as\n[`++sell`](#sell).\n\n#### Accepts\n\nA `vase`.\n\n#### Produces\n\nA `tank`.\n\n#### Source\n\n```hoon\n++  cain  sell\n```\n\n#### Examples\n\n```\n> (cain !>(['foo' 'bar']))\n[%rose p=[p=\" \" q=\"[\" r=\"]\"] q=~[[%leaf p=\"'foo'\"] [%leaf p=\"'bar'\"]]]\n```\n\n---\n",
    "noah": "## `++noah`\n\nTape pretty-print\n\nPretty-print a `vase` as a `tape`. This is the same as [`++text`](#text).\n\n#### Accepts\n\nA `vase`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  noah  text\n```\n\n#### Examples\n\n```\n> (noah !>(['foo' 'bar']))\n\"['foo' 'bar']\"\n```\n\n---\n",
    "onan": "## `++onan`\n\nVise to vase\n\nConvert a `vise` (old `vase`) to the new `vase`. This is the same as\n[`++seer`](#seer).\n\n#### Accepts\n\nA `vise`.\n\n#### Produces\n\nA `vase`.\n\n#### Source\n\n```hoon\n++  onan  seer\n```\n\n#### Examples\n\n```\n> (onan `vise`!>(['foo' 'bar']))\n[#t/[@t @t] q=[7.303.014 7.496.034]]\n```\n\n---\n",
    "levi": "## `++levi`\n\nType nests or crash\n\nCheck if type `b` nests under type `a`. Produces `%.y` if it nests and crashes\nif it does not.\n\n#### Accepts\n\n`a` is a `type`.\n\n`b` is a `type`.\n\n#### Produces\n\nA `?`.\n\n#### Source\n\n```hoon\n++  levi\n  |=  [a=type b=type]\n  (~(nest ut a) & b)\n```\n\n#### Examples\n\n```\n> (levi -:!>('foo') -:!>(%foo))\n%.y\n\n> (levi -:!>(%foo) -:!>('foo'))\n-need.%foo\n-have.@t\nnest-fail\n```\n\n---\n",
    "text": "## `++text`\n\nTape pretty-print\n\nPretty print vase `vax` as a `tape`.\n\n#### Accepts\n\n`vax` is a `vase`.\n\n#### Produces\n\nA `tape`.\n\n#### Source\n\n```hoon\n++  text\n  |=  vax=vase  ^-  tape\n  ~(ram re (sell vax))\n```\n\n#### Examples\n\n```\n> (text !>(['foo' 'bar']))\n\"['foo' 'bar']\"\n```\n\n---\n",
    "seem": "## `++seem`\n\nPromote typo\n\nConvert `typo` (old type) to the new `type`.\n\n#### Accepts\n\n`toy` is a `typo`.\n\n#### Produces\n\nA `type`.\n\n#### Source\n\n```hoon\n++  seem  |=(toy=typo `type`toy)\n```\n\n#### Examples\n\n```\n> (seem -:!>('foo'))\n#t/@t\n```\n\n---\n",
    "seer": "## `++seer`\n\nPromote vise\n\nConvert a `vise` (old `vase`) to the new `vase`.\n\n#### Accepts\n\n`vix` is a `vise`.\n\n#### Produces\n\nA `vase`.\n\n#### Source\n\n```hoon\n++  seer  |=(vix=vise `vase`vix)\n```\n\n#### Examples\n\n```\n> (seer !>('foo'))\n[#t/@t q=7.303.014]\n```\n\n---\n",
    "sell": "## `++sell`\n\nPretty-print vase to a tank\n\nPretty-print vase `vax` to a `tank` using `++deal:us`.\n\n#### Accepts\n\n`vax` is a `vase`.\n\n#### Produces\n\nA `tank`.\n\n#### Source\n\n```hoon\n++  sell\n  ~/  %sell\n  |=  vax=vase\n  ^-  tank\n  ~|  %sell\n  (~(deal us p.vax) q.vax)\n```\n\n#### Examples\n\n```\n> (sell !>(['foo' 'bar']))\n[%rose p=[p=\" \" q=\"[\" r=\"]\"] q=~[[%leaf p=\"'foo'\"] [%leaf p=\"'bar'\"]]]\n```\n\n---\n",
    "skol": "## `++skol`\n\nPretty-print type to tank\n\nPretty-print type `typ` to a `tank` using `++duck:ut`.\n\n#### Accepts\n\n`typ` is a `type`.\n\n#### Produces\n\nA `tank`.\n\n#### Source\n\n```hoon\n++  skol\n  |=  typ=type\n  ^-  tank\n  ~(duck ut typ)\n```\n\n#### Examples\n\n```\n> (skol -:!>(['foo' 'bar']))\n[%rose p=[p=\" \" q=\"[\" r=\"]\"] q=~[[%leaf p=\"@t\"] [%leaf p=\"@t\"]]]\n```\n\n---\n",
    "slam": "## `++slam`\n\nSlam a gate\n\nSlam `gat`, a gate in a `vase`, with `sam`, a sample in a `vase`. Produces a\n`vase` containing the result.\n\n#### Accepts\n\n`gat` is a gate in a `vase`.\n\n`sam` is a noun in a `vase`.\n\n#### Produces\n\nA `vase`.\n\n#### Source\n\n```hoon\n++  slam\n  |=  [gat=vase sam=vase]  ^-  vase\n  =+  :-  ^=  typ  ^-  type\n          [%cell p.gat p.sam]\n      ^=  gen  ^-  hoon\n      [%cnsg [%$ ~] [%$ 2] [%$ 3] ~]\n  =+  gun=(~(mint ut typ) %noun gen)\n  [p.gun (slum q.gat q.sam)]\n```\n\n#### Examples\n\n```\n> (slam !>(|=([a=@ud b=@ud] [b a])) !>([1 2]))\n[#t/[@ud @ud] q=[2 1]]\n```\n\n---\n",
    "slab": "## `++slab`\n\nTest if contains\n\nStates whether you can access named wing `cog` in type `typ` using access method `way`.\n\n#### Accepts\n\n`way` is a `?(%read %rite %both)` (A `$vial` without `%free`). This represents\nthe access method (read, write, or both read and write).\n\n`cog` is a `@tas`, the name of a wing.\n\n`typ` is a `type`.\n\n#### Produces\n\nA `?`.\n\n#### Source\n\n```hoon\n++  slab\n  |=  [way=?(%read %rite %both) cog=@tas typ=type]\n  ?=  [%& *]\n  (~(fond ut typ) way ~[cog])\n```\n\n```\n> =au |=(a=@ +(a))\n> (slab %read %a -:!>(au))\n%.y\n> (slab %rite %a -:!>(au))\n%.y\n> (slab %both %a -:!>(au))\n%.y\n\n> (slab %both %blah -:!>(au))\n%.n\n\n> =fe ^|(|=(a=@ +(a)))\n> (slab %read %a -:!>(fe))\n%.n\n> (slab %rite %a -:!>(fe))\n%.y\n> (slab %both %a -:!>(fe))\n%.n\n```\n\n---\n",
    "slap": "## `++slap`\n\nUntyped vase `.*`\n\nCompile hoon `gen` with subject `vax` using `.*`, producing a `vase` of the\nresult.\n\n#### Accepts\n\n`vax` is a noun in a `vase`, and is the subject.\n\n`gen` is some `hoon`.\n\n#### Produces\n\nA `vase`.\n\n#### Source\n\n```hoon\n++  slap\n  |=  [vax=vase gen=hoon]  ^-  vase\n  =+  gun=(~(mint ut p.vax) %noun gen)\n  [p.gun .*(q.vax q.gun)]\n```\n\n#### Examples\n\n```\n> (slap !>(b='foo') (ream '|=(a=@t [a b])'))\n[#t/<1.qgm [a=@t b=@t]> q=[[[0 6] 0 7] 0 7.303.014]]\n\n> !<($-(@t [@t @t]) (slap !>(b='foo') (ream '|=(a=@t [a b])')))\n<1|xpg [@t @t @t @t]>\n\n> (!<($-(@t [@t @t]) (slap !>(b='foo') (ream '|=(a=@t [a b])'))) 'bar')\n['bar' 'foo']\n```\n\n---\n",
    "slog": "## `++slog`\n\nDeify printf\n\nPrints stack trace `a` if the stack trace isn't null, then produces the other\ninput. `+slog` first takes `a`, producing a gate. The gate then takes some hoon.\n\n#### Accepts\n\n`a` is a `tang`, and is the sample of `+slog`.\n\n`(slog a)` takes some `hoon`.\n\n#### Produces\n\nThe result of the hoon given to `(slog a)`, with `a` printed to the terminal.\n\n#### Source\n\n```hoon\n++  slog\n  =|  pri=@\n  |=  a=tang  ^+  same\n  ?~(a same ~>(%slog.[pri i.a] $(a t.a)))\n```\n\n#### Examples\n\n```\nfoo\n> ((slog leaf+\"foo\" ~) (add 1 1))\n2\n```\n\n#### Discussion\n\n`slog` is intended to be put in the middle of a bunch of chained function\ncalls that string a piece of data through them, so that an error message will be\nprinted if there's one to print.\n\n---\n",
    "mean": "## `++mean`\n\nCrash and printf\n\nEnds the program and prints `a`, a tracing error message.\n\n#### Accepts\n\n`a` is a `tang`.\n\n#### Produces\n\nA crash, with `a` printed to the terminal.\n\n#### Source\n\n```hoon\n++  mean\n  |=  a=tang\n  ^+  !!\n  ?~  a  !!\n  ~_(i.a $(a t.a))\n```\n\n#### Examples\n\n```\n> (mean leaf+\"foo\" ~)\nfoo\ndojo: hoon expression failed\n```\n\n---\n",
    "road": "## `++road`\n\nEvaluate trap\n\nEvaluate a `trap`, producing the result if successful or else\ncrashing with a trace.\n\n#### Accepts\n\nA `trap`.\n\n#### Produces\n\nA noun.\n\n#### Source\n\n```hoon\n++  road\n  |*  =(trap *)\n  ^+  $:trap\n  =/  res  (mule trap)\n  ?-  -.res\n    %&  p.res\n    %|  (mean p.res)\n  ==\n```\n\n#### Examples\n\n```\n> (road |.(\"foo\"))\n\"foo\"\n\n> (road |.(~|('crash!' !!)))\n'crash!'\ndojo: hoon expression failed\n```\n\n---\n",
    "slew": "## `++slew`\n\nGet axis in vase\n\nGet axis `axe` in vase `vax`, producing the resulting `vase` in a `unit` which is null if\nthe axis cannot be retrieved.\n\n#### Accepts\n\n`axe` is an atom.\n\n`vax` is a `vase`.\n\n#### Produces\n\nA `(unit vase)`.\n\n#### Source\n\n```hoon\n++  slew\n  |=  [axe=@ vax=vase]  ^-  (unit vase)\n  ?.  |-  ^-  ?\n      ?:  =(1 axe)  &\n      ?.  ?=(^ q.vax)  |\n      $(axe (mas axe), q.vax .*(q.vax [0 (cap axe)]))\n    ~\n  `[(~(peek ut p.vax) %free axe) .*(q.vax [0 axe])]\n```\n\n#### Examples\n\n```\n> (slew 3 !>(['foo' 'bar']))\n[~ [#t/@t q=7.496.034]]\n\n> !<(@t (need (slew 3 !>(['foo' 'bar']))))\n'bar'\n\n> (slew 7 !>(['foo' 'bar']))\n~\n```\n\n---\n",
    "slim": "## `++slim`\n\nIdentical to `++seer`\n\nConvert a `vise` (old `vase`) to a `vase`. Identical to [`++seer`](#seer).\n\n#### Accepts\n\n`old` is a `vise`.\n\n#### Produces\n\nA `vase`.\n\n#### Source\n\n```hoon\n++  slim\n  |=  old=vise  ^-  vase\n  old\n```\n\n#### Examples\n\n```\n> (slim !>('foo'))\n[#t/@t q=7.303.014]\n```\n\n---\n",
    "slit": "## `++slit`\n\nType of slam\n\nThe `type` produced if a gate of type `gat` were slammed with a sample of type `sam`.\n\n#### Accepts\n\n`gat` is a `type`.\n\n`sam` is a `type`.\n\n#### Produces\n\nA `type`.\n\n#### Source\n\n```hoon\n++  slit\n  |=  [gat=type sam=type]\n  ?>  (~(nest ut (~(peek ut gat) %free 6)) & sam)\n  (~(play ut [%cell gat sam]) [%cnsg [%$ ~] [%$ 2] [%$ 3] ~])\n```\n\n#### Examples\n\n```\n> (slit -:!>(|*(a=@ [a a])) -:!>(42))\n#t/[@ud @ud]\n\n> (slit -:!>(|*(a=@ [a a])) -:!>('foo'))\n#t/[@t @t]\n```\n\n---\n",
    "slob": "## `++slob`\n\nSuperficial arm\n\n#### Source\n\n```hoon\n++  slob\n  |=  [cog=@tas typ=type]\n  ^-  ?\n  ?+  typ  |\n      [%hold *]  $(typ ~(repo ut typ))\n      [%hint *]  $(typ ~(repo ut typ))\n      [%core *]\n    |-  ^-  ?\n    ?~  q.r.q.typ  |\n    ?|  (~(has by q.q.n.q.r.q.typ) cog)\n        $(q.r.q.typ l.q.r.q.typ)\n        $(q.r.q.typ r.q.r.q.typ)\n    ==\n  ==\n```\n\n---\n",
    "sloe": "## `++sloe`\n\nGet arms in core\n\nProduces a list of the arms in a core of type `typ`.\n\n#### Accepts\n\n`typ` is a type.\n\n#### Produces\n\nA `(list term)`.\n\n#### Source\n\n```hoon\n++  sloe\n  |=  typ=type\n  ^-  (list term)\n  ?+    typ  ~\n      [%hold *]  $(typ ~(repo ut typ))\n      [%hint *]  $(typ ~(repo ut typ))\n      [%core *]\n    %-  zing\n    %+  turn  ~(tap by q.r.q.typ)\n      |=  [* b=tome]\n    %+  turn  ~(tap by q.b)\n      |=  [a=term *]\n    a\n  ==\n```\n\n#### Examples\n\n```\n> (sloe -:!>(|=(@ 1)))\n~[%$]\n\n> =cr |%\n      ++  foo  1\n      ++  bar  2\n      ++  baz  3\n      --\n\n> (sloe -:!>(cr))\n~[%foo %baz %bar]\n\n> (sloe -:!>(42))\n~\n```\n\n---\n",
    "slop": "## `++slop`\n\nCons two vases\n\nProduce the vase of a cell of vases `hed` and `tal`.\n\n#### Accepts\n\n`hed` is a `vase`.\n\n`tal` is a `vase`.\n\n#### Produces\n\nA `vase`.\n\n#### Source\n\n```hoon\n++  slop\n  |=  [hed=vase tal=vase]\n  ^-  vase\n  [[%cell p.hed p.tal] [q.hed q.tal]]\n```\n\n#### Examples\n\n```\n> (slop !>('foo') !>(42))\n[#t/[@t @ud] q=[7.303.014 42]]\n\n> !<([@t @ud] (slop !>('foo') !>(42)))\n['foo' 42]\n```\n\n---\n",
    "slot": "## `++slot`\n\nGot axis in vase\n\nGet axis `axe` in vase `vax`, returning it in a `vase`. Crashes if the axis\ncannot be retrieved.\n\n#### Accepts\n\n`axe` is an atom.\n\n`vax` is a `vase`.\n\n#### Produces\n\nA `vase`.\n\n#### Source\n\n```hoon\n++  slot\n  |=  [axe=@ vax=vase]  ^-  vase\n  [(~(peek ut p.vax) %free axe) .*(q.vax [0 axe])]\n```\n\n#### Examples\n\n```\n> (slot 3 !>(['foo' 'bar']))\n[#t/@t q=7.496.034]\n\n> !<(@t (slot 3 !>(['foo' 'bar'])))\n'bar'\n\n> (slot 7 !>(['foo' 'bar']))\ndojo: hoon expression failed\n```\n\n---\n",
    "slym": "## `++slym`\n\nSlam without sample-type\n\nSlam `gat`, a gate in a `vase`, with `sam`, a `noun`. The type of `sam` is\nignored and the type of the resulting vase is determined by the gate alone.\n\n#### Accepts\n\n`gat` is a `vase`.\n\n`sam` is a noun.\n\n#### Produces\n\nA `vase`.\n\n#### Source\n\n```hoon\n++  slym\n  |=  [gat=vase sam=*]  ^-  vase\n  (slap gat(+<.q sam) [%limb %$])\n```\n\n#### Examples\n\n```\n> (slym !>(|*(a=@ux [a a])) 'foo')\n[#t/[@ux @ux] q=[7.303.014 7.303.014]]\n\n> (slym !>(|*(a=@ux [a a])) \"foobar\")\n[#t/[@ux @ux] q=[[102 111 111 98 97 114 0] 102 111 111 98 97 114 0]]\n```\n\n---\n",
    "sped": "## `++sped`\n\nReconstruct type\n\n#### Source\n\n```hoon\n++  sped\n  |=  vax=vase\n  ^-  vase\n  :_  q.vax\n  ?@  q.vax  (~(fuse ut p.vax) [%atom %$ ~])\n  ?@  -.q.vax\n    ^=  typ\n    %-  ~(play ut p.vax)\n    [%wtgr [%wtts [%leaf %tas -.q.vax] [%& 2]~] [%$ 1]]\n  (~(fuse ut p.vax) [%cell %noun %noun])\n```\n\n---\n",
    "swat": "## `++swat`\n\nDeferred `++slap`\n\nThis is the same as [`++slap`](#slap) except `tap` is the subject `vase`\nencapsulated in a `trap`, and a `(trap vase)` is produced.\n\n#### Accepts\n\n`tap` is a `(trap vase)`.\n\n`gen` is `hoon`.\n\n#### Produces\n\nA `(trap vase)`.\n\n#### Source\n\n```hoon\n++  swat\n  |=  [tap=(trap vase) gen=hoon]\n  ^-  (trap vase)\n  =/  gun  (~(mint ut p:$:tap) %noun gen)\n  |.  ~+\n  [p.gun .*(q:$:tap q.gun)]\n```\n\n#### Examples\n\n```\n> %.  10\n  !<  $-(@ @)\n  %-  road\n  %+  swat\n    |.(!>(add-42=(cury add 42)))\n  (ream '|=(a=@ (add-42 a))')\n52\n```\n\n---\n",
    "vang": "## `++vang`\n\nSet `++vast` parameters\n\n#### Source\n\n```hoon\n++  vang                                                ::  set ++vast params\n  |=  [bug=? wer=path]                                  ::  bug: debug mode\n  %*(. vast bug bug, wer wer)                           ::  wer: where we are\n```\n\n---\n",
    "vast": "## `++vast`\n\nMain parsing core\n\n### Source\n\nThis core is too large to include here, please refer to `hoon.hoon` for the\nsource.\n\n---\n\n### `++vest`\n\nParse hoon\n\nParsing `rule`. Parse hoon of any form.\n\n#### Source\n\n```hoon\n++  vest\n  ~/  %vest\n  |=  tub=nail\n  ^-  (like hoon)\n  %.  tub\n  %-  full\n  (ifix [gay gay] tall:vast)\n```\n\n#### Examples\n\n```\n> (rash '(add 1 1)' vest)\n[%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=1] [%sand p=%ud q=1]]]\n\n> (rash '%+  add\\0a  1\\0a1' vest)\n[%cnls p=[%wing p=~[%add]] q=[%sand p=%ud q=1] r=[%sand p=%ud q=1]]\n```\n\n---\n\n### `++vice`\n\nParse wide-form hoon\n\nParse `txt`, a `knot` containing wide-form hoon, to `hoon`.\n\n#### Accepts\n\n`txt` is a `@ta`.\n\n#### Produces\n\n`hoon`.\n\n#### Source\n\n```hoon\n++  vice\n  |=  txt=@ta\n  ^-  hoon\n  (rash txt wide:vast)\n```\n\n#### Examples\n\n```\n> (vice '(add 1 1)')\n[%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=1] [%sand p=%ud q=1]]]\n\n> (vice '%+  add\\0a  1\\0a1')\n{1 3}\nsyntax error\n```\n\n---\n",
    "make": "## `++make`\n\nCompile cord to nock\n\nCompile `txt`, an `atom` containing hoon source code as little-endian UTF-8\ntext, to `nock`.\n\n#### Accepts\n\n`txt` is a `@`.\n\n#### Produces\n\n`nock`.\n\n#### Source\n\n```hoon\n++  make\n  |=  txt=@\n  q:(~(mint ut %noun) %noun (ream txt))\n```\n\n#### Examples\n\n```\n> (make '[. . .]')\n[p=[%0 p=1] q=[p=[%0 p=1] q=[%0 p=1]]]\n\n> .*(42 (make '[. . .]'))\n[42 42 42]\n```\n\n---\n",
    "rain": "## `++rain`\n\nParse with % path\n\nParse `txt`, an `atom` containing hoon source code as little-endian UTF-8 text,\nto `hoon`. Any `%` path short-hands are replaced with the path given in `bon`.\nIf parsing fails, `bon` is also printed to the terminal.\n\n#### Accepts\n\n`bon` is a `path`.\n\n`txt` is an atom.\n\n#### Produces\n\n`hoon`.\n\n#### Source\n\n```hoon\n++  rain\n  |=  [bon=path txt=@]\n  ^-  hoon\n  =+  vaz=vast\n  ~|  bon\n  (scan (trip txt) (full (ifix [gay gay] tall:vaz(wer bon))))\n```\n\n#### Examples\n\n```\n> (rain /a/b/c '%')\n[%clsg p=~[[%sand p=%ta q=97] [%sand p=%ta q=98] [%sand p=%ta q=99]]]\n\n> !<(path (slap !>(~) (rain /a/b/c '%')))\n/a/b/c\n\n> (rain / '(add 1 1)')\n[%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=1] [%sand p=%ud q=1]]]\n\n> !<(@ud (slap !>(add=add) (rain / '(add 1 1)')))\n2\n```\n\n---\n",
    "ream": "## `++ream`\n\nParse cord to hoon\n\nParse `txt`, an `atom` containing hoon source code as little-endian UTF-8 text,\nto `hoon`.\n\n#### Accepts\n\n`txt` is an atom.\n\n#### Produces\n\n`hoon`.\n\n#### Source\n\n```hoon\n++  ream\n  |=  txt=@\n  ^-  hoon\n  (rash txt vest)\n```\n\n#### Examples\n\n```\n> !<(tape (slap !>(~) (ream '\"foobar\"')))\n\"foobar\"\n```\n\n---\n",
    "reck": "## `++reck`\n\nParse hoon file\n\nParse `bon` to `hoon`. `bon` is a `path` to a .hoon file without the mark.\n\n#### Accepts\n\n`bon` is a `path`.\n\n#### Produces\n\n`hoon`.\n\n#### Source\n\n```hoon\n++  reck\n  |=  bon=path\n  (rain bon .^(@t %cx (weld bon `path`[%hoon ~])))\n```\n\n#### Examples\n\n```\n> (reck %/gen/code)\n[ %clhp\n  p=[%rock p=%tas q=7.954.803]\n    q\n  [ %brts\n      p\n    [ %bccl\n        p\n      [   i\n        [ %bccl\n            p\n          [   i\n            [%bcts p=term=%now q=[%base p=[%atom p=~.da]]]\n              t\n......(truncated for brevity)..........\n```\n\n---\n",
    "ride": "## `++ride`\n\nEnd-to-end compiler\n\nParse and compile cord `txt`, producing a pair of its `type` and compiled\n`nock`. The `typ` argument specifies the `type` of the subject.\n\n#### Accepts\n\n`typ` is a `type`\n\n`txt` is an atom.\n\n#### Produces\n\nA `(pair type nock)`.\n\n#### Source\n\n```hoon\n++  ride\n  |=  [typ=type txt=@]\n  ^-  (pair type nock)\n  ~>  %slog.[0 leaf/\"ride: parsing\"]\n  =/  gen  (ream txt)\n  ~>  %slog.[0 leaf/\"ride: compiling\"]\n  ~<  %slog.[0 leaf/\"ride: compiled\"]\n  (~(mint ut typ) %noun gen)\n```\n\n#### Examples\n\n```\nride: parsing\nride: compiling\nride: compiled\n> (ride -:!>(.) '(add 2 2)')\n[ #t/@\n    q\n  [ %8\n    p=[%9 p=36 q=[%0 p=1.023]]\n      q\n    [ %9\n      p=2\n        q\n      [ %10\n          p\n        [ p=6\n            q\n          [ p=[%7 p=[%0 p=3] q=[%1 p=2]]\n            q=[%7 p=[%0 p=3] q=[%1 p=2]]\n          ]\n        ]\n        q=[%0 p=2]\n      ]\n    ]\n  ]\n]\n\nride: parsing\nride: compiling\n> (ride %noun '(add 2 2)')\n-find.add\ndojo: hoon expression failed\n```\n\n---\n",
    "mane": "## `+$mane`\n\nXML name+space\n\nXML tag name and optional namespace.\n\n#### Source\n\n```hoon\n+$  mane  $@(@tas [@tas @tas])\n```\n\n#### Examples\n\n```\n> (en-xml:html ;foo;)\n\"<foo></foo>\"\n\n> (en-xml:html ;foo_bar;)\n\"<foo:bar></foo:bar>\"\n\n> `manx`;foo_bar;\n[g=[n=[%foo %bar] a=~] c=~]\n\n> `mane`n.g:`manx`;foo_bar;\n[%foo %bar]\n\n> `mane`n.g:`manx`;foo;\n%foo\n```\n\n---\n",
    "manx": "## `+$manx`\n\nDynamic XML node\n\nAn XML element which may contain text, attributes, and other elements.\n\n`g` is a [`$marx`](#marx) (a tag) and `c` is a\n[`$marl`](#marl) (its contents).\n\n#### Source\n\n```hoon\n+$  manx  $~([[%$ ~] ~] [g=marx c=marl])\n```\n\n#### Examples\n\n```\n> *manx\n[g=[n=%$ a=~] c=~\n\n> `manx`;foo;\n[g=[n=%foo a=~] c=~]\n\n> (en-xml:html `manx`;foo;)\n\"<foo></foo>\"\n\n> =a ^-  manx\n     ;foo\n       ;bar: abc\n       ;baz\n         ;xxx: hello\n       ==\n     ==\n\n> a\n[ g=[n=%foo a=~]\n    c\n  ~[\n    [ g=[n=%bar a=~]\n      c=~[[g=[n=%$ a=~[[n=%$ v=\"abc\"]]] c=~]]\n    ]\n    [ g=[n=%baz a=~]\n        c\n      ~[\n        [ g=[n=%xxx a=~]\n          c=~[[g=[n=%$ a=~[[n=%$ v=\"hello\"]]] c=~]]\n        ]\n      ]\n    ]\n  ]\n]\n\n> (en-xml:html a)\n\"<foo><bar>abc</bar><baz><xxx>hello</xxx></baz></foo>\"\n```\n\n---\n",
    "marl": "## `+$marl`\n\nXML node list\n\nA list of XML nodes ([`$marx`](#marx)).\n\n#### Source\n\n```hoon\n+$  marl  (list manx)\n```\n\n#### Examples\n\n```\n> *marl\n~\n\n> ^-  marl\n  ;=\n    ;foo: abc\n    ;bar: def\n  ==\n~[\n  [g=[n=%foo a=~] c=~[[g=[n=%$ a=~[[n=%$ v=~['a' 'b' 'c']]]] c=~]]]\n  [g=[n=%bar a=~] c=~[[g=[n=%$ a=~[[n=%$ v=~['d' 'e' 'f']]]] c=~]]]\n]\n\n> %-  en-xml:html\n  ;baz\n    ;=\n      ;foo: abc\n      ;bar: def\n    ==\n  ==\n\"<baz><foo>abc</foo><bar>def</bar></baz>\"\n```\n\n---\n",
    "mars": "## `+$mars`\n\nXML cdata\n\n#### Source\n\n```hoon\n+$  mars  [t=[n=%$ a=[i=[n=%$ v=tape] t=~]] c=~]\n```\n\n---\n",
    "mart": "## `+$mart`\n\nXML attributes\n\nA list of atributes for an XML tag. For each list item, `n` is a\n[`$mane`](#mane) (an attribute name with optional namespace) and `v` is\na `tape` (the attribute itself).\n\n#### Source\n\n```hoon\n+$  mart  (list [n=mane v=tape])\n```\n\n#### Examples\n\n```\n> *mart\n~\n\n> `manx`;foo.bar;\n[g=[n=%foo a=~[[n=%class v=\"bar\"]]] c=~]\n\n> `mart`a.g:`manx`;foo.bar;\n~[[n=%class v=\"bar\"]]\n\n> (en-xml:html ;foo.bar;)\n\"<foo class=\\\"bar\\\"></foo>\"\n```\n\n---\n",
    "marx": "## `+$marx`\n\nDynamic XML tag\n\nAn XML tag with optional attributes. `n` is a [`$mane`](#mane) (the tag\nname with optional namespace) and `a` is a [`$mart`](#marthoot) (any XML\nattributes).\n\n#### Source\n\n```hoon\n+$  marx  $~([%$ ~] [n=mane a=mart])\n```\n\n#### Examples\n\n```\n> `manx`;foo.bar;\n[g=[n=%foo a=~[[n=%class v=\"bar\"]]] c=~]\n\n> `marx`g:`manx`;foo.bar;\n[n=%foo a=~[[n=%class v=\"bar\"]]]\n\n> (en-xml:html ;foo.bar;)\n\"<foo class=\\\"bar\\\"></foo>\"\n```\n\n---\n",
    "mite": "## `+$mite`\n\nMIME type\n\nThis type represents a MIME type like `text/plain` as a `path`.\n\n#### Source\n\n```hoon\n+$  mite  (list @ta)\n```\n\n#### Examples\n\n```\n> `mite`/text/plain\n/text/plain\n```\n\n---\n",
    "pass": "## `+$pass`\n\nPublic key\n\nThis type is used for a ship's public key, as an atom.\n\n#### Source\n\n```hoon\n+$  pass  @\n```\n\n---\n",
    "ring": "## `+$ring`\n\nPrivate key\n\nThis type is used for a ship's private key, as an atom.\n\n#### Source\n\n```hoon\n+$  ring  @\n```\n\n---\n",
    "ship": "## `+$ship`\n\nNetwork identity\n\nJust an `@p`\n\n#### Source\n\n```hoon\n+$  ship  @p\n```\n\n#### Examples\n\n```\n> *ship\n~zod\n\n> `ship`~sampel-palnet\n~sampel-palnet\n```\n\n---\n",
    "shop": "## `+$shop`\n\nUrbit/DNS identity\n\nEither a [`$ship`](#ship) or a domain name as a `path`.\n\n#### Source\n\n```hoon\n+$  shop  (each ship (list @ta))\n```\n\n---\n",
    "spur": "## `+$spur`\n\nship desk case spur\n\nThe part of a Clay `path` after the `%`.\n\n#### Source\n\n```hoon\n+$  spur  path\n```\n\n---\n",
    "time": "## `+$time`\n\nGalactic time\n\nJust a `@da`\n\n#### Source\n\n```hoon\n+$  time  @da\n```\n\n#### Examples\n\n```\n> *time\n~2000.1.1\n```\n\n---\n",
    "pi-heck": "## `++pi-heck`\n\nProfiling utility\n\n#### Source\n\n```hoon\n++  pi-heck\n    |=  [nam=@tas day=doss]\n    ^-  doss\n    =+  lam=(~(get by hit.day) nam)\n    day(hit (~(put by hit.day) nam ?~(lam 1 +(u.lam))))\n```\n\n---\n",
    "pi-noon": "## `++pi-noon`\n\nSample trace\n\n#### Source\n\n```hoon\n++  pi-noon\n  |=  [mot=term paz=(list path) day=doss]\n  =|  lax=(unit path)\n  |-  ^-  doss\n  ?~  paz  day(mon (pi-mope mot mon.day))\n  %=    $\n      paz  t.paz\n      lax  `i.paz\n      cut.day\n    %+  ~(put by cut.day)  i.paz\n    ^-  hump\n    =+  nax=`(unit path)`?~(t.paz ~ `i.t.paz)\n    =+  hup=`hump`=+(hup=(~(get by cut.day) i.paz) ?^(hup u.hup [*moan ~ ~]))\n    :+  (pi-mope mot mon.hup)\n      ?~  lax  out.hup\n      =+  hag=(~(get by out.hup) u.lax)\n      (~(put by out.hup) u.lax ?~(hag 1 +(u.hag)))\n    ?~  nax  inn.hup\n    =+  hag=(~(get by inn.hup) u.nax)\n    (~(put by inn.hup) u.nax ?~(hag 1 +(u.hag)))\n  ==\n```\n\n---\n",
    "pi-mope": "## `++pi-mope`\n\nAdd sample\n\n#### Source\n\n```hoon\n++  pi-mope\n  |=  [mot=term mon=moan]\n  ?+  mot  mon\n    %fun  mon(fun +(fun.mon))\n    %noc  mon(noc +(noc.mon))\n    %glu  mon(glu +(glu.mon))\n    %mal  mon(mal +(mal.mon))\n    %far  mon(far +(far.mon))\n    %coy  mon(coy +(coy.mon))\n    %euq  mon(euq +(euq.mon))\n  ==\n```\n\n---\n",
    "pi-moth": "## `++pi-moth`\n\nCount sample\n\n#### Source\n\n```hoon\n++  pi-moth\n  |=  mon=moan  ^-  @ud\n  :(add fun.mon noc.mon glu.mon mal.mon far.mon coy.mon euq.mon)\n```\n\n---\n",
    "pi-mumm": "## `++pi-mumm`\n\nPrint sample\n\n#### Source\n\n```hoon\n++  pi-mumm\n  |=  mon=moan  ^-  tape\n  =+  tot=(pi-moth mon)\n  ;:  welp\n    ^-  tape\n    ?:  =(0 noc.mon)  ~\n    (welp (scow %ud (div (mul 100 noc.mon) tot)) \"n \")\n  ::\n    ^-  tape\n    ?:  =(0 fun.mon)  ~\n    (welp (scow %ud (div (mul 100 fun.mon) tot)) \"c \")\n  ::\n    ^-  tape\n    ?:  =(0 glu.mon)  ~\n    (welp (scow %ud (div (mul 100 glu.mon) tot)) \"g \")\n  ::\n    ^-  tape\n    ?:  =(0 mal.mon)  ~\n    (welp (scow %ud (div (mul 100 mal.mon) tot)) \"m \")\n  ::\n    ^-  tape\n    ?:  =(0 far.mon)  ~\n    (welp (scow %ud (div (mul 100 far.mon) tot)) \"f \")\n  ::\n    ^-  tape\n    ?:  =(0 coy.mon)  ~\n    (welp (scow %ud (div (mul 100 coy.mon) tot)) \"y \")\n  ::\n    ^-  tape\n    ?:  =(0 euq.mon)  ~\n    (welp (scow %ud (div (mul 100 euq.mon) tot)) \"e \")\n  ==\n```\n\n---\n",
    "pi-tell": "## `++pi-tell`\n\nProduce dump\n\n#### Source\n\n```hoon\n++  pi-tell\n  |=  day=doss\n  ^-  (list tape)\n  ?:  =(day *doss)  ~\n  =+  tot=(pi-moth mon.day)\n  ;:  welp\n    [(welp \"events: \" (pi-mumm mon.day)) ~]\n  ::\n    %+  turn\n      %+  sort  ~(tap by hit.day)\n      |=  [a=[* @] b=[* @]]\n      (lth +.a +.b)\n    |=  [nam=term num=@ud]\n    :(welp (trip nam) \": \" (scow %ud num))\n    [\"\" ~]\n  ::\n    %-  zing\n    ^-  (list (list tape))\n    %+  turn\n      %+  sort  ~(tap by cut.day)\n      |=  [one=(pair path hump) two=(pair path hump)]\n      (gth (pi-moth mon.q.one) (pi-moth mon.q.two))\n    |=  [pax=path hup=hump]\n    =+  ott=(pi-moth mon.hup)\n    ;:  welp\n      [(welp \"label: \" (spud pax)) ~]\n      [(welp \"price: \" (scow %ud (div (mul 100 ott) tot))) ~]\n      [(welp \"shape: \" (pi-mumm mon.hup)) ~]\n    ::\n      ?:  =(~ out.hup)  ~\n      :-  \"into:\"\n      %+  turn\n        %+  sort  ~(tap by out.hup)\n        |=([[* a=@ud] [* b=@ud]] (gth a b))\n      |=  [pax=path num=@ud]\n      ^-  tape\n      :(welp \"  \" (spud pax) \": \" (scow %ud num))\n    ::\n      ?:  =(~ inn.hup)  ~\n      :-  \"from:\"\n      %+  turn\n        %+  sort  ~(tap by inn.hup)\n        |=([[* a=@ud] [* b=@ud]] (gth a b))\n      |=  [pax=path num=@ud]\n      ^-  tape\n      :(welp \"  \" (spud pax) \": \" (scow %ud num))\n    ::\n      [\"\" ~]\n      ~\n    ==\n  ==\n```\n\n---\n"
}